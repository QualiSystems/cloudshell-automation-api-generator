<?xml version="1.0" encoding="utf-8"?>
<Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ApiDocumentation.xsd"> <!-- test -->
  <TOC>
    <Folder Name="Configuration">
      <Command Name="ExportFamiliesAndModels"  Lang="all"/>
      <Command Name="DecryptPassword"  Lang="tcl;py"/>
    </Folder>
    <Folder Name="User management">
      <Folder Name="Login">
        <Command Name="Logon"  Lang="all"/>
        <Command Name="SecureLogon"  Lang="all"/>
        <Command Name="Logoff" Lang="all"/>
      </Folder>
      <Folder Name="Users">
        <Command Name="AddNewUser"  Lang="all"/>
        <Command Name="DeleteUser"  Lang="all"/>
        <Command Name="GetUserDetails"  Lang="all"/>
        <Command Name="GetAllUsersDetails"  Lang="all"/>
        <Command Name="UpdateUser"  Lang="all"/>
        <Command Name="UpdateUserGroups"  Lang="all"/>
        <Command Name="UpdateUsersLimitations"  Lang="all"/>
        <Command Name="UpdateUserPassword"  Lang="all"/>
      </Folder>
      <Folder Name="Groups">
        <Command Name="AddNewGroup"  Lang="all"/>
        <Command Name="AddUsersToGroup"  Lang="all"/>
        <Command Name="DeleteGroup"  Lang="all"/>
        <Command Name="GetGroupsDetails"  Lang="all"/>
        <Command Name="GetGroupDomains"  Lang="all"/>
        <Command Name="RemoveUsersFromGroup"  Lang="all"/>
        <Command Name="UpdateGroup"  Lang="all"/>
      </Folder>
      <Folder Name="Domains">
        <Command Name="AddGroupsToDomain"  Lang="all"/>
        <Command Name="SetGroupDomainPermissions"  Lang="all"/>
        <Command Name="AddNewDomain"  Lang="all"/>
        <Command Name="AddResourcesToDomain"  Lang="all"/>
        <Command Name="CopyDomainsResources"  Lang="all"/>
        <Command Name="AddTopologiesToDomain"  Lang="all"/>
        <Command Name="DeleteDomain"  Lang="all"/>
        <Command Name="GetDomainDetails"  Lang="all"/>
        <Command Name="RemoveGroupFromDomain"  Lang="all"/>
        <Command Name="RemoveResourcesFromDomain"  Lang="all"/>
        <Command Name="RemoveTopologiesFromDomain"  Lang="all"/>
        <Command Name="UpdateDomainTopologiesFolder"  Lang="all"/>
        <Command Name="ArchiveDomain" />
        <Command Name="UnarchiveDomain" />
      </Folder>
    </Folder>
    <Folder Name="Inventory management">
      <Folder Name="Resources">
        <Command Name="AutoLoad"  Lang="all"/>
        <Command Name="CreateResource"  Lang="all"/>
        <Command Name="CreateResources"  Lang="all"/>
        <Command Name="DeleteResource"  Lang="all"/>
        <Command Name="DeleteResources"  Lang="all"/>
        <Command Name="FindResources"  Lang="all"/>
        <Command Name="FindResourcesInTimeRange"  Lang="all"/>
        <Command Name="GetResourceDetails"  Lang="all"/>
        <Command Name="GetResourceList"  Lang="all"/>
        <Command Name="GetResourceLiveStatus"  Lang="all"/>
        <Command Name="RenameResource"  Lang="all"/>
        <Command Name="SetResourceLiveStatus"  Lang="all"/>
        <Command Name="SyncResourceFromDevice"  Lang="all"/>
        <Command Name="SyncResourceToDevice"  Lang="all"/>
        <Command Name="UpdateResourceAddress"  Lang="all"/>
        <Command Name="UpdateResourceDescription"  Lang="all"/>
        <Command Name="UpdateResourceDriver"  Lang="all"/>
        <Command Name="GetAbstractTemplateList"  Lang="all"/>
        <Command Name="DeleteResourceTemplate"  Lang="all"/>
      </Folder>
      <Folder Name="Connections">
        <Command Name="UpdatePhysicalConnection"  Lang="all"/>
        <Command Name="UpdatePhysicalConnections"  Lang="all"/>
        <Command Name="UpdateConnectionWeight"  Lang="all"/>
      </Folder>
      <Folder Name="Mapping">
        <Command Name="MapPorts"  Lang="all"/>
        <Command Name="UnMapPorts"  Lang="all"/>
      </Folder>
      <Folder Name="Topologies">
        <Command Name="DeleteTopology"  Lang="all"/>
        <Command Name="GetCategoriesOfTopology"  Lang="all"/>
        <Command Name="GetTopologyDetails"  Lang="all"/>
        <Command Name="GetTopologiesByCategory"  Lang="all"/>
        <Command Name="GetTopologyCategories"  Lang="all"/>
        <Command Name="RemoveTopologyCategory"  Lang="all"/>
        <Command Name="SetTopologyCategory"  Lang="all"/>
        <Command Name="UpdateTopologyOwner"  Lang="all"/>
        <Command Name="UpdateTopologyDriver"  Lang="all"/>
      </Folder>
      <Folder Name="Folders">
        <Command Name="CreateFolder"  Lang="all"/>
        <Command Name="DeleteFolder"  Lang="all"/>
        <Command Name="GetFolderContent"  Lang="all"/>
      </Folder>
      <Folder Name="Services">
        <Command Name="GetServices"  Lang="all"/>
        <Command Name="SetServiceDriver"  Lang="all"/>
      </Folder>
      <Folder Name="Drivers">
        <Command Name="UpdateDriver" Lang="all" />
        <Command Name="UpdateScript" Lang="all" />
      </Folder>
    </Folder>
    <Folder Name="Reservation operations">
      <Folder Name="Apps">
        <Command Name="AddAppToReservation" Lang="all"/>
        <Command Name="RemoveAppFromReservation" Lang="all"/>
      </Folder>
      <Folder Name="Scheduling">
        <Command Name="AddPermittedUsersToReservation"  Lang="all"/>
        <Command Name="CreateImmediateReservation"  Lang="all"/>
        <Command Name="CreateImmediateTopologyReservation" Lang="tcl;py" />
        <Command Name="CreateReservation"  Lang="all"/>
        <Command Name="CreateTopologyReservation"  Lang="tcl;py;xmlrpc"/>
        <Command Name="DeleteReservation"  Lang="all"/>
        <Command Name="EndReservation"  Lang="all"/>
        <Command Name="ExtendReservation"  Lang="all"/>
        <Command Name="GetCurrentReservations"  Lang="all"/>
        <Command Name="GetReservationDetails"  Lang="all"/>
        <Command Name="GetReservationRemainingTime"  Lang="all"/>
        <Command Name="GetScheduledReservations"  Lang="all"/>
        <Command Name="GetServerDateAndTime"  Lang="all"/>
        <Command Name="RecheckConflicts"  Lang="all"/>
        <Command Name="RemovePermittedUsersFromReservation"  Lang="all"/>
        <Command Name="TerminateReservation"  Lang="all"/>
        <Command Name="UpdateReservationDescription"  Lang="all"/>
        <Command Name="UpdateRouteAliasesInReservation"  Lang="all"/>
      </Folder>
      <Folder Name="Resources">
        <Command Name="AddResourcesToReservation"  Lang="all"/>
        <Command Name="GetResourceMappings"  Lang="all"/>
        <Command Name="ReleaseResources"  Lang="all"/>
        <Command Name="RemoveResourcesFromReservation"  Lang="all"/>
        <Command Name="SetResourceSharedState"  Lang="all"/>
        <Command Name="GetResourceAvailability"  Lang="all"/>
        <Command Name="GetResourceAvailabilityInTimeRange"  Lang="all"/>
        <Command Name="GetReservationResourcesPositions"  Lang="all"/>
      </Folder>
      <Folder Name="Routing">
        <Command Name="AddRoutesToReservation"  Lang="all"/>
        <Command Name="SetConnectorsInReservation"  Lang="all"/>
        <Command Name="SetConnectorAttributes"  Lang="all"/>
        <Command Name="SetConnectorAttributesViaAlias"  Lang="all"/>
        <Command Name="UpdateConnectorAliasInReservation"  Lang="all"/>
        <Command Name="ConnectRoutesInReservation"  Lang="all"/>
        <Command Name="CreateRouteInReservation"  Lang="all"/>
        <Command Name="CreateRoutesInReservation"  Lang="all"/>
        <Command Name="DisconnectRoutesInReservation"  Lang="all"/>
        <Command Name="GetRouteSegments"  Lang="all"/>
        <Command Name="GetRoutesSolution"  Lang="all"/>
        <Command Name="RemoveRoutesFromReservation"  Lang="all"/>
        <Command Name="RemoveConnectorsFromReservation"  Lang="all"/>
        <Command Name="SetRouteAttributes"  Lang="all"/>
        <Command Name="SetRouteAttributesViaAlias"  Lang="all"/>
      </Folder>
      <Folder Name="Topologies">
        <Command Name="ActivateTopology"  Lang="all"/>
        <Command Name="AddTopologyToReservation"  Lang="all"/>
        <Command Name="GetActiveTopologyNames"  Lang="all"/>
        <Command Name="ReleaseTopologyResources"  Lang="all"/>
        <Command Name="ReloadTopology"  Lang="all"/>
        <Command Name="SaveReservationAsTopology"  Lang="all"/>
        <Command Name="GetReservationInputs"  Lang="all"/>
        <Command Name="UpdateReservationGlobalInputs"  Lang="all"/>
      </Folder>
      <Folder Name="Services">
        <Command Name="AddServiceToReservation"  Lang="all"/>
        <Command Name="RemoveServicesFromReservation"  Lang="all"/>
        <Command Name="SetServiceAttributesValues"  Lang="all"/>
        <Command Name="SetServiceLiveStatus"  Lang="all"/>
      </Folder>
      <Folder Name="Layout">
        <Command Name="SetReservationServicePosition"  Lang="all"/>
        <Command Name="GetReservationResourcesPositions "  Lang="all"/>
        <Command Name="SetReservationResourcePosition"  Lang="all"/>
        <Command Name="GetReservationServicesPositions"  Lang="all"/>
      </Folder>
      <Folder Name="Live Status">
        <Command Name="SetReservationLiveStatus"  Lang="all"/>
        <Command Name="GetReservationsLiveStatus"  Lang="all"/>
      </Folder>
      <Folder Name="Commands">
        <Command Name="WriteMessageToReservationOutput"  Lang="all"/>
        <Command Name="ResetResourceDriver"  Lang="all"/>
        <Command Name="GetResourceCommands"  Lang="all"/>
        <Command Name="GetServiceCommands"  Lang="all"/>
        <Command Name="GetEnvironmentCommands"  Lang="all"/>
        <Command Name="EnqueueCommand"  Lang="all"/>
        <Command Name="ExecuteCommand"  Lang="all"/>
        <Command Name="EnqueueEnvironmentCommand"  Lang="all"/>
        <Command Name="ExecuteEnvironmentCommand"  Lang="all"/>
        <Command Name="GetResourceConnectedCommands"  Lang="all"/>
        <Command Name="ExecuteResourceConnectedCommand"  Lang="all"/>
        <Command Name="ExecuteDeployAppCommand"  Lang="tcl;py;xmlrpc"/>
        <Command Name="ExecuteDeployAppCommandBulk"  Lang="tcl;py;xmlrpc"/>
        <Command Name="ExecuteInstallAppCommand"  Lang="tcl;py;xmlrpc"/>
      </Folder>
      <Folder Name="Commands (Deprecated)">
        <Command Name="EnqueueResourceCommand"  Lang="all"/>
        <Command Name="EnqueueServiceCommand"  Lang="all"/>
        <Command Name="ExecuteServiceCommand"  Lang="all"/>
        <Command Name="ExecuteResourceCommand"  Lang="all"/>
        <Command Name="EnqueueTopologyCommand"  Lang="all"/>
        <Command Name="ExecuteTopologyCommand"  Lang="all"/>
        <Command Name="GetTopologyCommands"  Lang="all"/>
      </Folder>
      <Folder Name="VLanPool">
        <Command Name="GetVlanAutoSelectFirstNumericFromRange" Lang="tcl;py"/>
        <Command Name="GetVlanSpecificNumericRange" Lang="tcl;py"/>
        <Command Name="GetVlanSpecificNumeric" Lang="tcl;py"/>
      </Folder>
    </Folder>
    <Folder Name="Inventory operations">
      <Folder Name="Attributes">
        <Command Name="GetAttributeValue"  Lang="all"/>
        <Command Name="SetAttributeValue"  Lang="all"/>
        <Command Name="SetAttributesValues"  Lang="all"/>
      </Folder>
      <Folder Name="Including &amp; excluding">
        <Command Name="ExcludeResource"  Lang="all"/>
        <Command Name="ExcludeResources"  Lang="all"/>
        <Command Name="IncludeResource"  Lang="all"/>
        <Command Name="IncludeResources"  Lang="all"/>
      </Folder>
      <Folder Name="Locking &amp; unlocking">
        <Command Name="GetLockedResources"  Lang="all"/>
        <Command Name="LockResource"  Lang="all"/>
        <Command Name="LockResources"  Lang="all"/>
        <Command Name="UnlockResource"  Lang="all"/>
        <Command Name="UnlockResources"  Lang="all"/>
      </Folder>
      <Folder Name="Power management">
        <Command Name="PowerCycleResource"  Lang="all"/>
        <Command Name="PowerOffResource"  Lang="all"/>
        <Command Name="PowerOnResource"  Lang="all"/>
      </Folder>
      <Folder Name="Console management">
        <Command Name="ClearAndResetConsole"  Lang="all"/>
        <Command Name="LogoutTNSession"  Lang="all"/>
        <Command Name="SetBaudRate"  Lang="all"/>
        <Command Name="SetConsoleForXModem"  Lang="all"/>
      </Folder>
    </Folder>
    <Folder Name="Reporting">
      <Folder Name="Lab management">
        <Command Name="GenerateUtilizationReport"  Lang="all"/>
      </Folder>
    </Folder>
  </TOC>
  <Command Name="Introduction" Title="" Lang="xmlrpc" Category="">
    <Description>
      Using the XML RPC API requires setting several http request headers.
    </Description>
    <Parameters>
      <Parameter Name="Content-Type" alias="" Type="header" Default="" Lang="xmlrpc" MandatoryValue="true" Direction="in">
        <Description>text/xml</Description>
      </Parameter>
      <Parameter Name="Content-Length" alias="" Type="header" Default="" Lang="xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The length in bytes of the request content</Description>
      </Parameter>
      <Parameter Name="DateTimeFormat" alias="" Type="header" Default="" Lang="xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The time format to use for sending and receiving date/time values (e.g. "MM/dd/yyyy HH:mm")</Description>
      </Parameter>
      <Parameter Name="ClientTimeZoneId" alias="" Type="header" Default="" Lang="xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The time zone Id (e.g 'Central America Standard Time'). You can obtain the full list of time zones supported by the server using the GetServerTimeZones API request</Description>
      </Parameter>
      <Parameter Name="Authorization" alias="" Type="header" Default="" Lang="xmlrpc" MandatoryValue="true" Direction="in">
        <Description>
          A string of the format: Token=xoV3libZzEG/ii7ZQqAuqw==;MachineName=y
          The Authorization header must be set after successfully login after using the “Logon” or "SecureLogon" API, by using the Token returned in the Logon response. Prior to making the response the value of this header should have the value ‘Unset’
        </Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl"/>
    <Syntax Lang="cSharp"/>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc"/>
    <ExampleCode Lang="xmlrpc">
      <Input/>
      <Output Name=""/>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ActivateTopology" Title="Activate a topology." Lang="all" Category="Reservation operations\Topologies">
    <Description>Activates a specified topology.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="activatedTopology" alias="Activated Topology" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The activated topology and its associated values.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>List of resources and resource values associated with the activated topology.</Description>
      </Parameter>
      <Parameter Name="attributes" alias="Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Attributes and attribute values for resources associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="routes" alias="Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="connectors" alias="Connectors" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Visual connectors and their values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="segments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Segment details for topology routes in the specified reservation. Each route is comprised of one or more segments.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ActivateTopology reservationId topologyFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ActivateTopology(reservationId,topologyFullPath,out activatedTopology,out resources,out attributes,out routes,out connectors, out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ActivateTopology&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;/ActivateTopology&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ActivateTopology $reservationId "Temp Automation Resources/TP1" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1" MachineName="PRODUCT-W7 - Tcl" Username="admin" Topology="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.43.240/1/1" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="10 Mbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.43.240/1/2" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 3" FolderFullPath="Temp Automation Resources" Address="3" FullAddress="192.168.43.240/1/3" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;Routes&gt;
        &lt;Route Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Lab Routers/Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2" Target="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Connectors&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] activatedTopology, resources, attributes, routes, segments;
        string resultXml;
        testShellAPI.ActivateTopology(reservationId,"Temp Automation Resources/TP1",out activatedTopology,out resources,out attributes,out routes,out connectors,out segments,out resultXml);
      </Input>
      <Output Name="activatedTopology">
        {{"Index","TopologyReservationName","TopologyName","Username","MachineName"},
        {"1","TP1","TP1","admin","PRODUCT-W7 - Studio"}}
      </Output>
      <Output Name="resources">
        {{"Index","ActiveTopologyIndex","TopologyReservationName","Name","Address","FullAddress","RootAddress","ResourceFamilyName","ResourceModelName","FolderFullPath","Locked","LockInfo_ReservationName","LockInfo_Username","LockInfo_MachineName","LockInfo_Created","Alias"},
        {"1","1","TP1","Router 1234","192.168.1.201","192.168.1.201","192.168.1.201","Generic Chassis","Generic Chassis Model","Lab Routers","False","","","","","Router 1234"},
        {"2","1","TP1","L1 Switch 1234/Blade 1/Port 1","1","192.168.43.240/1/1","192.168.43.240","L1 Switch Port","Port EMPMC-36RJ","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM",""},
        {"3","1","TP1","L1 Switch 1234/Blade 1/Port 2","2","192.168.43.240/1/2","192.168.43.240","L1 Switch Port","Port EMPMC-36RJ","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM",""},
        {"4","1","TP1","L1 Switch 1234/Blade 1/Port 3","3","192.168.43.240/1/3","192.168.43.240","L1 Switch Port","Port EMPMC-36RJ","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM",""},
        {"5","1","TP1","GenericResource 1234","192.168.1.20","192.168.1.20","192.168.1.20","Generic Resource","Generic Resource Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","GenericResource 1234"},
        {"6","1","TP1","GenericResource 1234/Port 1","1","192.168.1.20/1","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","Port 1"},
        {"7","1","TP1","GenericResource 1234/Port 2","2","192.168.1.20/2","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","Port 2"},
        {"8","1","TP1","GenericResource 1234/PowerPort 11","11","192.168.1.20/11","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","PowerPort 11"},
        {"9","1","TP1","GenericResource 1234/PowerPort 12","12","192.168.1.20/12","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","PowerPort 12"},
        {"10","1","TP1","GenericResource 1234/ConsolePort 21","21","192.168.1.20/21","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","ConsolePort 21"},
        {"11","1","TP1","Router 1234/Port 1","1","192.168.1.201/1","192.168.1.201","Generic Port","Generic Port Model","Lab Routers","True","Immediate reservation","admin","PRODUCT-W7 - Tcl","6/20/2012 6:03:50 PM","Port 1"}}
      </Output>
      <Output Name="attributes">
        {{"ResourceIndex","ResourceName","Name","Value","Type"},
        {"1","Router 1234","SW_Version","","String"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Shutdown","Disable","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Linked","False","String"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Shutdown Unmapped","Enable","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","LIN","Disable","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Auto Negotiation","True","Boolean"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Speed","10 Mbps","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Duplex","Full","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Link Match","Enable","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","MDI","AutoSense","Lookup"},
        {"2","L1 Switch 1234/Blade 1/Port 1","Auto Negotiation Advertise","Other/Uknown","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Shutdown","Enable","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Linked","False","String"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Shutdown Unmapped","Enable","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","LIN","Disable","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Auto Negotiation","True","Boolean"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Speed","1 Gbps","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Duplex","Full","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Link Match","Enable","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","MDI","AutoSense","Lookup"},
        {"3","L1 Switch 1234/Blade 1/Port 2","Auto Negotiation Advertise","Other/Uknown","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Shutdown","Enable","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Linked","False","String"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Shutdown Unmapped","Enable","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","LIN","Disable","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Auto Negotiation","True","Boolean"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Speed","1 Gbps","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Duplex","Full","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Link Match","Enable","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","MDI","AutoSense","Lookup"},
        {"4","L1 Switch 1234/Blade 1/Port 3","Auto Negotiation Advertise","Other/Uknown","Lookup"}}
      </Output>
      <Output Name="routes">
        {{"Index","Source","Target","RouteType","Alias","Shared"},
        {"1","Temp Automation Resources/GenericResource 1234/Port 1","Lab Routers/Router 1234/Port 1","bi","","True"},
        {"2","Lab Routers/Router 1234/Port 1","Temp Automation Resources/GenericResource 1234/Port 2","uni","","True"}}
      </Output>
      <Output Name="connectors">
        {{"Alias","Type","Resource mapping type","Source","Target"}}
      </Output>
      <Output Name="segments">
        {{"RouteIndex","Source","Target"},
        {"1","Temp Automation Resources/GenericResource 1234/Port 1","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"},
        {"1","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"},
        {"1","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3","Lab Routers/Router 1234/Port 1"},
        {"2","Lab Routers/Router 1234/Port 1","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"},
        {"2","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"},
        {"2","Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2","Temp Automation Resources/GenericResource 1234/Port 2"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1" MachineName="PRODUCT-W7 - Tcl" Username="admin" Topology="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.43.240/1/1" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="10 Mbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.43.240/1/2" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 3" FolderFullPath="Temp Automation Resources" Address="3" FullAddress="192.168.43.240/1/3" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;Routes&gt;
        &lt;Route Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Lab Routers/Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2" Target="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Connectors&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="activatedTopology" src="" />
      <Output Name="resources" src="" />
      <Output Name="attributes" src="" />
      <Output Name="routes" src="" />
      <Output Name="segments" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ActivateTopology&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;topologyFullPath&gt;Temp Automation Resources/TP1&lt;/topologyFullPath&gt;
        &lt;/ActivateTopology&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1" MachineName="PRODUCT-W7 - Tcl" Username="admin" Topology="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.43.240/1/1" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="10 Mbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.43.240/1/2" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="L1 Switch 1234/Blade 1/Port 3" FolderFullPath="Temp Automation Resources" Address="3" FullAddress="192.168.43.240/1/3" RootAddress="192.168.43.240" ResourceFamilyName="L1 Switch Port" ResourceModelName="Port EMPMC-36RJ" Alias="" Locked="true"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Shutdown" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Linked" Value="False" Type="String"/&gt;
        &lt;ResourceAttribute Name="Shutdown Unmapped" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="LIN" Value="Disable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation" Value="True" Type="Boolean"/&gt;
        &lt;ResourceAttribute Name="Speed" Value="1 Gbps" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Duplex" Value="Full" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Link Match" Value="Enable" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="MDI" Value="AutoSense" Type="Lookup"/&gt;
        &lt;ResourceAttribute Name="Auto Negotiation Advertise" Value="Other/Uknown" Type="Lookup"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T18:03:50"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;Routes&gt;
        &lt;Route Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Lab Routers/Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Temp Automation Resources/GenericResource 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Lab Routers/Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Lab Routers/Router 1234/Port 1" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3" Target="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2" Target="Temp Automation Resources/GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Connectors&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddGroupsToDomain" Title="Add groups to a domain." Lang="all" Category="User management\Domains">
    <Description>Add groups to a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="groupNames" alias="Groups Names" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of one or more groups.</Description>
      </Parameter>
      <Parameter Name="readOnly" alias="View Only" Type="YesNoOptions" Default="false" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify if the array of group should be added with view only permissions.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddGroupsToDomain domainName groupNames readOnly ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddGroupsToDomain(domainName,groupNames,viewOnly);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddGroupsToDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;groupNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/groupNames&gt;
      &lt;readOnly&gt;{readOnly}&lt;/readOnly&gt;
      &lt;/AddGroupsToDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddGroupsToDomain Global {QA_Users RND_Users} 0 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddGroupsToDomain("Global", new string[,] { "QA_Users", "RND_Users" }, YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddGroupsToDomain&gt;
        &lt;domainName&gt;Global&lt;/domainName&gt;
        &lt;groupNames&gt;
        &lt;string&gt;QA_Users&lt;/string&gt;
        &lt;string&gt;RND_Users&lt;/string&gt;
        &lt;/groupNames&gt;
        &lt;readOnly&gt;true&lt;/readOnly&gt;
        &lt;/AddGroupsToDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddNewDomain" Title="Adds a new domain." Lang="all" Category="User management\Domains">
    <Description>Adds a new domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="description" alias="Description" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the description of the domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddNewDomain domainName description ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddNewDomain(domainName,description);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;AddNewDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;description&gt;{description}&lt;/description&gt;
      &lt;/AddNewDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddNewDomain Domain1 "My Domain" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddNewDomain("Domain1","My Domain");
      </Input>
      <Output />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddNewDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;description&gt;My Domain&lt;/description&gt;
        &lt;/AddNewDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddNewGroup" Title="Add a new group." Lang="all" Category="User management\Groups">
    <Description>Adds a new users group</Description>
    <Parameters>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="description" alias="Description" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Provide a short description of the group.</Description>
      </Parameter>
      <Parameter Name="groupRole" alias="Group Role" Type="AddRoleOptions" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the role of the group, possible values: External, Regular, DomainAdmin.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddNewGroup groupName description groupRole ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddNewGroup(groupName,description,groupRole);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddNewGroup&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;description&gt;{description}&lt;/description&gt;
      &lt;groupRole&gt;{groupRole}&lt;/groupRole&gt;
      &lt;/AddNewGroup&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddNewGroup QA_Users "QA users" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddNewGroup("QA_Users","QA users", GroupRole.Regular);
      </Input>
      <Output />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddNewGroup&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;description&gt;QA users&lt;/description&gt;
        &lt;groupRole&gt;Regular&lt;/groupRole&gt;
        &lt;/AddNewGroup&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddNewUser" Title="Add a new TestShell user." Lang="all" Category="User management\Users">
    <Description>Configures user login details and permissions. Use AddUsersToGroup to specify the user’s domain access.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the user.</Description>
      </Parameter>
      <Parameter Name="password" alias="Password" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user’s login password.</Description>
      </Parameter>
      <Parameter Name="email" alias="Email" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the user’s email address.</Description>
      </Parameter>
      <Parameter Name="isActive" alias="Is Active" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Grant or deny active access to the application.</Description>
      </Parameter>
      <Parameter Name="isAdmin" alias="Is Admin" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Add the user to the System Administrators group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddNewUser username password email isActive isAdmin ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddNewUser(username,password,email,isActive,isAdmin);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddNewUser&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;password&gt;{password}&lt;/password&gt;
      &lt;email&gt;{email}&lt;/email&gt;
      &lt;isActive&gt;{isActive}&lt;/isActive&gt;
      &lt;isAdmin&gt;{isAdmin}&lt;/isAdmin&gt;
      &lt;/AddNewUser&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddNewUser User1234 pass1234 user1234@work.com 1 0 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo xsi:type="UserInfo" Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddNewUser("User1234","pass1234","user1234@work.com",YesNoOptions.Yes,YesNoOptions.No);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddNewUser&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;password&gt;pass1234&lt;/password&gt;
        &lt;email&gt;user1234@work.com&lt;/email&gt;
        &lt;isActive&gt;1&lt;/isActive&gt;
        &lt;isAdmin&gt;0&lt;/isAdmin&gt;
        &lt;/AddNewUser&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo xsi:type="UserInfo" Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddPermittedUsersToReservation" Title="Add permitted users to a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Add one or more permitted users to the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="usernames" alias="User Names" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>List of users to permit access to the reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddPermittedUsersToReservation reservationId usernames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddPermittedUsersToReservation(reservationId,usernames);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddPermittedUsersToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;usernames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/usernames&gt;
      &lt;/AddPermittedUsersToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddPermittedUsersToReservation "2d2f7cde-20g3-4bac-80d2-e8cfhecef45b" {"name1"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddPermittedUsersToReservation("2d2f7cde-20g3-4bac-80d2-e8cfhecef45b",new string[]{"name1","name2"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddPermittedUsersToReservation&gt;
        &lt;reservationId&gt;2d2f7cde-20g3-4bac-80d2-e8cfhecef45b&lt;/reservationId&gt;
        &lt;usernames&gt;
        &lt;string&gt;{name1}&lt;/string&gt;
        &lt;/usernames&gt;
        &lt;/AddPermittedUsersToReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddResourcesToDomain" Title="Add resources to a domain." Lang="all" Category="User management\Domains">
    <Description>Add resources to a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="resourcesNames" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="includeDecendants" alias="Include Child Resources" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether to include child resources.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddResourcesToDomain domainName resourcesNames includeDecendants ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddResourcesToDomain(domainName,resourcesNames,includeDecendants);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;AddResourcesToDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;resourcesNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesNames&gt;
      &lt;includeDecendants&gt;{includeDecendants}&lt;/includeDecendants&gt;
      &lt;/AddResourcesToDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddResourcesToDomain Domain1 {"Router 1234" "GenericResource 1234"} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddResourcesToDomain("Domain1", new string[]{"Router 1234","GenericResource 1234"}, YesNoOptions.Yes);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddResourcesToDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;resourcesNames&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;string&gt;GenericResource 1234&lt;/string&gt;
        &lt;/resourcesNames&gt;
        &lt;includeDecendants&gt;1&lt;/includeDecendants&gt;
        &lt;/AddResourcesToDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddResourcesToReservation" Title="Reserve resources for locking." Lang="all" Category="Reservation operations\Resources">
    <Description>Reserves resources to be locked.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="shared" alias="Shared" Type="Shareability" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether all resources will be shared among other enviroments</Description>
      </Parameter>
      <Parameter Name="conflicts" alias="Resource Conflicts" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource conflicts and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddResourcesToReservation reservationId resourcesFullPath shared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddResourcesToReservation(reservationId,resourcesFullPath,shared,out conflicts,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddResourcesToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;shared&gt;{shared}&lt;/shared&gt;
      &lt;/AddResourcesToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddResourcesToReservation $reservationId {"Router 1234" "GenericResource 1234"} 1 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] conflicts;
        string resultXml;
        testShellAPI.AddResourcesToReservation(reservationId, new string[]{"Router 1234","GenericResource 1234"}, Shareability.Shared, out conflicts, out resultXml);
      </Input>
      <Output Name="conflicts" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="conflicts" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddResourcesToReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;string&gt;GenericResource 1234&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;shared&gt;1&lt;/shared&gt;
        &lt;/AddResourcesToReservation&gt;
      </Input>z
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddRoutesToReservation" Title="Reserve specified routes." Lang="all" Category="Reservation operations\Routing">
    <Description>Adds (but does not connect) routes between all pairs of source and target endpoints, adding additional connectivity ports when required. Use ConnectRoutesInReservation to connect the routes.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="targetResourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional mapping or 'uni' for unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="maxHops" alias="Maximum Hops" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number or allowed hops.</Description>
      </Parameter>
      <Parameter Name="routeAlias" alias="Route Alias" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the route’s alias.</Description>
      </Parameter>
      <Parameter Name="isShared" alias="Is Shared" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether these routes are shared. Shared routes can be used in more than one reservation.</Description>
      </Parameter>
      <Parameter Name="routes" alias="Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddRoutesToReservation reservationId sourceResourcesFullPath targetResourcesFullPath mappingType maxHops routeAlias isShared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddRoutesToReservation(reservationId,sourceResourcesFullPath,targetResourcesFullPath,mappingType,maxHops,routeAlias,isShared,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddRoutesToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/sourceResourcesFullPath&gt;
      &lt;targetResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/targetResourcesFullPath&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;maxHops&gt;{maxHops}&lt;/maxHops&gt;
      &lt;routeAlias&gt;{routeAlias}&lt;/routeAlias&gt;
      &lt;isShared&gt;{isShared}&lt;/isShared&gt;
      &lt;/AddRoutesToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddRoutesToReservation $reservationId {"Router 1234/Port 1"} {"GenericResource 1234/Port 1"} bi 2 "a route" 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes;
        testShellAPI.AddRoutesToReservation(reservationId,new string[]{"Router 1234/Port 1"},new string[]{"GenericResource 1234/Port 1"},MappingType.Bidirectional,2,"a route",YesNoOptions.No,out routes,out resultXml);
      </Input>
      <Output Name="routes">{{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddRoutesToReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;sourceResourcesFullPath&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;/sourceResourcesFullPath&gt;
        &lt;targetResourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;/targetResourcesFullPath&gt;
        &lt;mappingType&gt;bi&lt;/mappingType&gt;
        &lt;maxHops&gt;2&lt;/maxHops&gt;
        &lt;routeAlias&gt;a route&lt;/routeAlias&gt;
        &lt;isShared&gt;0&lt;/isShared&gt;
        &lt;/AddRoutesToReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddTopologiesToDomain" Title="Adds a list of one or more topologies to a domain." Lang="all" Category="User management\Domains">
    <Description>Adds a list of one or more topologies to a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="topologyNames" alias="Topologies Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of topology names. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddTopologiesToDomain domainName topologyNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddTopologiesToDomain(domainName,topologyNames);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;AddTopologiesToDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;topologyNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/topologyNames&gt;
      &lt;/AddTopologiesToDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddTopologiesToDomain Domain1 {Topology1 Topology2} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddTopologiesToDomain("Domain1",new string[]{"Topology1"});
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddTopologiesToDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;topologyNames&gt;
        &lt;string&gt;Topology1&lt;/string&gt;
        &lt;/topologyNames&gt;
        &lt;/AddTopologiesToDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddTopologyToReservation" Title="Reserve a topology." Lang="all" Category="Reservation operations\Topologies">
    <Description>Reserves the specified topology.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Requirements inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value', 'AttributeType';]}, AttributeType can be one of the following: Attributes/Models/Quantity. </Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Additional info inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value';]}. </Description>
      </Parameter>
      <Parameter Name="conflicts" alias="Resource Conflicts" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource conflicts and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddTopologyToReservation reservationId topologyFullPath globalInputs requirementsInputs additionalInfoInputs ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddTopologyToReservation(reservationId, topologyFullPath, globalInputs, requirementsInputs, additionalInfoInputs, out conflicts, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddTopologyToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;requirementsInputs&gt;
      &lt;UpdateTopologyRequirementsInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;Type&gt;{Type}&lt;/Type&gt;
      &lt;/UpdateTopologyRequirementsInputsRequest&gt;
      &lt;/requirementsInputs&gt;
      &lt;additionalInfoInputs&gt;
      &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;/additionalInfoInputs&gt;
      &lt;/AddTopologyToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddTopologyToReservation "af626b88-458b-4e7a-9054-c03d8cffa260" "Temp Automation Resources/TP1" {{"GlobalInputName_0" "GlobalInputValue_0"} {"GlobalInputName_1" "GlobalInputValue_1"}} {{"ResourceName_0" "RequiredInputName_0" "RequiredInputValue_0" "RequiredInputType_0"}} {{"ResourceName_0" "AdditionalInfoName_0" "AdditionalInfoValue_0"}} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] globalInputs = {{"input1", "value1"}, {"input2", "value2"}};
        string[,] requirementsInputs = {{"resource", "attribute", "value", "Attributes"}};
        string[,] additionalInfoInputs = {{"resource", "attribute", "value"}};
        string[,] conflicts;
        testShellAPI.AddTopologyToReservation(reservationId,"Temp Automation Resources/TP1", globalInputs, requirementsInputs, additionalInfoInputs, out conflicts,out resultXml);
      </Input>
      <Output Name="conflicts" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="conflicts" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddTopologyToReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;topologyFullPath&gt;Temp Automation Resources/TP1&lt;/topologyFullPath&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;Some global&lt;/ParamName&gt;
        &lt;Value&gt;some value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;requirementsInputs&gt;
        &lt;UpdateTopologyRequirementsInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Model&lt;/ParamName&gt;
        &lt;Value&gt;Some resource model&lt;/Value&gt;
        &lt;Type&gt;Models&lt;/Type&gt;
        &lt;/UpdateTopologyRequirementsInputsRequest&gt;
        &lt;/requirementsInputs&gt;
        &lt;additionalInfoInputs&gt;
        &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Speed&lt;/ParamName&gt;
        &lt;Value&gt;10 Mbps&lt;/Value&gt;
        &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;/additionalInfoInputs&gt;
        &lt;/AddTopologyToReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddUsersToGroup" Title="Add users to a group." Lang="all" Category="User management\Groups">
    <Description>Adds a list of one or more users to the specified group.</Description>
    <Parameters>
      <Parameter Name="usernames" alias="Usernames" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of one or more users.</Description>
      </Parameter>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddUsersToGroup usernames groupName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddUsersToGroup(usernames,groupName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddUsersToGroup&gt;
      &lt;usernames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/usernames&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;/AddUsersToGroup&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddUsersToGroup {User1234 User2345} QA_Users resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.AddUsersToGroup(new string[,] { "User1234", "User2345" }, "QA_Users");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddUsersToGroup&gt;
        &lt;usernames&gt;
        &lt;string&gt;User1234&lt;/string&gt;
        &lt;string&gt;User2345&lt;/string&gt;
        &lt;/usernames&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;/AddUsersToGroup&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AutoLoad" Title="Overwrite switch settings with  current data." Lang="all" Category="Inventory management\Resources">
    <Description>Overrides the data of a specified L1 switch with current device settings and mappings.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AutoLoad resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AutoLoad(resourceFullPath,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AutoLoad&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/AutoLoad&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AutoLoad "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.AutoLoad("L1 Switch 1234",out resultXml);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AutoLoad&gt;
        &lt;resourceFullPath&gt;L1 Switch 1234&lt;/resourceFullPath&gt;
        &lt;/AutoLoad&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>

  <Command Name="AddAttributeRestrictedValues" Title="add attribute restrictions" Lang="tcl;py;xmlrpc" Category="Configuration">
    <Description>add attribute restrictions to family/model</Description>
    <Parameters>
      <Parameter Name="addAttributeRestrictionRequests" alias="attribute restrictions to add" Type="string[,]" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>Attribute restrictions to add. For example: {['FamilyName', 'ModelName', 'Alphabetic';]}.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddAttributeRestrictedValues addAttributeRestrictionRequests ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;AddAttributeRestrictedValues&gt;
      &lt;addAttributeRestrictionRequests&gt;
      &lt;AddRestrictionRequest&gt;
      &lt;FamilyName&gt;{FamilyName}&lt;/FamilyName&gt;
      &lt;ModelName&gt;{ModelName}&lt;/ModelName&gt;
      &lt;Alphabetic&gt;{Alphabetic}&lt;/Alphabetic&gt;
      &lt;Attributes&gt;
      &lt;Attribute&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;RestrictedValue&gt;{RestrictedValue}&lt;/RestrictedValue&gt;
      &lt;/Attribute&gt;
      &lt;/Attributes&gt;
      &lt;/AddRestrictionRequest&gt;
      &lt;/addAttributeRestrictionRequests&gt;
      &lt;/AddAttributeRestrictedValues&gt;
    </Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddAttributeRestrictedValues&gt;
        &lt;addAttributeRestrictionRequests&gt;
        &lt;AddRestrictionRequest&gt;
        &lt;FamilyName&gt;Bridge&lt;/FamilyName&gt;
        &lt;ModelName&gt;Bridge Model&lt;/ModelName&gt;
        &lt;Alphabetic&gt;true&lt;/Alphabetic&gt;
        &lt;Attributes&gt;
        &lt;Attribute&gt;
        &lt;Name&gt;Cluster&lt;/Name&gt;
        &lt;RestrictedValue&gt;Org-2&lt;/RestrictedValue&gt;
        &lt;RestrictedValue&gt;Org-2&lt;/RestrictedValue&gt;
        &lt;/Attribute&gt;
        &lt;/Attributes&gt;
        &lt;/AddRestrictionRequest&gt;
        &lt;/addAttributeRestrictionRequests&gt;
        &lt;/AddAttributeRestrictedValues&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddAttributeRestrictedValues "a" resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Password="addAttributeRestrictionRequests"&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ArchiveDomain" Title="Archive the domain " Lang="all" Category="User management\Domains">
    <Description>Archive a domain. All future reservation will be deleted.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ArchiveDomain domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ArchiveDomain(domainName,out resultXml);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;ArchiveDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/ArchiveDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ArchiveDomain "Domain1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.ArchiveDomain("Domain1", out resultXml);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ArchiveDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;/ArchiveDomain&gt;
      </Input>
      <Output Name="resultXml" src="" />
    </ExampleCode>
  </Command>
  <Command Name="AddAppToReservation" Title="Add app resource to existing reservation." Lang="all" Category="Reservation operations\Apps">
    <Description>Add app resource to existing reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="appName" alias="App Template Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the app template name.</Description>
      </Parameter>
      <Parameter Name="positionX" alias="Position X" Type="double" Default="100" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the x coordinate of the app's top left corner.</Description>
      </Parameter>
      <Parameter Name="positionY" alias="Position Y" Type="double" Default="100" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the y coordinate of the app's top left corner.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddAppToReservation reservationId appName positionX positionY ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddAppToReservation(reservationId,appName,positionX,positionY);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddAppToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;appName&gt;{appName}&lt;/appName&gt;
      &lt;positionX&gt;{positionX}&lt;/positionX&gt;
      &lt;positionY&gt;{positionY}&lt;/positionY&gt;
      &lt;/AddAppToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddAppToReservation 077e6b4f-5e70-46b5-aa4b-43e6f039acc3 "Demo App Template" 100 100 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="AddAppToReservationResponseInfo" ReservedAppName="Added app"&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId;
        string appName;
        testShellAPI.AddAppToReservation(reservationId, appName, 100, 100);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddAppToReservation&gt;
        &lt;reservationId&gt;077e6b4f-5e70-46b5-aa4b-43e6f039acc3&lt;/reservationId&gt;
        &lt;appName&gt;Demo App Template Name&lt;/appName&gt;
        &lt;positionX&gt;100&lt;/positionX&gt;
        &lt;positionY&gt;100&lt;/positionY&gt;
        &lt;/AddAppToReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="AddAppToReservationResponseInfo" ReservedAppName="Added app"&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="AddServiceToReservation" Title="Add service resource to existing reservation." Lang="all" Category="Reservation operations\Services">
    <Description>Add service resource to existing reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceName" alias="Service Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the service name.</Description>
      </Parameter>
      <Parameter Name="alias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the service alias.</Description>
      </Parameter>
      <Parameter Name="attributes" alias="Service Attributes" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::AddServiceToReservation reservationId serviceName alias attributes ?resultXml?</Syntax>
    <Syntax Lang="cSharp">AddServiceToReservation(reservationId,serviceName,alias,attributes);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;AddServiceToReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
      &lt;alias&gt;{alias}&lt;/alias&gt;
      &lt;attributes&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributes&gt;
      &lt;/AddServiceToReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::AddServiceToReservation 077e6b4f-5e70-46b5-aa4b-43e6f039acc3 "serviceName" "alias" {{"attribute01" "value01"} {"attribute02" "value02"}}  resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId;
        string serviceName;
        string alias;
        string[,] attributeValues;
        testShellAPI.AddServiceToReservation(reservationId, serviceName, alias, attributes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;AddServiceToReservation&gt;
        &lt;reservationId&gt;077e6b4f-5e70-46b5-aa4b-43e6f039acc3&lt;/reservationId&gt;
        &lt;serviceName&gt;Service Name&lt;/serviceName&gt;
        &lt;alias&gt;Alias &lt;/alias&gt;
        &lt;attributes&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;Version&lt;/Name&gt;
        &lt;Value&gt;5.5&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributes&gt;
        &lt;/AddServiceToReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CopyDomainsResources" Title="Copy resources to a domain." Lang="all" Category="User management\Domains">
    <Description>Copy resources from a list of source domains to a target domain.</Description>
    <Parameters>
      <Parameter Name="domainNameSources" alias="Source Domains" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the names of the source domains.</Description>
      </Parameter>
      <Parameter Name="domainNameDestination" alias="Target Domain" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the target domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CopyDomainsResources domainNameSources domainNameDestination ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CopyDomainsResources(sourceDomains,targetDomain);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;CopyDomainsResources&gt;
      &lt;domainNameSources&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/domainNameSources&gt;
      &lt;domainNameDestination&gt;{domainNameDestination}&lt;/domainNameDestination&gt;
      &lt;/CopyDomainsResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CopyDomainsResources {"Domain1" "Domain2"} Domain3 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.CopyDomainsResources(new string[]{"Domain1","Domain2"}, "Domain3");
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CopyDomainsResources&gt;
        &lt;domainNameSources&gt;
        &lt;string&gt;Domain1&lt;/string&gt;
        &lt;string&gt;Domain2&lt;/string&gt;
        &lt;/domainNameSources&gt;
        &lt;domainNameDestination&gt;Domain3&lt;/domainNameDestination&gt;
        &lt;/CopyDomainsResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ClearAndResetConsole" Title="Clear and reset consoles." Lang="all" Category="Inventory operations\Console Management">
    <Description>Clears and resets specified resource console ports.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="consolePortsFullPath" alias="Console Ports" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of console ports according to their location in the Resource Explorer. Include the full path from the root to each console port, separated by slashes. For example: Console/Ports/PortName.</Description>
      </Parameter>
      <Parameter Name="baudRate" alias="Baud Rate" Type="BaudRate" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the baud rate to apply to the ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ClearAndResetConsole reservationId resourceFullPath consolePortsFullPath baudRate ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ClearAndResetConsole(reservationId,resourceFullPath,consolePortsFullPath,baudRate,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ClearAndResetConsole&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;consolePortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/consolePortsFullPath&gt;
      &lt;baudRate&gt;{baudRate}&lt;/baudRate&gt;
      &lt;/ClearAndResetConsole&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ClearAndResetConsole $reservationId "GenericResource 1234" {"GenericResource 1234/ConsolePort 21" "GenericResource 1234/ConsolePort 22"} 9600 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.ClearAndResetConsole(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/ConsolePort 21"},BaudRate.Baud9600,out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ClearAndResetConsole&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;consolePortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/ConsolePort 21&lt;/string&gt;
        &lt;/consolePortsFullPath&gt;
        &lt;baudRate&gt;9600&lt;/baudRate&gt;
        &lt;/ClearAndResetConsole&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ConnectRoutesInReservation" Title="Connects a list of routes." Lang="all" Category="Reservation operations\Routing">
    <Description>Connects requested routes. It locks the resources and adds route mappings. The routes must already exist in the reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="endpoints" alias="Endpoints" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The routes’ endpoints to connect.</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional mapping or 'uni' for unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="routes" alias="Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The routes that were connected.</Description>
      </Parameter>
      <Parameter Name="segments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The segments details of the connected routes.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ConnectRoutesInReservation reservationId endpoints mappingType ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ConnectRoutesInReservation(reservationId,endpoints,mappingType,out routes,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ConnectRoutesInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;endpoints&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/endpoints&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;/ConnectRoutesInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ConnectRoutesInReservation $reservationId {"Router 1234/Port 1" "GenericResource 1234/Port 1"} bi resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes,segments;
        testShellAPI.ConnectRoutesInReservation(reservationId,new string[,]{{"Router 1234/Port 1","GenericResource 1234/Port 1"}},MappingType.Bidirectional,out segments,out resultXml);
      </Input>
      <Output Name="routes">
        {{"Index","Source","Target","RouteType","Alias","Shared"},
        {"1","Router 1234/Port 1","GenericResource 1234/Port 1","bi","a route","True"}}
      </Output>
      <Output Name="segments">
        {{"RouteIndex","Source","Target"},
        {"1","Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3"},
        {"1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1"},
        {"1","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="segments" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ConnectRoutesInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;endpoints&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;/endpoints&gt;
        &lt;mappingType&gt;bi&lt;/mappingType&gt;
        &lt;/ConnectRoutesInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateFolder" Title="Add a new folder." Lang="all" Category="Inventory management\Folders">
    <Description>Adds a new folder to the specified path.</Description>
    <Parameters>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateFolder folderFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateFolder(folderFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateFolder&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;/CreateFolder&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateFolder "Lab Routers" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.CreateFolder("Lab Routers");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateFolder&gt;
        &lt;folderFullPath&gt;Lab Routers&lt;/folderFullPath&gt;
        &lt;/CreateFolder&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateImmediateReservation" Title="Create an imminent reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Defines a reservation to be started immediately.</Description>
    <Parameters>
      <Parameter Name="reservationName" alias="Reservation Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the reservation.</Description>
      </Parameter>
      <Parameter Name="owner" alias="Reservation Owner" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user name of the reservation owner.</Description>
      </Parameter>
      <Parameter Name="durationInMinutes" alias="Duration" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the length of the reservation. (in minutes)</Description>
      </Parameter>
      <Parameter Name="notifyOnStart" alias="Notify On Start" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation starts.</Description>
      </Parameter>
      <Parameter Name="notifyOnEnd" alias="Notify On End" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation ends.</Description>
      </Parameter>
      <Parameter Name="notificationMinutesBeforeEnd" alias="Notification Minutes Before End" Type="int" Default="0" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate the number of minutes before the end of the reservation to send out a Notify On End alert to the reservation owner. (0 = disabled)</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Requirements inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value', 'AttributeType';]}, AttributeType can be one of the following: Attributes/Models/Quantity. </Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Additional info inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value';]}. </Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateImmediateReservation reservationName owner durationInMinutes notifyOnStart notifyOnEnd notificationMinutesBeforeEnd ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateImmediateReservation(reservationName,owner,durationInMinutes,notifyOnStart,notifyOnEnd,notificationMinutesBeforeEnd,topology,globalInputs,requirementsInputs,additionalInfoInputs,out reservationId,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateImmediateReservation&gt;
      &lt;reservationName&gt;{reservationName}&lt;/reservationName&gt;
      &lt;owner&gt;{owner}&lt;/owner&gt;
      &lt;durationInMinutes&gt;{durationInMinutes}&lt;/durationInMinutes&gt;
      &lt;notifyOnStart&gt;{notifyOnStart}&lt;/notifyOnStart&gt;
      &lt;notifyOnEnd&gt;{notifyOnEnd}&lt;/notifyOnEnd&gt;
      &lt;notificationMinutesBeforeEnd&gt;{notificationMinutesBeforeEnd}&lt;/notificationMinutesBeforeEnd&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;requirementsInputs&gt;
      &lt;UpdateTopologyRequirementsInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;Type&gt;{Type}&lt;/Type&gt;
      &lt;/UpdateTopologyRequirementsInputsRequest&gt;
      &lt;/requirementsInputs&gt;
      &lt;additionalInfoInputs&gt;
      &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;/additionalInfoInputs&gt;
      &lt;/CreateImmediateReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateImmediateReservation "immediate reservation" "admin" 30 0 0 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="28cb2a71-c8fc-4f41-a22b-e65685ebed14" Name="Immediate reservation" StartTime="2012-06-20T15:05:00" EndTime="2012-06-20T15:35:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Active" ActualEndTime="" CreateDate="2012-06-20T15:05:06" ModificationDate="2012-06-20T15:05:06"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] globalInputs = {{"input1", "value1"}, {"input2", "value2"}};
        string[,] requirementsInputs = {{"resource", "attribute", "value", "Attributes"}};
        string[,] additionalInfoInputs = {{"resource", "attribute", "value"}};
        string resultXml;
        string reservationId;
        testShellAPI.CreateImmediateReservation("Immediate reservation", "admin", 30, YesNoOptions.No, YesNoOptions.No, 0, "myTopology", globalInputs, requirementsInputs, additionalInfoInputs, out reservationId, out resultXml);
      </Input>
      <Output Name="reservationId">28cb2a71-c8fc-4f41-a22b-e65685ebed14</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="28cb2a71-c8fc-4f41-a22b-e65685ebed14" Name="Immediate reservation" StartTime="2012-06-20T15:05:00" EndTime="2012-06-20T15:35:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Active" ActualEndTime="" CreateDate="2012-06-20T15:05:06" ModificationDate="2012-06-20T15:05:06"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservationId" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateImmediateReservation&gt;
        &lt;reservationName&gt;immediate reservation&lt;/reservationName&gt;
        &lt;owner&gt;admin&lt;/owner&gt;
        &lt;durationInMinutes&gt;30&lt;/durationInMinutes&gt;
        &lt;notifyOnStart&gt;0&lt;/notifyOnStart&gt;
        &lt;notifyOnEnd&gt;0&lt;/notifyOnEnd&gt;
        &lt;notificationMinutesBeforeEnd&gt;0&lt;/notificationMinutesBeforeEnd&gt;
        &lt;topologyFullPath&gt;myTopology&lt;/topologyFullPath&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;Some global&lt;/ParamName&gt;
        &lt;Value&gt;some value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;requirementsInputs&gt;
        &lt;UpdateTopologyRequirementsInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Model&lt;/ParamName&gt;
        &lt;Value&gt;Some resource model&lt;/Value&gt;
        &lt;Type&gt;Models&lt;/Type&gt;
        &lt;/UpdateTopologyRequirementsInputsRequest&gt;
        &lt;/requirementsInputs&gt;
        &lt;additionalInfoInputs&gt;
        &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Speed&lt;/ParamName&gt;
        &lt;Value&gt;10 Mbps&lt;/Value&gt;
        &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;/additionalInfoInputs&gt;
        &lt;/CreateImmediateReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="28cb2a71-c8fc-4f41-a22b-e65685ebed14" Name="Immediate reservation" StartTime="2012-06-20T15:05:00" EndTime="2012-06-20T15:35:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Active" ActualEndTime="" CreateDate="2012-06-20T15:05:06" ModificationDate="2012-06-20T15:05:06"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateImmediateTopologyReservation" Title="Create an imminent reservation." Lang="tcl;py" Category="Reservation operations\Scheduling">
    <Description>Defines a reservation to be started immediately.</Description>
    <Parameters>
      <Parameter Name="reservationName" alias="Reservation Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the reservation.</Description>
      </Parameter>
      <Parameter Name="owner" alias="Reservation Owner" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user name of the reservation owner.</Description>
      </Parameter>
      <Parameter Name="durationInMinutes" alias="Duration" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the length of the reservation. (in minutes)</Description>
      </Parameter>
      <Parameter Name="notifyOnStart" alias="Notify On Start" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation starts.</Description>
      </Parameter>
      <Parameter Name="notifyOnEnd" alias="Notify On End" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation ends.</Description>
      </Parameter>
      <Parameter Name="notificationMinutesBeforeEnd" alias="Notification Minutes Before End" Type="int" Default="0" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate the number of minutes before the end of the reservation to send out a Notify On End alert to the reservation owner. (0 = disabled)</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Requirements inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value', 'AttributeType';]}, AttributeType can be one of the following: Attributes/Models/Quantity. </Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Additional info inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value';]}. </Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateImmediateTopologyReservation reservationName owner durationInMinutes notifyOnStart notifyOnEnd notificationMinutesBeforeEnd topologyFullPath globalInputs requirementsInputs additionalInfoInputs ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;CreateImmediateReservation&gt;
      &lt;reservationName&gt;{reservationName}&lt;/reservationName&gt;
      &lt;owner&gt;{owner}&lt;/owner&gt;
      &lt;durationInMinutes&gt;{durationInMinutes}&lt;/durationInMinutes&gt;
      &lt;notifyOnStart&gt;{notifyOnStart}&lt;/notifyOnStart&gt;
      &lt;notifyOnEnd&gt;{notifyOnEnd}&lt;/notifyOnEnd&gt;
      &lt;notificationMinutesBeforeEnd&gt;{notificationMinutesBeforeEnd}&lt;/notificationMinutesBeforeEnd&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;requirementsInputs&gt;
      &lt;UpdateTopologyRequirementsInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;Type&gt;{Type}&lt;/Type&gt;
      &lt;/UpdateTopologyRequirementsInputsRequest&gt;
      &lt;/requirementsInputs&gt;
      &lt;additionalInfoInputs&gt;
      &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;/additionalInfoInputs&gt;
      &lt;/CreateImmediateReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateImmediateTopologyReservation "immediate reservation" "admin" 30 0 0 0 "Temp Automation Resources/TP1" {{"GlobalInputName_0" "GlobalInputValue_0"} {"GlobalInputName_1" "GlobalInputValue_1"}} {{"ResourceName_0" "RequiredInputName_0" "RequiredInputValue_0" "RequiredInputType_0"}} {{"ResourceName_0" "AdditionalInfoName_0" "AdditionalInfoValue_0"}} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="28cb2a71-c8fc-4f41-a22b-e65685ebed14" Name="Immediate reservation" StartTime="2012-06-20T15:05:00" EndTime="2012-06-20T15:35:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Active" ActualEndTime="" CreateDate="2012-06-20T15:05:06" ModificationDate="2012-06-20T15:05:06"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateImmediateReservation&gt;
        &lt;reservationName&gt;immediate reservation&lt;/reservationName&gt;
        &lt;owner&gt;admin&lt;/owner&gt;
        &lt;durationInMinutes&gt;30&lt;/durationInMinutes&gt;
        &lt;notifyOnStart&gt;0&lt;/notifyOnStart&gt;
        &lt;notifyOnEnd&gt;0&lt;/notifyOnEnd&gt;
        &lt;notificationMinutesBeforeEnd&gt;0&lt;/notificationMinutesBeforeEnd&gt;
        &lt;topologyFullPath&gt;myTopology&lt;/topologyFullPath&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;Some global&lt;/ParamName&gt;
        &lt;Value&gt;some value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;requirementsInputs&gt;
        &lt;UpdateTopologyRequirementsInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Model&lt;/ParamName&gt;
        &lt;Value&gt;Some resource model&lt;/Value&gt;
        &lt;Type&gt;Models&lt;/Type&gt;
        &lt;/UpdateTopologyRequirementsInputsRequest&gt;
        &lt;/requirementsInputs&gt;
        &lt;additionalInfoInputs&gt;
        &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Speed&lt;/ParamName&gt;
        &lt;Value&gt;10 Mbps&lt;/Value&gt;
        &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;/additionalInfoInputs&gt;
        &lt;/CreateImmediateReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="28cb2a71-c8fc-4f41-a22b-e65685ebed14" Name="Immediate reservation" StartTime="2012-06-20T15:05:00" EndTime="2012-06-20T15:35:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Active" ActualEndTime="" CreateDate="2012-06-20T15:05:06" ModificationDate="2012-06-20T15:05:06"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="CreateReservation" Title="Create a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Defines a new reservation.</Description>
    <Parameters>
      <Parameter Name="reservationName" alias="Reservation Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the reservation.</Description>
      </Parameter>
      <Parameter Name="owner" alias="Reservation Owner" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user name of the reservation owner.</Description>
      </Parameter>
      <Parameter Name="startTime" alias="Start Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The start time of the reservation.</Description>
      </Parameter>
      <Parameter Name="endTime" alias="End Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The end time of the reservation.</Description>
      </Parameter>
      <Parameter Name="notifyOnStart" alias="Notify On Start" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation starts.</Description>
      </Parameter>
      <Parameter Name="notifyOnEnd" alias="Notify On End" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation ends.</Description>
      </Parameter>
      <Parameter Name="notificationMinutesBeforeEnd" alias="Notification Minutes Before End" Type="int" Default="0" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate the number of minutes before the end of the reservation to send out a Notify On End alert to the reservation owner. (0 = disabled)</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Requirements inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value', 'AttributeType';]}, AttributeType can be one of the following: Attributes/Models/Quantity. </Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="in">
        <Description>Additional info inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value';]}. </Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateReservation reservationName owner startTime endTime notifyOnStart notifyOnEnd notificationMinutesBeforeEnd ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateReservation(reservationName,owner,startTime,endTime,notifyOnStart,notifyOnEnd,notificationMinutesBeforeEnd, topology, globalInputs, requirementsInputs, additionalInfoInputs,out reservationId,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateReservation&gt;
      &lt;reservationName&gt;{reservationName}&lt;/reservationName&gt;
      &lt;owner&gt;{owner}&lt;/owner&gt;
      &lt;startTime&gt;{startTime}&lt;/startTime&gt;
      &lt;endTime&gt;{endTime}&lt;/endTime&gt;
      &lt;notifyOnStart&gt;{notifyOnStart}&lt;/notifyOnStart&gt;
      &lt;notifyOnEnd&gt;{notifyOnEnd}&lt;/notifyOnEnd&gt;
      &lt;notificationMinutesBeforeEnd&gt;{notificationMinutesBeforeEnd}&lt;/notificationMinutesBeforeEnd&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;requirementsInputs&gt;
      &lt;UpdateTopologyRequirementsInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;Type&gt;{Type}&lt;/Type&gt;
      &lt;/UpdateTopologyRequirementsInputsRequest&gt;
      &lt;/requirementsInputs&gt;
      &lt;additionalInfoInputs&gt;
      &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;/additionalInfoInputs&gt;
      &lt;/CreateReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateReservation "test reservation" "admin" "01/01/1970 00:00" "12/21/2012 00:00" 1 1 10 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T11:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:40:47"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] globalInputs = {{"attribute1", "value1"}, {"attribute2", "value2"}};
        string[,] requirementsInputs = {{"resource", "attribute", "value", "Attributes"}};
        string[,] additionalInfoInputs = {{"resource", "attribute", "value"}};
        string resultXml;
        string reservationId;
        testShellAPI.CreateReservation("Reservation1", "admin", new DateTime(2015, 1, 1, 10, 0, 0), new DateTime(2015, 1, 1, 11, 0, 0), YesNoOptions.No, YesNoOptions.No, 0, "myTopology", globalInputs, requirementsInputs, additionalInfoInputs, out reservationId, out resultXml);
      </Input>
      <Output Name="reservationId">af626b88-458b-4e7a-9054-c03d8cffa260</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T11:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:40:47"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservationId" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateReservation&gt;
        &lt;reservationName&gt;test reservation&lt;/reservationName&gt;
        &lt;owner&gt;admin&lt;/owner&gt;
        &lt;startTime&gt;01/01/2015 10:00&lt;/startTime&gt;
        &lt;endTime&gt;01/01/2015 11:00&lt;/endTime&gt;
        &lt;notifyOnStart&gt;1&lt;/notifyOnStart&gt;
        &lt;notifyOnEnd&gt;1&lt;/notifyOnEnd&gt;
        &lt;notificationMinutesBeforeEnd&gt;10&lt;/notificationMinutesBeforeEnd&gt;
        &lt;topologyFullPath&gt;myTopology&lt;/topologyFullPath&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;Some global&lt;/ParamName&gt;
        &lt;Value&gt;some value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;requirementsInputs&gt;
        &lt;UpdateTopologyRequirementsInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Model&lt;/ParamName&gt;
        &lt;Value&gt;Some resource model&lt;/Value&gt;
        &lt;Type&gt;Models&lt;/Type&gt;
        &lt;/UpdateTopologyRequirementsInputsRequest&gt;
        &lt;/requirementsInputs&gt;
        &lt;additionalInfoInputs&gt;
        &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Speed&lt;/ParamName&gt;
        &lt;Value&gt;10 Mbps&lt;/Value&gt;
        &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;/additionalInfoInputs&gt;
        &lt;/CreateReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T11:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:40:47"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateTopologyReservation" Title="Create a reservation." Lang="tcl;py" Category="Reservation operations\Scheduling">
    <Description>Defines a new reservation.</Description>
    <Parameters>
      <Parameter Name="reservationName" alias="Reservation Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the reservation.</Description>
      </Parameter>
      <Parameter Name="owner" alias="Reservation Owner" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user name of the reservation owner.</Description>
      </Parameter>
      <Parameter Name="startTime" alias="Start Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The start time of the reservation.</Description>
      </Parameter>
      <Parameter Name="endTime" alias="End Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The end time of the reservation.</Description>
      </Parameter>
      <Parameter Name="notifyOnStart" alias="Notify On Start" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation starts.</Description>
      </Parameter>
      <Parameter Name="notifyOnEnd" alias="Notify On End" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate whether to notify the reservation owner when the reservation ends.</Description>
      </Parameter>
      <Parameter Name="notificationMinutesBeforeEnd" alias="Notification Minutes Before End" Type="int" Default="0" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Indicate the number of minutes before the end of the reservation to send out a Notify On End alert to the reservation owner. (0 = disabled)</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Requirements inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value', 'AttributeType';]}, AttributeType can be one of the following: Attributes/Models/Quantity. </Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Additional info inputs associated with the specified topology. For example: {['Resource Name', 'Input Name', 'Value';]}. </Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateTopologyReservation reservationName owner startTime endTime notifyOnStart notifyOnEnd notificationMinutesBeforeEnd topologyFullPath globalInputs requirementsInputs additionalInfoInputs ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;CreateReservation&gt;
      &lt;reservationName&gt;{reservationName}&lt;/reservationName&gt;
      &lt;owner&gt;{owner}&lt;/owner&gt;
      &lt;startTime&gt;{startTime}&lt;/startTime&gt;
      &lt;endTime&gt;{endTime}&lt;/endTime&gt;
      &lt;notifyOnStart&gt;{notifyOnStart}&lt;/notifyOnStart&gt;
      &lt;notifyOnEnd&gt;{notifyOnEnd}&lt;/notifyOnEnd&gt;
      &lt;notificationMinutesBeforeEnd&gt;{notificationMinutesBeforeEnd}&lt;/notificationMinutesBeforeEnd&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;requirementsInputs&gt;
      &lt;UpdateTopologyRequirementsInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;Type&gt;{Type}&lt;/Type&gt;
      &lt;/UpdateTopologyRequirementsInputsRequest&gt;
      &lt;/requirementsInputs&gt;
      &lt;additionalInfoInputs&gt;
      &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;ResourceName&gt;{ResourceName}&lt;/ResourceName&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
      &lt;/additionalInfoInputs&gt;
      &lt;/CreateReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateTopologyReservation "test reservation" "admin" "01/01/1970 00:00" "12/21/2012 00:00" 1 1 10 "Temp Automation Resources/TP1" {{"GlobalInputName_0" "GlobalInputValue_0"} {"GlobalInputName_1" "GlobalInputValue_1"}} {{"ResourceName_0" "RequiredInputName_0" "RequiredInputValue_0" "RequiredInputType_0"}} {{"ResourceName_0" "AdditionalInfoName_0" "AdditionalInfoValue_0"}} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T11:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:40:47"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateReservation&gt;
        &lt;reservationName&gt;test reservation&lt;/reservationName&gt;
        &lt;owner&gt;admin&lt;/owner&gt;
        &lt;startTime&gt;01/01/2015 10:00&lt;/startTime&gt;
        &lt;endTime&gt;01/01/2015 11:00&lt;/endTime&gt;
        &lt;notifyOnStart&gt;1&lt;/notifyOnStart&gt;
        &lt;notifyOnEnd&gt;1&lt;/notifyOnEnd&gt;
        &lt;notificationMinutesBeforeEnd&gt;10&lt;/notificationMinutesBeforeEnd&gt;
        &lt;topologyFullPath&gt;myTopology&lt;/topologyFullPath&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;Some global&lt;/ParamName&gt;
        &lt;Value&gt;some value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;requirementsInputs&gt;
        &lt;UpdateTopologyRequirementsInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Model&lt;/ParamName&gt;
        &lt;Value&gt;Some resource model&lt;/Value&gt;
        &lt;Type&gt;Models&lt;/Type&gt;
        &lt;/UpdateTopologyRequirementsInputsRequest&gt;
        &lt;/requirementsInputs&gt;
        &lt;additionalInfoInputs&gt;
        &lt;UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;ResourceName&gt;Some resource&lt;/ResourceName&gt;
        &lt;ParamName&gt;Speed&lt;/ParamName&gt;
        &lt;Value&gt;10 Mbps&lt;/Value&gt;
        &lt;/UpdateTopologyAdditionalInfoInputsRequest&gt;
        &lt;/additionalInfoInputs&gt;
        &lt;/CreateReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T11:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:40:47"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="CreateResource" Title="Add a new resource." Lang="all" Category="Inventory management\Resources">
    <Description>Adds a new resource.</Description>
    <Parameters>
      <Parameter Name="resourceFamily" alias="Resource Family" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the resource family.</Description>
      </Parameter>
      <Parameter Name="resourceModel" alias="Resource Model" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource model.</Description>
      </Parameter>
      <Parameter Name="resourceName" alias="Resource Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name.</Description>
      </Parameter>
      <Parameter Name="resourceAddress" alias="Resource Address" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource address.</Description>
      </Parameter>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="parentResourceFullPath" alias="Parent Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full path from the root to a parent resource, separated by slashes. For example: Traffic Generators/Generic.</Description>
      </Parameter>
      <Parameter Name="resourceDescription" alias="Resource Description" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Provide a short description to help identify the resource.</Description>
      </Parameter>
      <Parameter Name="resource" alias="Resource" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Details associated with the specified resource.</Description>
      </Parameter>
      <Parameter Name="attributes" alias="Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Attributes and attribute values associated with the new resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateResource resourceFamily resourceModel resourceName resourceAddress folderFullPath parentResourceFullPath resourceDescription ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateResource(resourceFamily,resourceModel,resourceName,resourceAddress,folderFullPath,parentResourceFullPath,resourceDescription,out resource,out attributes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateResource&gt;
      &lt;resourceFamily&gt;{resourceFamily}&lt;/resourceFamily&gt;
      &lt;resourceModel&gt;{resourceModel}&lt;/resourceModel&gt;
      &lt;resourceName&gt;{resourceName}&lt;/resourceName&gt;
      &lt;resourceAddress&gt;{resourceAddress}&lt;/resourceAddress&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;parentResourceFullPath&gt;{parentResourceFullPath}&lt;/parentResourceFullPath&gt;
      &lt;resourceDescription&gt;{resourceDescription}&lt;/resourceDescription&gt;
      &lt;/CreateResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        #create chassis
        ::TestShellAPI::CreateResource "Generic Chassis" "Generic Chassis Model" "Router 1234" "192.168.1.200" "Lab Routers" "" "a generic router" resultXml
        #create a child port for the chassis
        ::TestShellAPI::CreateResource "Generic Port" "Generic Port Model" "Port 1" "1" "Lab Routers" "Router 1234" "a generic router port" resultXml
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false" Description="a generic router"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains/&gt;
        &lt;ChildResources/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResponseInfo&gt;
        &lt;ResponseInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.200/1" RootAddress="192.168.1.200" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="false" Excluded="false" Description="a generic router port"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;Domains/&gt;
        &lt;ChildResources/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string[,] resource;
        string[,] attributes;
        testShellAPI.CreateResource("Bridge", "Bridge Generic Model", "Bridge1", "192.168.1.200", "", "", "", out resource, out attributes, out resultXml);
      </Input>
      <Output Name="resource">
        {{Index, ParentIndex, Name, Address, FullAddress, RootAddress, ResourceFamilyName, ResourceModelName, FolderFullPath, Locked, LockInfo_ReservationName, LockInfo_Username, LockInfo_MachineName, LockInfo_Created, Excluded, Permission, UniqueIdentifier}
        {1, -1, Bridge1, 192.168.1.200, 192.168.1.200, 192.168.1.200, Bridge, Bridge Generic Model, , False, , , , , False, ReadWrite, }}
      </Output>
      <Output Name="attributes">
        {{ResourceIndex, ResourceName, AttributeName, AttributeValue, AttributeType}
        {1, Bridge1, Number of Ports, 0, Numeric}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Bridge1" FolderFullPath="" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Bridge" ResourceModelName="Bridge Generic Model" Locked="false" Excluded="false" Description="" Permission="ReadWrite"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="Number of Ports" Value="0" Type="Numeric"&gt;&lt;/ResourceAttribute&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;ChildResources&gt;&lt;/ChildResources&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resource" src="" />
      <Output Name="attributes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateResource&gt;
        &lt;resourceFamily&gt;Generic Port&lt;/resourceFamily&gt;
        &lt;resourceModel&gt;Generic Port Model&lt;/resourceModel&gt;
        &lt;resourceName&gt;Port 1&lt;/resourceName&gt;
        &lt;resourceAddress&gt;1&lt;/resourceAddress&gt;
        &lt;folderFullPath&gt;Lab Routers&lt;/folderFullPath&gt;
        &lt;parentResourceFullPath&gt;Router 1234&lt;/parentResourceFullPath&gt;
        &lt;resourceDescription&gt;a generic router port&lt;/resourceDescription&gt;
        &lt;/CreateResource&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false" Description="a generic router"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains/&gt;
        &lt;ChildResources/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResponseInfo&gt;
        &lt;ResponseInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.200/1" RootAddress="192.168.1.200" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="false" Excluded="false" Description="a generic router port"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;Domains/&gt;
        &lt;ChildResources/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateResources" Title="Adds new resources." Lang="all" Category="Inventory management\Resources">
    <Description>Adds new resources.</Description>
    <Parameters>
      <Parameter Name="resourceInfoDtos" alias="Resources" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of resources to add. For example: {['Resource Family','Resource Model','Resource Name','Resource Address','Folder Full Path','Parent Resource Full Path','Resource Description';]}</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateResources resourceInfoDtos ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateResources(resourceCreationRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateResources&gt;
      &lt;resourceInfoDtos&gt;
      &lt;ResourceInfoDto&gt;
      &lt;Family&gt;{Family}&lt;/Family&gt;
      &lt;Model&gt;{Model}&lt;/Model&gt;
      &lt;FullName&gt;{FullName}&lt;/FullName&gt;
      &lt;Address&gt;{Address}&lt;/Address&gt;
      &lt;FolderFullpath&gt;{FolderFullpath}&lt;/FolderFullpath&gt;
      &lt;ParentFullName&gt;{ParentFullName}&lt;/ParentFullName&gt;
      &lt;Description&gt;{Description}&lt;/Description&gt;
      &lt;/ResourceInfoDto&gt;
      &lt;/resourceInfoDtos&gt;
      &lt;/CreateResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        #create chassis
        ::TestShellAPI::CreateResources {{"Generic Chassis" "Generic Chassis Model" "Router 1234" "192.168.1.200" "Lab Routers" "" "a generic router"}} resultXml
        #create two child ports for the chassis
        ::TestShellAPI::CreateResources {{Generic Port" "Generic Port Model" "Port 1" "1" "Lab Routers" "Router 1234" "a generic router port"} {Generic Port" "Generic Port Model" "Port 2" "2" "Lab Routers" "Router 1234" "a generic router port"}} resultXml
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] resources;
        testShellAPI.CreateResources(resources);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateResources&gt;
        &lt;resourceInfoDtos&gt;
        &lt;ResourceInfoDto&gt;
        &lt;Family&gt;Generic Chassis&lt;/Family&gt;
        &lt;Model&gt;Generic Chassis Model&lt;/Model&gt;
        &lt;FullName&gt;Chassis1/Blade1&lt;/FullName&gt;
        &lt;Address&gt;192.168.1.200&lt;/Address&gt;
        &lt;FolderFullpath&gt;Lab Routers&lt;/FolderFullpath&gt;
        &lt;ParentFullName&gt;Chassis1&lt;/ParentFullName&gt;
        &lt;Description&gt;a generic router&lt;/Description&gt;
        &lt;/ResourceInfoDto&gt;
        &lt;/resourceInfoDtos&gt;
        &lt;/CreateResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateRouteInReservation" Title="Create a route between two resources." Lang="all" Category="Reservation operations\Routing">
    <Description>Creates a route between the specified source and target resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourceFullPath" alias="Source Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="targetResourceFullPath" alias="Target Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="overrideActiveRoutes" alias="Override Active Routes" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether the new route can override existing routes.</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
      </Parameter>
      <Parameter Name="maxHops" alias="Maximum Hops" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number or allowed hops.</Description>
      </Parameter>
      <Parameter Name="routeAlias" alias="Route Alias" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the route’s alias.</Description>
      </Parameter>
      <Parameter Name="isShared" alias="Is Shared" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether this route is shared. Shared routes can be used in more than one reservation.</Description>
      </Parameter>
      <Parameter Name="route" alias="Route" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateRouteInReservation reservationId sourceResourceFullPath targetResourceFullPath overrideActiveRoutes mappingType maxHops routeAlias isShared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateRouteInReservation(reservationId,sourceResourceFullPath,targetResourceFullPath,overrideActiveRoutes,mappingType,maxHops,routeAlias,isShared,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateRouteInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourceFullPath&gt;{sourceResourceFullPath}&lt;/sourceResourceFullPath&gt;
      &lt;targetResourceFullPath&gt;{targetResourceFullPath}&lt;/targetResourceFullPath&gt;
      &lt;overrideActiveRoutes&gt;{overrideActiveRoutes}&lt;/overrideActiveRoutes&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;maxHops&gt;{maxHops}&lt;/maxHops&gt;
      &lt;routeAlias&gt;{routeAlias}&lt;/routeAlias&gt;
      &lt;isShared&gt;{isShared}&lt;/isShared&gt;
      &lt;/CreateRouteInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateRouteInReservation $reservationId "Router 1234/Port 1" "GenericResource 1234/Port 1" 1 bi 2 "a route" 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] route;
        testShellAPI.CreateRouteInReservation(reservationId,"Router 1234/Port 1","GenericResource 1234/Port 1",YesNoOptions.Yes,MappingType.Bidirectional,2,"a route",YesNoOptions.No,out route,out resultXml);
      </Input>
      <Output Name="route">{{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="route" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateRouteInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;sourceResourceFullPath&gt;Router 1234/Port 1&lt;/sourceResourceFullPath&gt;
        &lt;targetResourceFullPath&gt;GenericResource 1234/Port 1&lt;/targetResourceFullPath&gt;
        &lt;overrideActiveRoutes&gt;1&lt;/overrideActiveRoutes&gt;
        &lt;mappingType&gt;bi&lt;/mappingType&gt;
        &lt;maxHops&gt;2&lt;/maxHops&gt;
        &lt;routeAlias&gt;a route&lt;/routeAlias&gt;
        &lt;isShared&gt;0&lt;/isShared&gt;
        &lt;/CreateRouteInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="CreateRoutesInReservation" Title="Create routes between the listed source and target resources." Lang="all" Category="Reservation operations\Routing">
    <Description>Create routes between the listed source and target resources. Routes will be created for each pair of source and target resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourcesFullPath" alias="Source Resources" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="targetResourcesFullPath" alias="Target Resources" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="overrideActiveRoutes" alias="Override Active Routes" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether the new route can override existing routes.</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional mapping or 'uni' for unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="maxHops" alias="Maximum Hops" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number or allowed hops.</Description>
      </Parameter>
      <Parameter Name="routeAlias" alias="Route Alias" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the route’s alias.</Description>
      </Parameter>
      <Parameter Name="isShared" alias="Is Shared" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether these routes are shared. Shared routes can be used in more than one reservation.</Description>
      </Parameter>
      <Parameter Name="routes" alias="Route" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::CreateRoutesInReservation reservationId sourceResourcesFullPath targetResourcesFullPath overrideActiveRoutes mappingType maxHops routeAlias isShared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">CreateRoutesInReservation(reservationId,sourceResourcesFullPath,targetResourcesFullPath,overrideActiveRoutes,mappingType,maxHops,routeAlias,isShared,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;CreateRoutesInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/sourceResourcesFullPath&gt;
      &lt;targetResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/targetResourcesFullPath&gt;
      &lt;overrideActiveRoutes&gt;{overrideActiveRoutes}&lt;/overrideActiveRoutes&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;maxHops&gt;{maxHops}&lt;/maxHops&gt;
      &lt;routeAlias&gt;{routeAlias}&lt;/routeAlias&gt;
      &lt;isShared&gt;{isShared}&lt;/isShared&gt;
      &lt;/CreateRoutesInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::CreateRoutesInReservation $reservationId {"Router 1234/Port 1"} {"GenericResource 1234/Port 2"} 1 uni 2 "uni route" 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes;
        testShellAPI.CreateRoutesInReservation(reservationId,new string[]{"Router 1234/Port 1"},new string[]{"GenericResource 1234/Port 2"},YesNoOptions.Yes,MappingType.Bidirectional,2,"a route",YesNoOptions.No,out routes,out resultXml);
      </Input>
      <Output Name="routes">{{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 2","GenericResource 1234/Port 2"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;CreateRoutesInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;sourceResourcesFullPath&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;/sourceResourcesFullPath&gt;
        &lt;targetResourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234/Port 2&lt;/string&gt;
        &lt;/targetResourcesFullPath&gt;
        &lt;overrideActiveRoutes&gt;1&lt;/overrideActiveRoutes&gt;
        &lt;mappingType&gt;uni&lt;/mappingType&gt;
        &lt;maxHops&gt;2&lt;/maxHops&gt;
        &lt;routeAlias&gt;uni route&lt;/routeAlias&gt;
        &lt;isShared&gt;0&lt;/isShared&gt;
        &lt;/CreateRoutesInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteDomain" Title="Deletes a domain." Lang="all" Category="User management\Domains">
    <Description>Deletes a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteDomain domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteDomain(domainName);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;DeleteDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/DeleteDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteDomain "Domain1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteDomain("Domain1");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;/DeleteDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteTopology" Title="Delete a topology." Lang="all" Category="Inventory management\Topologies">
    <Description>Deletes the specified topology.</Description>
    <Parameters>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteTopology topologyFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteTopology(topologyFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteTopology&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;/DeleteTopology&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteTopology "Temp Automation Resources/TP1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteTopology("Topology1");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteTopology&gt;
        &lt;topologyFullPath&gt;Topology1&lt;/topologyFullPath&gt;
        &lt;/DeleteTopology&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteFolder" Title="Delete a folder." Lang="all" Category="Inventory management\Folders">
    <Description>Deletes the specified folder.</Description>
    <Parameters>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteFolder folderFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteFolder(folderFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteFolder&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;/DeleteFolder&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteFolder "Lab Routers" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteFolder("Lab Routers");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteFolder&gt;
        &lt;folderFullPath&gt;Lab Routers&lt;/folderFullPath&gt;
        &lt;/DeleteFolder&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteGroup" Title="Delete a group." Lang="all" Category="User management\Groups">
    <Description>Deletes the specified group.</Description>
    <Parameters>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteGroup groupName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteGroup(groupName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteGroup&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;/DeleteGroup&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteGroup QA_Users resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteGroup("QA_Users")
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteGroup&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;/DeleteGroup&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteReservation" Title="Delete a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Deletes the specified reservation and optionally, releases all reservation resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="unmap" alias="Unmap Resources" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether to keep mappings or release mapped resources when deleting the reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteReservation reservationId unmap ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteReservation(reservationId,unmap);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;unmap&gt;{unmap}&lt;/unmap&gt;
      &lt;/DeleteReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteReservation $reservationId 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.DeleteReservation(reservationId,YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;unmap&gt;1&lt;/unmap&gt;
        &lt;/DeleteReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteResource" Title="Delete a resource." Lang="all" Category="Inventory management\Resources">
    <Description>Deletes the specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteResource resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteResource(resourceFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteResource&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/DeleteResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteResource "Router 4321" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteResource("Router 4321");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteResource&gt;
        &lt;resourceFullPath&gt;Router 4321&lt;/resourceFullPath&gt;
        &lt;/DeleteResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteResources" Title="Deletes the specified resources." Lang="all" Category="Inventory management\Resources">
    <Description>Deletes the specified resources.</Description>
    <Parameters>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteResources resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteResources(resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteResources&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/DeleteResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteResources {"Router 4321"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteResources(new string[] {"Router 4321"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteResources&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;Router 4321&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/DeleteResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteUser" Title="Deletes a user." Lang="all" Category="User management\Users">
    <Description>Deletes the specified user.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the user.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteUser username ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteUser(username);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteUser&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;/DeleteUser&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteUser User1234 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteUser("User1234");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteUser&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;/DeleteUser&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DisconnectRoutesInReservation" Title="Disconnects a list of routes." Lang="all" Category="Reservation operations\Routing">
    <Description>Disconnects requested routes. It unlocks the resources (if locked), and removes route mappings, but does not remove the route resources from the reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="endpoints" alias="Endpoints" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The routes endpoints to disconnect.</Description>
      </Parameter>
      <Parameter Name="routes" alias="Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The routes that were disconnected.</Description>
      </Parameter>
      <Parameter Name="segments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The segments details of the disconnected routes.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DisconnectRoutesInReservation reservationId endpoints ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DisconnectRoutesInReservation(reservationId,endpoints,out routes,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DisconnectRoutesInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;endpoints&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/endpoints&gt;
      &lt;/DisconnectRoutesInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DisconnectRoutesInReservation $reservationId {"Router 1234/Port 1" "GenericResource 1234/Port 1"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Cisco Catalyst 1/Blade 1/Port 1" Target="IXIA 400T/Card 1/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Cisco Catalyst 1/Blade 1/Port 1" Target="ONPATH 3901 1/Blade01/Port15"/&gt;
        &lt;Segment Source="ONPATH 3901 1/Blade01/Port15" Target="ONPATH 3901 1/Blade01/Port09"/&gt;
        &lt;Segment Source="ONPATH 3901 1/Blade01/Port09" Target="IXIA 400T/Card 1/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes,segments;
        testShellAPI.DisconnectRoutesInReservation(reservationId,new string[,]{{"Router 1234/Port 1","GenericResource 1234/Port 1"}},out segments,out resultXml);
      </Input>
      <Output Name="routes">
        {{"Index","Source","Target","RouteType","Alias","Shared"},
        {"1","Router 1234/Port 1","GenericResource 1234/Port 1","bi","a route","True"}}
      </Output>
      <Output Name="segments">
        {{"RouteIndex","Source","Target"},
        {"1","Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3"},
        {"1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1"},
        {"1","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="segments" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DisconnectRoutesInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;endpoints&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;/endpoints&gt;
        &lt;/DisconnectRoutesInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Cisco Catalyst 1/Blade 1/Port 1" Target="IXIA 400T/Card 1/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Cisco Catalyst 1/Blade 1/Port 1" Target="ONPATH 3901 1/Blade01/Port15"/&gt;
        &lt;Segment Source="ONPATH 3901 1/Blade01/Port15" Target="ONPATH 3901 1/Blade01/Port09"/&gt;
        &lt;Segment Source="ONPATH 3901 1/Blade01/Port09" Target="IXIA 400T/Card 1/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DecryptPassword" Title="Decrypt a password." Lang="tcl;py" Category="Configuration">
    <Description>Decrypt a password.</Description>
    <Parameters>
      <Parameter Name="encryptedString" alias="Encrypted string" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The encrypted string for decryption.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DecryptPassword encryptedString ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;DecryptPassword&gt;
      &lt;encryptedString&gt;{encryptedString}&lt;/encryptedString&gt;
      &lt;/DecryptPassword&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DecryptPassword "a" resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Password="decryptedPassword"&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DecryptPassword&gt;
        &lt;encryptedString&gt;mypassword&lt;/encryptedString&gt;
        &lt;/DecryptPassword&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Password="decryptedPassword"&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="DeleteResourceTemplate" Title="Deletes a specific resource template." Lang="all" Category="Inventory management\Resources">
    <Description>Deletes a specific resource template.</Description>
    <Parameters>
      <Parameter Name="resourceTemplateName" alias="Resource Template Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource template name.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::DeleteResourceTemplate resourceTemplateName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">DeleteResourceTemplate(resourceTemplateName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;DeleteResourceTemplate&gt;
      &lt;resourceTemplateName&gt;{resourceTemplateName}&lt;/resourceTemplateName&gt;
      &lt;/DeleteResourceTemplate&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::DeleteResourceTemplate "Resource Template 4 tests" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.DeleteResourceTemplate("Resource Template 4 tests");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;DeleteResourceTemplate&gt;
        &lt;resourceTemplateName&gt;Resource Template 4 tests&lt;/resourceTemplateName&gt;
        &lt;/DeleteResourceTemplate&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="EndReservation" Title="End a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Ends the specified reservation and optionally, unlocks and releases all reservation resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="unmap" alias="Unmap resources" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether to keep mappings or release mapped resources when deleting the reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EndReservation reservationId unmap ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EndReservation(reservationId,unmap);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EndReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;unmap&gt;{unmap}&lt;/unmap&gt;
      &lt;/EndReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EndReservation $reservationId 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EndReservation(reservationId,YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EndReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;unmap&gt;1&lt;/unmap&gt;
        &lt;/EndReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExcludeResource" Title="Exclude a resource." Lang="all" Category="Inventory operations\Including &amp; excluding">
    <Description>Excludes a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExcludeResource resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExcludeResource(resourceFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExcludeResource&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/ExcludeResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExcludeResource "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.ExcludeResource("L1 Switch 1234");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExcludeResource&gt;
        &lt;resourceFullPath&gt;L1 Switch 1234&lt;/resourceFullPath&gt;
        &lt;/ExcludeResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExcludeResources" Title="Excludes the specified resources." Lang="all" Category="Inventory operations\Including &amp; excluding">
    <Description>Excludes the specified resources.</Description>
    <Parameters>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExcludeResources resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExcludeResources(resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExcludeResources&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/ExcludeResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExcludeResources {"L1 Switch 1234/Blade 1" "L1 Switch 1234/Blade 2" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.ExcludeResources(new[] {"L1 Switch 1234"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExcludeResources&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;L1 Switch 1234&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/ExcludeResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="EnqueueResourceCommand" Title="" Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Enqueues a command to be executed for the specified driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EnqueueResourceCommand reservationId resourceFullPath commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EnqueueResourceCommand(reservationId,resourceFullPath,commandName,parameterValues,printOutput);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EnqueueResourceCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/EnqueueResourceCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EnqueueResourceCommand $reservationId "Router 1234" "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EnqueueResourceCommand(reservationId, "Router 1234", "ExampleCommand", new string[]{"abcd", "2"}, YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EnqueueResourceCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/EnqueueResourceCommand&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="EnqueueServiceCommand" Title="" Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Enqueues a command to be executed for the specified driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceAlias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the alias of the service. The service alias is its identifier in the environment context. It can be retrieved via the environment details API and is displayed visually on the diagram.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EnqueueServiceCommand reservationId serviceAlias commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EnqueueServiceCommand(reservationId,serviceAlias,commandName,parameterValues,printOutput);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EnqueueServiceCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceAlias&gt;{serviceAlias}&lt;/serviceAlias&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/EnqueueServiceCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EnqueueServiceCommand $reservationId "Service1" "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EnqueueServiceCommand(reservationId, "Service1", "ExampleCommand", new string[]{"abcd", "2"},YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EnqueueServiceCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;serviceAlias&gt;Service1&lt;/serviceAlias&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/EnqueueServiceCommand&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteResourceCommand" Title="" Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Executes a command for the specified driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteResourceCommand reservationId resourceFullPath commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteResourceCommand(reservationId,resourceFullPath,commandName,parameterValues,printOutput,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteResourceCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteResourceCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteResourceCommand $reservationId "Router 1234" "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteResourceCommand(reservationId, "Router 1234", "ExampleCommand", new string[]{"abcd", "2"}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteResourceCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteResourceCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteResourceConnectedCommand" Title="" Lang="all" Category="Reservation operations\Commands">
    <Description>Executes a command for the specified driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandTag" alias="Command Tag" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the command tag. Connected command tags are used to define categories of functionality (e.g 'virtualization').</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="connectedPortsFullPath" alias="Connected Ports" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of connected ports to use in this operation. Include the full path from the root resource to each port, separated by slashes. For example: Switch20/Blade5/PowerPort1. Leave blank to perform the connected operation on all of the specified resource’s connected ports.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteResourceConnectedCommand reservationId resourceFullPath commandName commandTag parameterValues connectedPortsFullPath printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteResourceConnectedCommand(reservationId,resourceFullPath,commandName,commandTag, parameterValues, connectedPortsFullPath,printOutput, out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteResourceConnectedCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandTag&gt;{commandTag}&lt;/commandTag&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;connectedPortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/connectedPortsFullPath&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteResourceConnectedCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteResourceConnectedCommand $reservationId "Router 1234" "SpinUp" "virtualization" {"abcd" "2"} {"Router 1234/Port1"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteResourceConnectedCommand(reservationId, "Router 1234", "SpinUp","virtualization", new string[]{"abcd", "2"}, {"Router 1234/Port1"}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteResourceConnectedCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;commandName&gt;SpinUp&lt;/commandName&gt;
        &lt;commandTag&gt;virtualization&lt;/commandTag&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;connectedPortsFullPath&gt;
        &lt;string&gt;Router 1234/Port1&lt;/string&gt;
        &lt;/connectedPortsFullPath&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteResourceConnectedCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="EnqueueTopologyCommand" Title="Enqueue a topology command." Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Enqueues a command to be executed for the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EnqueueTopologyCommand reservationId commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EnqueueTopologyCommand(reservationId,commandName,parameterValues,printOutput);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EnqueueTopologyCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/EnqueueTopologyCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EnqueueTopologyCommand $reservationId "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EnqueueTopologyCommand(reservationId, "ExampleCommand", new string[]{"abcd", "2"}, YesNoOptions.Yes);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EnqueueTopologyCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/EnqueueTopologyCommand&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteTopologyCommand" Title="Execute a topology command." Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Executes a command for the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteTopologyCommand reservationId commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteTopologyCommand(reservationId,commandName,parameterValues,printOutput,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteTopologyCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteTopologyCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteTopologyCommand $reservationId "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteTopologyCommand(reservationId, "ExampleCommand", new string[]{"abcd", "2"}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteTopologyCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteTopologyCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExtendReservation" Title="Extend a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Extends the duration of the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="minutesToAdd" alias="Minutes To Add" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the number of minutes to add to the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExtendReservation reservationId minutesToAdd ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExtendReservation(reservationId,minutesToAdd);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExtendReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;minutesToAdd&gt;{minutesToAdd}&lt;/minutesToAdd&gt;
      &lt;/ExtendReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExtendReservation $reservationId 60 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExtendReservation(reservationId,60);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExtendReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;minutesToAdd&gt;60&lt;/minutesToAdd&gt;
        &lt;/ExtendReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExportFamiliesAndModels" Title="Exports the resource families, models, attributes and structure configuration." Lang="all" Category="Configuration">
    <Description>Exports the resource families, models, attributes and structure configuration.</Description>
    <Parameters>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExportFamiliesAndModels ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExportFamiliesAndModels(out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">&lt;ExportFamiliesAndModels&gt;&lt;/ExportFamiliesAndModels&gt;</Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExportFamiliesAndModels resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.ExportFamiliesAndModels(out resultXml);
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="serverDateTime" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>&lt;ExportFamiliesAndModels&gt;&lt;/ExportFamiliesAndModels&gt;</Input>
      <Output Name="resultXml">&lt;ResponseInfo&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteServiceCommand" Title="" Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Executes a command for the specified service driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceAlias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the alias of the service.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="parameterValues" alias="Command Parameters" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of parameters values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteServiceCommand reservationId serviceAlias commandName parameterValues printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteServiceCommand(reservationId, serviceAlias, commandName, parameterValues, printOutput, out output, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteServiceCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceAlias&gt;{serviceAlias}&lt;/serviceAlias&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;parameterValues&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/parameterValues&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteServiceCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteServiceCommand $reservationId "Service 1" "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteServiceCommand(reservationId, "Service 1", "ExampleCommand", new string[]{"abcd", "2"}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteServiceCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;serviceAlias&gt;Service 1&lt;/serviceAlias&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;parameterValues&gt;
        &lt;string&gt;abcd&lt;/string&gt;
        &lt;string&gt;2&lt;/string&gt;
        &lt;/parameterValues&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteServiceCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteDeployAppCommand" Title="" Lang="tcl;py;xmlrpc" Category="Reservation operations\Commands">
    <Description>Executes deploy command for the specified app driver.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="appName" alias="App Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the app.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;ExecuteDeployAppCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;appName&gt;{appName}&lt;/appName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteDeployAppCommand&gt;
    </Syntax>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteDeployAppCommand reservationId appName commandInputs printOutput ?resultXml?</Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteDeployAppCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;appName&gt;App1&lt;/appName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteDeployAppCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteDeployAppCommand $reservationId "app name" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteDeployAppCommandBulk" Title="" Lang="py;xmlrpc" Category="Reservation operations\Commands">
    <Description>Executes deploy command for the specified apps.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="appNames" alias="App Names" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the names of the apps to deploy.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command [appName, InputName, InputValue].</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;ExecuteDeployAppCommandBulk&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;appNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/appNames&gt;
      &lt;commandInputs&gt;
      &lt;DeployAppInput&gt;
      &lt;AppName&gt;{AppName}&lt;/AppName&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/DeployAppInput&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteDeployAppCommandBulk&gt;
    </Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteDeployAppCommandBulk&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;appNames&gt;
        &lt;string&gt;app1&lt;/string&gt;
        &lt;string&gt;app2&lt;/string&gt;
        &lt;/appNames&gt;
        &lt;commandInputs&gt;
        &lt;DeployAppInput&gt;
        &lt;AppName&gt;app1&lt;/AppName&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/DeployAppInput&gt;
        &lt;DeployAppInput&gt;
        &lt;AppName&gt;app2&lt;/AppName&gt;
        &lt;Name&gt;input2&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/DeployAppInput&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteDeployAppCommandBulk&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteInstallAppCommand" Title="" Lang="tcl;py;xmlrpc" Category="Reservation operations\Commands">
    <Description>Executes install command for the specified app driver or script.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceName" alias="Resource Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the resource deployment command created.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;ExecuteInstallAppCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceName&gt;{resourceName}&lt;/resourceName&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteInstallAppCommand&gt;
    </Syntax>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteInstallAppCommand reservationId resourceName commandName commandInputs printOutput ?resultXml?</Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteInstallAppCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceName&gt;Resource1&lt;/resourceName&gt;
        &lt;commandName&gt;Comand1&lt;/commandName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteInstallAppCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteInstallAppCommand $reservationId "resourcename" "commandname" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>

  <Command Name="EnqueueEnvironmentCommand" Title="Enqueue an environment command." Lang="all" Category="Reservation operations\Commands">
    <Description>Enqueues a command to be executed for the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EnqueueEnvironmentCommand reservationId commandName commandInputs printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EnqueueEnvironmentCommand(reservationId,commandName,commandInputs,printOutput);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EnqueueEnvironmentCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/EnqueueEnvironmentCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EnqueueEnvironmentCommand $reservationId "ExampleCommand" {{"input1" "abc"}} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EnqueueEnvironmentCommand(reservationId, "ExampleCommand", new string[,]{{"input1", "abc"}}, YesNoOptions.Yes);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EnqueueEnvironmentCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/EnqueueEnvironmentCommand&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ExecuteEnvironmentCommand" Title="Execute an environment command." Lang="all" Category="Reservation operations\Commands">
    <Description>Executes a command for the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteEnvironmentCommand reservationId commandName commandInputs printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteEnvironmentCommand(reservationId,commandName,commandInputs,printOutput,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteEnvironmentCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteEnvironmentCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteEnvironmentCommand $reservationId "ExampleCommand" {{"input1" "abc"}} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteEnvironmentCommand(reservationId, "ExampleCommand", new string[,]{{"input1", "abc"}}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteEnvironmentCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteEnvironmentCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>

  <Command Name="EnqueueCommand" Title="Enqueue a command." Lang="all" Category="Reservation operations\Commands">
    <Description>Enqueues a command to be executed for the specified target.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="targetName" alias="Target Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the target according to the target type: for resources - specify the resouce's name, for services - the service's alias.</Description>
      </Parameter>
      <Parameter Name="targetType" alias="Target Type" Type="CommandTargetType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the target type for command execution.</Description>
        <MoreDescription Lang="tcl">Use 0 for Resource, 1 for Service, 2 for App.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Resource, 1 for Service, 2 for App.</MoreDescription>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::EnqueueCommand reservationId targetName targetType commandName commandInputs printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">EnqueueCommand(reservationId,targetName,targetType,commandName,commandInputs,printOutput);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;EnqueueCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;targetName&gt;{targetName}&lt;/targetName&gt;
      &lt;targetType&gt;{targetType}&lt;/targetType&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/EnqueueCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::EnqueueCommand $reservationId "Router 1234" 0 "ExampleCommand" {{"input1" "abc"}} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.EnqueueCommand(reservationId, "Router 1234", CommandTargetType.Resource, "ExampleCommand", new string[,]{{"input1", "abc"}}, YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;EnqueueCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;targetName&gt;Router 1234&lt;/targetName&gt;
        &lt;targetType&gt;0&lt;/targetType&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/EnqueueCommand&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>

  <Command Name="ExecuteCommand" Title="Execute a command." Lang="all" Category="Reservation operations\Commands">
    <Description>Executes a command for the specified target.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="targetName" alias="Target Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the target according to the target type: for resources - specify the resouce's name, for services - the service's alias.</Description>
      </Parameter>
      <Parameter Name="targetType" alias="Target Type" Type="CommandTargetType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the target type for command execution.</Description>
        <MoreDescription Lang="tcl">Use 0 for Resource, 1 for Service, 2 for App.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Resource, 1 for Service, 2 for App.</MoreDescription>
      </Parameter>
      <Parameter Name="commandName" alias="Command Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the command.</Description>
      </Parameter>
      <Parameter Name="commandInputs" alias="Command Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a matrix of input names and values required for executing the command.</Description>
      </Parameter>
      <Parameter Name="printOutput" alias="Print Output" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Defines whether to print the command output in the reservation command output window.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ExecuteCommand reservationId targetName targetType commandName commandInputs printOutput ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ExecuteCommand(reservationId,targetName,targetType,commandName,commandInputs,printOutput,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ExecuteCommand&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;targetName&gt;{targetName}&lt;/targetName&gt;
      &lt;targetType&gt;{targetType}&lt;/targetType&gt;
      &lt;commandName&gt;{commandName}&lt;/commandName&gt;
      &lt;commandInputs&gt;
      &lt;InputNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/InputNameValue&gt;
      &lt;/commandInputs&gt;
      &lt;printOutput&gt;{printOutput}&lt;/printOutput&gt;
      &lt;/ExecuteCommand&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ExecuteCommand $reservationId "Router 1234" 0 "ExampleCommand" {"abcd" "2"} 1 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ExecuteCommand(reservationId, "Router 1234", CommandTargetType.Resource, "ExampleCommand", new string[,]{{"input1", "abc"}}, YesNoOptions.Yes, out output, out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ExecuteCommand&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;targetName&gt;Router 1234&lt;/targetName&gt;
        &lt;targetType&gt;0&lt;/targetType&gt;
        &lt;commandName&gt;ExampleCommand&lt;/commandName&gt;
        &lt;commandInputs&gt;
        &lt;InputNameValue&gt;
        &lt;Name&gt;input1&lt;/Name&gt;
        &lt;Value&gt;abc&lt;/Value&gt;
        &lt;/InputNameValue&gt;
        &lt;/commandInputs&gt;
        &lt;printOutput&gt;true&lt;/printOutput&gt;
        &lt;/ExecuteCommand&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="success"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="FindResources" Title="" Lang="all" Category="Inventory management\Resources">
    <Description>Retrieves resources that match all the specified search parameters, and all reservations associated with the search results.</Description>
    <Parameters>
      <Parameter Name="resourceFamily" alias="Resource Family" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the resource family.</Description>
      </Parameter>
      <Parameter Name="resourceModel" alias="Resource Model" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource model.</Description>
      </Parameter>
      <Parameter Name="attributeValues" alias="Attribute Values" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify an array of one or more attributes and attribute values.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="resourceFullName" alias="Resource Full Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify part of or the full name of the resource.</Description>
      </Parameter>
      <Parameter Name="exactName" alias="Exact Name" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether to search the exact given name or not.</Description>
      </Parameter>
      <Parameter Name="includeSubResources" alias="Include Sub Resources" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether to retrieve the sub resources once the parent matches the name.</Description>
      </Parameter>
      <Parameter Name="resourceAddress" alias="Resource Address" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource address. Can be partial (e.g. '192.168.').</Description>
      </Parameter>
      <Parameter Name="resourceUniqueIdentifier" alias="Resource Unique Identifier" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource unique identifier.</Description>
      </Parameter>
      <Parameter Name="maxResults" alias="Max Results" Type="int" Default="500" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number of resources to return.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All reservations for the resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="usageSummary" alias="Usage Summary" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specify the number used connected resources, this data will be available only on top level resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::FindResources resourceFamily resourceModel attributeValues showAllDomains resourceFullName exactName includeSubResources resourceAddress resourceUniqueIdentifier maxResults ?resultXml?</Syntax>
    <Syntax Lang="cSharp">FindResources(resourceFamily,resourceModel,attributeValues,showAllDomains,resourceFullName,exactName,includeSubResources,resourceAddress,resourceUniqueIdentifier,maxResults,out resources,out reservations,out usageSummary,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;FindResources&gt;
      &lt;resourceFamily&gt;{resourceFamily}&lt;/resourceFamily&gt;
      &lt;resourceModel&gt;{resourceModel}&lt;/resourceModel&gt;
      &lt;attributeValues&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributeValues&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;resourceFullName&gt;{resourceFullName}&lt;/resourceFullName&gt;
      &lt;exactName&gt;{exactName}&lt;/exactName&gt;
      &lt;includeSubResources&gt;{includeSubResources}&lt;/includeSubResources&gt;
      &lt;resourceAddress&gt;{resourceAddress}&lt;/resourceAddress&gt;
      &lt;resourceUniqueIdentifier&gt;{resourceUniqueIdentifier}&lt;/resourceUniqueIdentifier&gt;
      &lt;maxResults&gt;{maxResults}&lt;/maxResults&gt;
      &lt;/FindResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::FindResources "Generic Chassis" resourceModel {{"SW_Version1.3"}} "true" resourceFullName exactName includeSubResources resourceAddress resourceUniqueIdentifier maxResults resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234" FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] resources, reservations;
        string resultXml;
        testShellAPI.FindResources("Generic Chassis", "", false, new string[,]{{"SW_Version","1.3"}},out resources,out reservations,out usageSummary,out resultXml);
      </Input>
      <Output Name="resources">
        {{"Index","Name","Description","Address","FullName","FullAddress","ResourceFamilyName","ResourceModelName","Status","Permissions", "ConnectedTo", "FullPath"},
        {"1","Router 1234","a new description for the resource","192.168.1.201","Lab Routers/Router 1234","192.168.1.201","Generic Chassis","Generic Chassis Model","Available","ReadOnly"}}
      </Output>
      <Output Name="reservations">{{"ResourceIndex","ReservationName","Owner","StartTime","EndTime"}}</Output>
      <Output Name="usageSummary">{{"ResourceIndex", "NumOfReserved", "NumOfShared", "NumOfNotInReservation"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234"  FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="reservations" src="" />
      <Output Name="usageSummary" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;FindResources&gt;
        &lt;resourceFamily&gt;Generic Chassis&lt;/resourceFamily&gt;
        &lt;resourceModel&gt;&lt;/resourceModel&gt;
        &lt;attributeValues&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;SW_Version&lt;/Name&gt;
        &lt;Value&gt;1.3&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributeValues&gt;
        &lt;showAllDomains&gt;true&lt;/showAllDomains&gt;
        &lt;resourceFullName&gt;&lt;/resourceFullName&gt;
        &lt;exactName&gt;&lt;/exactName&gt;
        &lt;includeSubResources&gt;true&lt;/includeSubResources&gt;
        &lt;resourceAddress&gt;&lt;/resourceAddress&gt;
        &lt;resourceUniqueIdentifier&gt;&lt;/resourceUniqueIdentifier&gt;
        &lt;maxResults&gt;500&lt;/maxResults&gt;
        &lt;/FindResources&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234" FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="FindResourcesInTimeRange" Title="" Lang="all" Category="Inventory management\Resources">
    <Description>Retrieves resources that match all the specified search parameters, and all reservations in the specified time range associated with the search results.</Description>
    <Parameters>
      <Parameter Name="resourceFamily" alias="Resource Family" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the resource family.</Description>
      </Parameter>
      <Parameter Name="resourceModel" alias="Resource Model" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource model.</Description>
      </Parameter>
      <Parameter Name="fromTime" alias="From Date Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify from which time and date to check the resource's availability.</Description>
      </Parameter>
      <Parameter Name="untilTime" alias="Until Date Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify until which time and date to check the resource's availability.</Description>
      </Parameter>
      <Parameter Name="attributeValues" alias="Attribute Values" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify an array of one or more attributes and attribute values.</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="resourceFullName" alias="Resource Full Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify part of or the full name of the resource.</Description>
      </Parameter>
      <Parameter Name="exactName" alias="Exact Name" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether to search the exact given name or not.</Description>
      </Parameter>
      <Parameter Name="includeSubResources" alias="Include Sub Resources" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether to retrieve the sub resources once the parent matches the name.</Description>
      </Parameter>
      <Parameter Name="resourceAddress" alias="Resource Address" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource address. Can be partial (e.g. '192.168.').</Description>
      </Parameter>
      <Parameter Name="resourceUniqueIdentifier" alias="Resource Unique Identifier" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource unique identifier.</Description>
      </Parameter>
      <Parameter Name="maxResults" alias="Max Results" Type="int" Default="500" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number of resources to return.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All reservations for the resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="usageSummary" alias="Usage Summary" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specify the number used connected resources, this data will be available only on top level resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::FindResourcesInTimeRange resourceFamily resourceModel fromTime untilTime attributeValues showAllDomains resourceFullName exactName includeSubResources resourceAddress resourceUniqueIdentifier maxResults ?resultXml?</Syntax>
    <Syntax Lang="cSharp">FindResourcesInTimeRange(resourceFamily,resourceModel,fromTime,untilTime,attributeValues,showAllDomains,resourceFullName,exactName,includeSubResources,resourceAddress,resourceUniqueIdentifier,maxResults,out resources,out reservations,out usageSummary,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;FindResourcesInTimeRange&gt;
      &lt;resourceFamily&gt;{resourceFamily}&lt;/resourceFamily&gt;
      &lt;resourceModel&gt;{resourceModel}&lt;/resourceModel&gt;
      &lt;fromTime&gt;{fromTime}&lt;/fromTime&gt;
      &lt;untilTime&gt;{untilTime}&lt;/untilTime&gt;
      &lt;attributeValues&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributeValues&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;resourceFullName&gt;{resourceFullName}&lt;/resourceFullName&gt;
      &lt;exactName&gt;{exactName}&lt;/exactName&gt;
      &lt;includeSubResources&gt;{includeSubResources}&lt;/includeSubResources&gt;
      &lt;resourceAddress&gt;{resourceAddress}&lt;/resourceAddress&gt;
      &lt;resourceUniqueIdentifier&gt;{resourceUniqueIdentifier}&lt;/resourceUniqueIdentifier&gt;
      &lt;maxResults&gt;{maxResults}&lt;/maxResults&gt;
      &lt;/FindResourcesInTimeRange&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::FindResourcesInTimeRange "Generic Chassis" resourceModel "03/01/2012 00:00" "05/31/2012 23:59" {{"SW_Version1.3"}} "false" resourceFullName exactName includeSubResources resourceAddress resourceUniqueIdentifier maxResults resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234" FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] resources, reservations;
        string resultXml;
        testShellAPI.FindResourcesInTimeRange("Generic Chassis", "", new DateTime(2012, 3, 1, 0, 0, 0), new DateTime(2012, 5, 31, 23, 59, 59), new string[,]{{"SW_Version","1.3"}}, false,out resources,out reservations,out usageSummary,out resultXml);
      </Input>
      <Output Name="resources">
        {{"Index","Name","Description","Address","FullName","FullAddress","ResourceFamilyName","ResourceModelName","Status", "Permissions", "ConnectedTo", "FullPath"},
        {"1","Router 1234","a new description for the resource","192.168.1.201","Lab Routers/Router 1234","192.168.1.201","Generic Chassis","Generic Chassis Model","Available","ReadOnly"}}
      </Output>
      <Output Name="reservations">{{"ResourceIndex","ReservationName","Owner","StartTime","EndTime"}}</Output>
      <Output Name="usageSummary">{{"ResourceIndex", "NumOfReserved", "NumOfShared", "NumOfNotInReservation"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234" FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="reservations" src="" />
      <Output Name="usageSummary" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;FindResourcesInTimeRange&gt;
        &lt;resourceFamily&gt;Generic Chassis&lt;/resourceFamily&gt;
        &lt;resourceModel&gt;&lt;/resourceModel&gt;
        &lt;fromTime&gt;03/01/2012 00:00&lt;/fromTime&gt;
        &lt;untilTime&gt;05/31/2012 23:59&lt;/untilTime&gt;
        &lt;attributeValues&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;SW_Version&lt;/Name&gt;
        &lt;Value&gt;1.3&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributeValues&gt;
        &lt;showAllDomains&gt;true&lt;/showAllDomains&gt;
        &lt;resourceFullName&gt;&lt;/resourceFullName&gt;
        &lt;exactName&gt;&lt;/exactName&gt;
        &lt;includeSubResources&gt;true&lt;/includeSubResources&gt;
        &lt;resourceAddress&gt;&lt;/resourceAddress&gt;
        &lt;resourceUniqueIdentifier&gt;&lt;/resourceUniqueIdentifier&gt;
        &lt;maxResults&gt;500&lt;/maxResults&gt;
        &lt;/FindResourcesInTimeRange&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" Description="a new description for the resource" Address="192.168.1.201" FullName="Lab Routers/Router 1234" FullPath="Lab Routers/Router 1234" FullAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Status="Available" Permission="ReadOnly"&gt;
        &lt;Reservations/&gt;
        &lt;UsageSummary NumOfNotInReservation="130" NumOfReserved="14" NumOfShared="0"/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetReservationResourcesPositions" Title="Get resource positions in a reservation." Lang="all" Category="Reservation operations\Resources">
    <Description>Retrieves the x/y coordinates for all resources in the reservation's diagram.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="layout" alias="Diagram Layout" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All the resources and their positions in the diagram.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationResourcesPositions reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationResourcesPositions(reservationId,out layout,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetReservationResourcesPositions&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetReservationResourcesPositions&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationResourcesPositions $reservationId resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] layout;
        string resultXml;
        testShellAPI.GetReservationResourcesPositions(reservationId, out layout, out resultXml);
      </Input>
      <Output Name="layout" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="layout" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationResourcesPositions&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetReservationResourcesPositions&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetRoutesSolution" Title="Get solution for specified routes." Lang="all" Category="Reservation operations\Routing">
    <Description>Calculates possible routes between the supplied endpoints and returns their details, without saving, connecting or modifying the reservation in any way.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourcesFullPath" alias="Resources Full Name" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: RootResourceName/ResourceName</Description>
      </Parameter>
      <Parameter Name="targetResourcesFullPath" alias="Resources Full Name" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: RootResourceName/ResourceName</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional mapping or 'uni' for unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="maxHops" alias="Maximum Hops" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the maximum number or allowed hops.</Description>
      </Parameter>
      <Parameter Name="isShared" alias="Is Shared" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether these routes are shared. Shared routes can be used in more than one reservation.</Description>
      </Parameter>
      <Parameter Name="routes" alias="Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route values associated with the activated topologies.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetRoutesSolution reservationId sourceResourcesFullPath targetResourcesFullPath mappingType maxHops isShared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetRoutesSolution(reservationId,sourceResourcesFullName,targetResourcesFullName,mappingType,maxHops,isShared,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetRoutesSolution&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/sourceResourcesFullPath&gt;
      &lt;targetResourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/targetResourcesFullPath&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;maxHops&gt;{maxHops}&lt;/maxHops&gt;
      &lt;isShared&gt;{isShared}&lt;/isShared&gt;
      &lt;/GetRoutesSolution&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetRoutesSolution $reservationId {"Router 1234/Port 1"} {"GenericResource 1234/Port 1"} bi 2 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes;
        testShellAPI.GetRoutesSolution(reservationId,new string[]{"Router 1234/Port 1"},new string[]{"GenericResource 1234/Port 1"},MappingType.Bidirectional,2, YesNoOptions.No,out routes,out resultXml);
      </Input>
      <Output Name="routes">{{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetRoutesSolution&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;sourceResourcesFullPath&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;/sourceResourcesFullPath&gt;
        &lt;targetResourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;/targetResourcesFullPath&gt;
        &lt;mappingType&gt;bi&lt;/mappingType&gt;
        &lt;maxHops&gt;2&lt;/maxHops&gt;
        &lt;isShared&gt;0&lt;/isShared&gt;
        &lt;/GetRoutesSolution&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GenerateUtilizationReport" Title="Generate a utilization report." Lang="all" Category="Reporting\Lab management">
    <Description>Generates a utilization report for the specified resources. To generate a report for all resources, leave the resourceFullName and resourceModel parameters blank.</Description>
    <Parameters>
      <Parameter Name="resourceFamilyName" alias="Resource Family" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the resource family.</Description>
      </Parameter>
      <Parameter Name="fromDate" alias="From Date" Type="DateTime" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the start time and date.</Description>
      </Parameter>
      <Parameter Name="toDate" alias="To Date" Type="DateTime" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the end time and date.</Description>
      </Parameter>
      <Parameter Name="resourceFullName" alias="Resource Full Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName.</Description>
      </Parameter>
      <Parameter Name="resourceModelName" alias="Resource Model" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource model.</Description>
      </Parameter>
      <Parameter Name="includeChildResources" alias="Include Child Resources" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify whether to include child resources utilization.</Description>
      </Parameter>
      <Parameter Name="groupBy" alias="Group By" Type="UtilizationReportGroupByOption" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify how to group the utilization results: Resource, User, or Machine</Description>
        <MoreDescription Lang="tcl">Use 0 for Resource, 1 for User and 2 for Machine.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Resource, 1 for User and 2 for Machine.</MoreDescription>
      </Parameter>
      <Parameter Name="utilizationReportType" alias="Report Type" Type="UtilizationReportTypeOption" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the report type: Lock or Mapping.</Description>
        <MoreDescription Lang="tcl">Use 0 for Lock and 1 for Mapping.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Lock and 1 for Mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GenerateUtilizationReport resourceFamilyName fromDate toDate resourceFullName resourceModelName includeChildResources groupBy utilizationReportType ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GenerateUtilizationReport(resourceFamilyName,fromDate,toDate,resourceFullName,resourceModelName,includeChildResources,groupBy,utilizationReportType,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GenerateUtilizationReport&gt;
      &lt;resourceFamilyName&gt;{resourceFamilyName}&lt;/resourceFamilyName&gt;
      &lt;fromDate&gt;{fromDate}&lt;/fromDate&gt;
      &lt;toDate&gt;{toDate}&lt;/toDate&gt;
      &lt;resourceFullName&gt;{resourceFullName}&lt;/resourceFullName&gt;
      &lt;resourceModelName&gt;{resourceModelName}&lt;/resourceModelName&gt;
      &lt;includeChildResources&gt;{includeChildResources}&lt;/includeChildResources&gt;
      &lt;groupBy&gt;{groupBy}&lt;/groupBy&gt;
      &lt;utilizationReportType&gt;{utilizationReportType}&lt;/utilizationReportType&gt;
      &lt;/GenerateUtilizationReport&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GenerateUtilizationReport "Router" "03/01/2012 00:00" "05/31/2012 23:59" "" "" 0 0 0 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.GenerateUtilizationReport("Router", new DateTime(2012, 3, 1, 0, 0, 0), new DateTime(2012, 5, 31, 23, 59, 59), "", "", YesNoOptions.No, UtilizationReportGroupByOption.Resource, UtilizationReportTypeOption.Lock, out resultXml);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GenerateUtilizationReport&gt;
        &lt;resourceFamilyName&gt;Router&lt;/resourceFamilyName&gt;
        &lt;fromDate&gt;03/01/2012 00:00&lt;/fromDate&gt;
        &lt;toDate&gt;05/31/2012 23:59&lt;/toDate&gt;
        &lt;resourceFullName&gt;&lt;/resourceFullName&gt;
        &lt;resourceModelName&gt;&lt;/resourceModelName&gt;
        &lt;includeChildResources&gt;0&lt;/includeChildResources&gt;
        &lt;groupBy&gt;0&lt;/groupBy&gt;
        &lt;utilizationReportType&gt;0&lt;/utilizationReportType&gt;
        &lt;/GenerateUtilizationReport&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetActiveTopologyNames" Title="Retrieve a user's reserved topologies." Lang="all" Category="Reservation operations\Topologies">
    <Description>Retrieves all active reserved topologies for the current (logged in) user.</Description>
    <Parameters>
      <Parameter Name="reservedTopologyNames" alias="Topologies" Type="string[]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The list of active topologies reserved for the current user.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetActiveTopologyNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetActiveTopologyNames(out reservedTopologyNames,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">&lt;GetActiveTopologyNames&gt;&lt;/GetActiveTopologyNames&gt;</Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetActiveTopologyNames resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Temp Automation Resources/TP1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string[] reservedTopologyNames;
        testShellAPI.GetActiveTopologyNames(out reservedTopologyNames,out resultXml);
      </Input>
      <Output Name="reservedTopologyNames">{"Temp Automation Resources/TP1"}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Temp Automation Resources/TP1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservedTopologyNames" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>&lt;GetActiveTopologyNames&gt;&lt;/GetActiveTopologyNames&gt;</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Temp Automation Resources/TP1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetAllUsersDetails" Title="Retrieve all users and user settings." Lang="all" Category="User management\Users">
    <Description>Retrieves all users and their settings.</Description>
    <Parameters>
      <Parameter Name="userDetails" alias="Users Details" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>User settings for the specified user.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetAllUsersDetails ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetAllUserDetails(out userDetails,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">&lt;GetAllUsersDetails&gt;&lt;/GetAllUsersDetails&gt;</Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetAllUsersDetails resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetAllUsersDetails();
      </Input>
      <Output Name="userDetails">
        {{"Name","Email","IsAdmin","IsActive","IsDomainAdmin","DomainName"},{"admin","admin@work.com","True","True","False",""},{"User1234","user1234@work.com","True","True","False",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="userDetails" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>&lt;GetAllUsersDetails&gt;&lt;/GetAllUsersDetails&gt;</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetAttributeValue" Title="Retrieve an attribute's value." Lang="all" Category="Inventory operations\Attributes">
    <Description>Retrieves the value of the specified attribute</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="attributeName" alias="Attribute Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the attribute name.</Description>
      </Parameter>
      <Parameter Name="attributeValue" alias="Attribute Value" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The attribute value.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetAttributeValue resourceFullPath attributeName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetAttributeValue(resourceFullPath,attributeName,out attributeValue,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetAttributeValue&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;attributeName&gt;{attributeName}&lt;/attributeName&gt;
      &lt;/GetAttributeValue&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetAttributeValue "Router 1234" "SW_Version" resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Name="SW_Version" Value="1.3"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string attributeValue;
        string resultXml;
        testShellAPI.GetAttributeValue("Router 1234", "SW_Version", out attributeValue, out resultXml);
      </Input>
      <Output Name="attributeValue">1.3</Output>
      <Output Name="resultXml">&lt;ResponseInfo Name="SW_Version" Value="1.3"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="attributeValue" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetAttributeValue&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;attributeName&gt;SW_Version&lt;/attributeName&gt;
        &lt;/GetAttributeValue&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Name="SW_Version" Value="1.3"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetCategoriesOfTopology" Title="Retrieves all categories of a given topology." Lang="all" Category="Inventory management\Topologies">
    <Description>Retrieves all categories of given topology.</Description>
    <Parameters>
      <Parameter Name="topologyPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="categories" alias="Topology's Categories" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specify a list of all categories belong to given topology.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetCategoriesOfTopology topologyPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetCategoriesOfTopology(topologyPath, out categories, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetCategoriesOfTopology&gt;
      &lt;topologyPath&gt;{topologyPath}&lt;/topologyPath&gt;
      &lt;/GetCategoriesOfTopology&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        ::TestShellAPI::GetCategoriesOfTopology "Folder1/exampleTopology" resultXml
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="CategoriesOfTopologyInfo"&gt;
        &lt;Categories&gt;
        &lt;Category Name="sampleCategory" Value="hello"/&gt;
        &lt;Category Name="Category2" Value="bye"/&gt;
        &lt;/Categories&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetCategoriesOfTopology("Folder1/exampleTopology");
      </Input>
      <Output Name="Categories">{['sampleCategory', 'Category2'; 'hello', 'bye']}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Categories&gt;
        &lt;Category Name="sampleCategory" Value="hello"/&gt;
        &lt;Category Name="Category2" Value="bye"/&gt;
        &lt;/Categories&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetCategoriesOfTopology&gt;
        &lt;topologyPath&gt;Folder1/exampleTopology&lt;/topologyPath&gt;
        &lt;/GetCategoriesOfTopology&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="CategoriesOfTopologyInfo"&gt;
        &lt;Categories&gt;
        &lt;Category Name="sampleCategory" Value="hello"/&gt;
        &lt;Category Name="Category2" Value="bye"/&gt;
        &lt;/Categories&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="GetCurrentReservations" Title="Retrieve current reservations." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Retrieves current reservations for the specified owner. If an owner is not provided, this method retrieves all current reservations.</Description>
    <Parameters>
      <Parameter Name="reservationOwner" alias="Reservation Owner" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the user name of the reservation owner.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All current reservations for the specified owner, or all current reservations (if no owner is specified).</Description>
      </Parameter>
      <Parameter Name="permittedUsers" alias="Permitted Users" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Lists users with [active | full] access to the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetCurrentReservations reservationOwner ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetCurrentReservations(reservationOwner,out reservations,out permittedUsers,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetCurrentReservations&gt;
      &lt;reservationOwner&gt;{reservationOwner}&lt;/reservationOwner&gt;
      &lt;/GetCurrentReservations&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetCurrentReservations admin resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="65b45c9b-7694-4a42-b8fa-0239109b5246" Name="Reservation" StartTime="2012-06-19T14:30:00" EndTime="2012-06-19T16:30:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Overtime" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-19T14:30:23" ModificationDate="2012-06-19T14:37:55" DomainName="Global"&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/Topology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] reservations;
        string resultXml;
        testShellAPI.GetCurrentReservations(admin, out reservations,out permittedUsers, out resultXml);
      </Input>
      <Output Name="reservations">
        {{"Id","Name","Description","Start","End","Owner","Booked","Status","RecurrenceType","Topologies","ActualEndTime","CreateDate","ModificationDate","Provisioning Status","DomainName"},
        {"65b45c9b-7694-4a42-b8fa-0239109b5246","Reservation","","6/19/2012 2:30:00 PM","6/19/2012 4:30:00 PM","admin","True","Overtime","None","Topologies/Lab 1/Topology,Topologies/Lab 1/TrafficTopology,Topologies/Lab 1/TrafficTopology1","","6/19/2012 2:30:23 PM","6/19/2012 2:37:55 PM","Pending","Global"}}
      </Output>
      <Output Name="permittedUsers">
        {{ReservationId, UserName}
        {65b45c9b-7694-4a42-b8fa-0239109b5246, admin}
        {65b45c9b-7694-4a42-b8fa-0239109b5246, user1}
        {65b45c9b-7694-4a42-b8fa-0239109b5246, user2}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="65b45c9b-7694-4a42-b8fa-0239109b5246" Name="Reservation" StartTime="2012-06-19T14:30:00" EndTime="2012-06-19T16:30:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Overtime" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-19T14:30:23" ModificationDate="2012-06-19T14:37:55" DomainName="Global"&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/Topology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservations" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetCurrentReservations&gt;
        &lt;reservationOwner&gt;admin&lt;/reservationOwner&gt;
        &lt;/GetCurrentReservations&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="65b45c9b-7694-4a42-b8fa-0239109b5246" Name="Reservation" StartTime="2012-06-19T14:30:00" EndTime="2012-06-19T16:30:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Overtime" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-19T14:30:23" ModificationDate="2012-06-19T14:37:55" DomainName="Global"&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/Topology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology&lt;/TopologyName&gt;
        &lt;TopologyName&gt;Topologies/Lab 1/TrafficTopology1&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;permittedUsers&gt;&lt;/permittedUsers&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetDomainDetails" Title="Retrieves a domain's details including groups, topologies and resources associated with the specified domain." Lang="all" Category="User management\Domains">
    <Description>Retrieves a domain's details including groups, topologies and resources associated with the specified domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="domainTopologiesFolder" alias="Domain Topologies Folder" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The topologies folder of the domain.</Description>
      </Parameter>
      <Parameter Name="domainGroups" alias="Groups" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Groups and their associated values for the specified domain.</Description>
      </Parameter>
      <Parameter Name="domainTopologies" alias="Topologies" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topologies and their associated values for the specified domain.</Description>
      </Parameter>
      <Parameter Name="domainResources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resources and their associated values for the specified domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetDomainDetails domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetDomainDetails(domainName,out domainTopologiesFolder,out domainGroups,out domainTopologies,out domainResources,out resultXml);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;GetDomainDetails&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/GetDomainDetails&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetDomainDetails Domain1 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Domain1" Description="" TopologiesFolder="Root\Domain1 topologies"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Animals" Role="Regular"&gt;&lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;Topologies&gt;
        &lt;Topology Name="Topology" Description=""&gt;&lt;/Topology&gt;
        &lt;/Topologies&gt;
        &lt;Resources&gt;
        &lt;Resource Name="b1" Path="b1"&gt;&lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string domainTopologiesFolder;
        string[,] domainGroups, domainTopologies, domainResources;
        string resultXml;
        testShellAPI.GetDomainDetails("Domain1",out domainTopologiesFolder,out domainGroups,out domainTopologies,out domainResources,out resultXml);
      </Input>
      <Output Name="domainTopologiesFolder">"Root\Domain1 topologies"</Output>
      <Output Name="domainGroups">{{"Animals","","Regular"}}</Output>
      <Output Name="domainTopologies">{{"Topology",""}}</Output>
      <Output Name="domainResources">{{"b1","b1"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Domain1" Description="" TopologiesFolder="Root\Domain1 topologies"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Animals" Role="Regular"&gt;&lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;Topologies&gt;
        &lt;Topology Name="Topology" Description=""&gt;&lt;/Topology&gt;
        &lt;/Topologies&gt;
        &lt;Resources&gt;
        &lt;Resource Name="b1" Path="b1"&gt;&lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="domainTopologiesFolder" src="" />
      <Output Name="domainGroups" src="" />
      <Output Name="domainTopologies" src="" />
      <Output Name="domainResources" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetDomainDetails&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;/GetDomainDetails&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Domain1" Description="" TopologiesFolder="Root\Domain1 topologies"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Animals" Role="Regular"&gt;&lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;Topologies&gt;
        &lt;Topology Name="Topology" Description=""&gt;&lt;/Topology&gt;
        &lt;/Topologies&gt;
        &lt;Resources&gt;
        &lt;Resource Name="b1" Path="b1"&gt;&lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetFolderContent" Title="Retrieve content for a specified path." Lang="all" Category="Inventory management\Folders">
    <Description>Retrieves content for the specified path.</Description>
    <Parameters>
      <Parameter Name="fullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="content" alias="Content" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Content and content parameters for the specified resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetFolderContent fullPath showAllDomains ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetFolderContent(fullPath, showAllDomains,out content,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetFolderContent&gt;
      &lt;fullPath&gt;{fullPath}&lt;/fullPath&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;/GetFolderContent&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetFolderContent "Lab Routers" 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ContentArray&gt;
        &lt;Content Name="Router 1234" Type="Resource"/&gt;
        &lt;Content Name="Router 4321" Type="Resource"/&gt;
        &lt;/ContentArray&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetFolderContent("Lab Routers");
      </Input>
      <Output Name="content">{{"Name","Type"},{"Router 1234","Resource","ReadWrite"},{"Router 4321","Resource","ReadWrite"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ContentArray&gt;
        &lt;Content Name="Router 1234" Type="Resource" Permissions="ReadOnly"/&gt;
        &lt;Content Name="Router 4321" Type="Resource" Permissions="ReadOnly"/&gt;
        &lt;/ContentArray&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="content" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetFolderContent&gt;
        &lt;fullPath&gt;Lab Routers&lt;/fullPath&gt;
        &lt;showAllDomains&gt;true&lt;/showAllDomains&gt;
        &lt;/GetFolderContent&gt;
      </Input>UpdateRouteAliasesInReservation
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ContentArray&gt;
        &lt;Content Name="Router 1234" Type="Resource" Permissions="ReadOnly"/&gt;
        &lt;Content Name="Router 4321" Type="Resource" Permissions="ReadOnly"/&gt;
        &lt;/ContentArray&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetGroupDomains" Title="Retrieve a group's domains." Lang="all" Category="User management\Groups">
    <Description>Retrieves all domains associated with a group.</Description>
    <Parameters>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="domains" alias="Domains" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="true" Direction="out">
        <Description>All domains associated with the specified group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetGroupDomains groupName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetGroupDomains(groupName,out domains,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetGroupDomains&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;/GetGroupDomains&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetGroupDomains QA_Users resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetGroupDomains("QA_Users");
      </Input>
      <Output Name="domains">{{"Name", "Description", "Id"}, {"Global", "A domain that includes all available resources", "dbaf480c-09f7-46d3-a2e2-e35d3e374a16"}}</Output>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="domains" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetGroupDomains&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;/GetGroupDomains&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetGroupsDetails" Title="Retrieve all system groups." Lang="all" Category="User management\Groups">
    <Description>Retrieves all groups, including members, roles and associated domains for each group.</Description>
    <Parameters>
      <Parameter Name="groups" alias="Groups" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Retrieves all groups in the system, together with the description and role for each group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetGroupsDetails ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetGroupsDetails(out groups,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">&lt;GetGroupsDetails&gt;&lt;/GetGroupsDetails&gt;</Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetGroupsDetails resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights." GroupRole="SystemAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="Lab1"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Lab1" Description="" Id="71aa4f7e-174d-4df1-b50a-59e98f09005c"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights." GroupRole="DomainAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="true" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="RND_Users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetGroupsDetails();
      </Input>
      <Output Name="groups">{{"Name","Description"}, {"System Administrators","Built in group, all members have administrative rights."}, {"Domain Administrators","Built in group, all members have administrative Domain rights."}, {"QA_Users","QA users"}, {"RND users",""}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights." GroupRole="SystemAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="Lab1"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Lab1" Description="" Id="71aa4f7e-174d-4df1-b50a-59e98f09005c"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights."  GroupRole="DomainAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="true" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="RND_Users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="groups" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>&lt;GetGroupsDetails&gt;&lt;/GetGroupsDetails&gt;</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights." GroupRole="SystemAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="admin" IsAdmin="true" IsActive="true" IsDomainAdmin="false"&gt;
        &lt;Groups&gt;
        &lt;Group Name="System Administrators" Description="Built in group, all members have administrative rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="Lab1"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Lab1" Description="" Id="71aa4f7e-174d-4df1-b50a-59e98f09005c"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights." GroupRole="DomainAdmin"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="true" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Domain Administrators" Description="Built in group, all members have administrative Domain rights."&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users&gt;
        &lt;User Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;User Name="User2345" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email=""&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;Group Name="QA_Users" Description="QA users"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/User&gt;
        &lt;/Users&gt;
        &lt;/Group&gt;
        &lt;Group Name="RND_Users" GroupRole="Regular"&gt;
        &lt;TestShellDomains&gt;
        &lt;TestShellDomain Name="Global" Description="A domain that includes all available resources" Id="dbaf480c-09f7-46d3-a2e2-e35d3e374a16"/&gt;
        &lt;/TestShellDomains&gt;
        &lt;Users/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetLockedResources" Title="Retrieve a list of locked resources." Lang="all" Category="Inventory operations\Locking &amp; unlocking">
    <Description>Retrieves locked resources for a specific user, a specific computer, or a specific folder. If none of these are specified, this method retrieves the list of locked resources for all users, on all machines, in all folders.</Description>
    <Parameters>
      <Parameter Name="user" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a user name to retrieve locked resources for that user.</Description>
      </Parameter>
      <Parameter Name="machine" alias="Machine Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify a machine name to retrieve locked resources for that computer.</Description>
      </Parameter>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Retrieves all reservations for the resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resources and resource values associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetLockedResources user machine folderFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetLockedResources(user,machine,folderFullPath,out reservations,out resources,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetLockedResources&gt;
      &lt;user&gt;{user}&lt;/user&gt;
      &lt;machine&gt;{machine}&lt;/machine&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;/GetLockedResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetLockedResources admin "" "" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Name="Immediate reservation" Owner="admin" Created="2012-06-20T15:05:06"&gt;
        &lt;LockedResources&gt;
        &lt;Resource Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;Resource Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;/LockedResources&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] reservations,resources;
        testShellAPI.GetLockedResources("admin","","",out reservations,out resources,out resultXml);
      </Input>
      <Output Name="reservations">{{"Index","Name","Owner","Created"},{"1","Immediate reservation","admin","6/20/2012 3:05:06 PM"}}</Output>
      <Output Name="resources">
        {{"ReservationIndex","ReservationName","Name","Address","FullAddress","RootAddress","ResourceModelName","FolderFullPath","Excluded"},
        {"1","Immediate reservation","GenericResource 1234/Port 2","2","192.168.1.20/2","192.168.1.20","Generic Port Model","Temp Automation Resources","False"},
        {"1","Immediate reservation","GenericResource 1234/Port 1","1","192.168.1.20/1","192.168.1.20","Generic Port Model","Temp Automation Resources","False"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Name="Immediate reservation" Owner="admin" Created="2012-06-20T15:05:06"&gt;
        &lt;LockedResources&gt;
        &lt;Resource Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;Resource Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;/LockedResources&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservations" src="" />
      <Output Name="resources" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetLockedResources&gt;
        &lt;user&gt;admin&lt;/user&gt;
        &lt;machine&gt;&lt;/machine&gt;
        &lt;folderFullPath&gt;&lt;/folderFullPath&gt;
        &lt;/GetLockedResources&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Name="Immediate reservation" Owner="admin" Created="2012-06-20T15:05:06"&gt;
        &lt;LockedResources&gt;
        &lt;Resource Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;Resource Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="true" Excluded="false"/&gt;
        &lt;/LockedResources&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetReservationDetails" Title="Retrieve reservation details and parameters." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Retrieves all details and parameters for a specified reservation, including its resources, routes and route segments, topologies, and reservation conflicts.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="name" alias="Reservation Name" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The name of the reservation associated with the specified reservation ID.</Description>
      </Parameter>
      <Parameter Name="description" alias="Description" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The description of the reservation associated with the specified reservation ID.</Description>
      </Parameter>
      <Parameter Name="startTime" alias="Start Date Time" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The start time and date for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="endTime" alias="End Date Time" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The end time and date for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="reservationStatus" alias="Reservation Status" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Indicates the current reservation status.</Description>
      </Parameter>
      <Parameter Name="provisioningStatus" alias="Provisioning Status" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Indicates the current provisioning status.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resources and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="conflicts" alias="Resource Conflicts" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource conflicts and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="topologies" alias="Topologies" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topologies and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="topologyResources" alias="Topology Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topology resources and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="topologyRoutes" alias="Route" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topology routes in the specified reservation.</Description>
      </Parameter>
      <Parameter Name="topologyRouteSegments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Segment details for topology routes in the specified reservation. Each route is comprised of one or more segments.</Description>
      </Parameter>
      <Parameter Name="topologyInstructions" alias="Topology Instructions" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topology instructions.</Description>
      </Parameter>
      <Parameter Name="connectedRoutes" alias="Connected Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes currently connected in the specified reservation.</Description>
      </Parameter>
      <Parameter Name="connectedRoutesSegments " alias="Connected Routes Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Segment details for connected routes in the specified reservation. Each route is comprised of one or more segments.</Description>
      </Parameter>
      <Parameter Name="reservationRoutes" alias="Reservation Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes in the specified reservation.</Description>
      </Parameter>
      <Parameter Name="reservationRouteSegments" alias="Reservation Route Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Segment details for routes in the specified reservation. Each route is comprised of one or more segments.</Description>
      </Parameter>
      <Parameter Name="permittedUsers" alias="Permitted Users" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Lists users with [active | full] access to the specified reservation.</Description>
      </Parameter>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The domain name of the specified reservation.</Description>
      </Parameter>
      <Parameter Name="topologyResourcesAttributes" alias="Topology Resources Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Topology resources and their associated attribute changes for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="connectors" alias="Connectors" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Visual connectors associated with the specified reservation.</Description>
      </Parameter>
      <Parameter Name="ConnectorAttributes" alias="ConnectorAttributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Visual connectors attributes associated with a specified connector.</Description>
      </Parameter>
      <Parameter Name="LiveStatus" alias="liveStatus" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Gets the live status of the reservations.</Description>
      </Parameter>
      <Parameter Name="services" alias="Services" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of service instances.</Description>
      </Parameter>
      <Parameter Name="serviceAttributes" alias="ServiceAttributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of attributes of the services.</Description>
      </Parameter>
      <Parameter Name="apps" alias="Apps" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Apps associated with the specified reservation..</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationDetails reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationDetails(reservationId, out name, out description, out startTime, out endTime,out reservationStatus, out provisioningStatus, out resources, out conflicts, out topologies,out topologyResources, out topologyRoutes, out topologyRouteSegments, out topologyInstructions, out connectedRoutes,out connectedRoutesSegments,out reservationRoutes, out reservationRouteSegments, out permittedUsers, out domainName, out topologyResourcesAttributes, out connectors, out connectorAttributes, out liveStatus,out services, out serviceAttributes, out apps, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetReservationDetails&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetReservationDetails&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationDetails $reservationId resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationDescription Id=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot; Name=&quot;Rerservation&quot; StartTime=&quot;03/02/2015 18:21:00&quot; EndTime=&quot;03/02/2015 20:21:00&quot; RecurrenceType=&quot;None&quot; Owner=&quot;admin&quot; Booked=&quot;true&quot; Status=&quot;Started&quot; ProvisioningStatus=&quot;Not Run&quot; ActualEndTime=&quot;&quot; CreateDate=&quot;03/02/2015 18:21:56&quot; ModificationDate=&quot;03/02/2015 18:21:56&quot; DomainName=&quot;Global&quot;&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Environment-03-02-2015 18-21&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;TopologiesInfo&gt;
        &lt;Topology Name=&quot;Environment-03-02-2015 18-21&quot; Alias=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Type&gt;Regular&lt;/Type&gt;
        &lt;State&gt;Pending&lt;/State&gt;
        &lt;/Topology&gt;
        &lt;/TopologiesInfo&gt;
        &lt;PermittedUsers&gt;
        &lt;PermittedUser&gt;admin&lt;/PermittedUser&gt;
        &lt;/PermittedUsers&gt;
        &lt;Resources/&gt;
        &lt;TopologiesReservedResources/&gt;
        &lt;Conflicts/&gt;
        &lt;TopologiesRouteInfo/&gt;
        &lt;TopologiesResourcesAttributeInfo/&gt;
        &lt;TopologiesInstructionsInfo&gt;
        &lt;TopologyInstructions TopologyName=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Instructions/&gt;
        &lt;/TopologyInstructions&gt;
        &lt;/TopologiesInstructionsInfo&gt;
        &lt;ActiveRoutesInfo/&gt;
        &lt;RequestedRoutesInfo/&gt;
        &lt;Connectors/&gt;
        &lt;ReservationLiveStatus ReservationId=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot;/&gt;
        &lt;Services/&gt;
        &lt;/ReservationDescription&gt;
        &lt;Apps&gt;
        &lt;ReservedApp Name="MonitoringApp"&gt;
        &lt;LogicalResource Family="Monitoring" Model="DefaultMonitoring"/&gt;
        &lt;/ReservedApp&gt;
        &lt;/Apps&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string name, description;
        string startTime,endTime;
        string reservationStatus, provisioningStatus;
        string domainName;
        string[,] resources, conflicts, topologies, topologyResources, topologyRoutes, topologyRouteSegments,topologyInstructions, connectedRoutes, connectedRoutesSegments, reservationRoutes, reservationRouteSegments, permittedUsers, topologyResourcesAttributes, connectors, connectorAttributes, apps;
        string resultXml;
        testShellAPI.GetReservationDetails(reservationId,out name,out description,out startTime,out endTime,out reservationStatus,out provisioningStatus,out resources,out conflicts,out topologies,out topologyResources,out topologyRoutes,out topologyRouteSegments,out topologyInstructions,out connectedRoutes,out connectedRoutesSegments,out reservationRoutes,out reservationRouteSegments,out permittedUsers,out domainName,out topologyResourcesAttributes, out connectors, out connectorAttributes, out liveStatus,out services, out servicrAttributes, out apps, out resultXml);
      </Input>
      <Output Name="name">test reservation</Output>
      <Output Name="description">My Reservation</Output>
      <Output Name="startTime">01/01/2015 10:00:00</Output>
      <Output Name="endTime">01/01/2015 11:00:00</Output>
      <Output Name="reservationStatus">Pending</Output>
      <Output Name="provisioningStatus">Ready</Output>
      <Output Name="resources">{{"Name","FolderFullPath","FullAddress","Shared","Availability","Locked","Released","ResourceFamilyName","ResourceModelName"}}</Output>
      <Output Name="conflicts">{{"ResourceName","ConflictType","Topology","ConflictWith","ConflictWithUser","ConflictStarted","ConflictPlannedEndTime"}}</Output>
      <Output Name="topologies">{{"Index","Name","Type","State"}}</Output>
      <Output Name="topologyResources">{{"TopologyIndex","Name","FullAddress","Shared","Availability","Locked","Released","ResourceFamilyName","ResourceModelName"}}</Output>
      <Output Name="topologyRoutes">{{"Index","TopologyIndex","Source","Target","RouteType","Alias","Shared"}}</Output>
      <Output Name="topologyRouteSegments">{{"RouteIndex","Source","Target"}}</Output>
      <Output Name="topologyInstructions">{{"topology1","topology2","topology3"}}</Output>
      <Output Name="connectedRoutes">{{"Index","Source","Target","RouteType","Alias","Shared"}}</Output>
      <Output Name="connectedRoutesSegments">{{"RouteIndex","Source","Target"}}</Output>
      <Output Name="reservationRoutes">{{"Index","Source","Target","RouteType","Alias","Shared"}}</Output>
      <Output Name="reservationRoutesSegments">{{"RouteIndex","Source","Target"}}</Output>
      <Output Name="permittedUsers">{{"user1","user2","user3"}}</Output>
      <Output Name="domainName">Global</Output>
      <Output Name="topologyResourcesAttributes">
        {{"TopologyIndex","Name","Alias", "AttributeName", "AttributeValue", Usage},
        {"1", "t2", "test*", "Protocol", "Transparent", "Additional"}}
      </Output>
      <Output Name="connectors">
        {{"Index","Source","Target","Direction", "Alias"},
        {"1","Server1/Port1", "Server2/Port2", "Bi", "Connector1"}}
      </Output>
      <Output Name="connectorAttributes">
        {{"ConnectorIndex","Name","Value"},
        {"1","Duplex", "Half"}}
      </Output>
      <Output Name="liveStatus">
        {{"Id","LiveStatusName","LiveStatusDescription"},
        {"90205def-6c53-4cf5-abfa-632b8486a968","Pass",""}}
      </Output>
      <Output Name="services">
        {{"Index","ServiceName","Alias"},
        {"1","Sql1","Sql64"}}
      </Output>
      <Output Name="serviceAttributes">
        {{"ServiceInstanceIndex","Name","Value"},
        {"1","Duplex", "Half"}}
      </Output>
      <Output Name="apps">
        {{"Name","LogicalResourceFamily","LogicalResourceModel"},
        {"App name","Deployed app family","Deployed app model"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationDescription Id=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot; Name=&quot;Environment-03-02-2015 18-21&quot; StartTime=&quot;03/02/2015 18:21:00&quot; EndTime=&quot;03/02/2015 20:21:00&quot; RecurrenceType=&quot;None&quot; Owner=&quot;admin&quot; Booked=&quot;true&quot; Status=&quot;Started&quot; ProvisioningStatus=&quot;Not Run&quot; ActualEndTime=&quot;&quot; CreateDate=&quot;03/02/2015 18:21:56&quot; ModificationDate=&quot;03/02/2015 18:21:56&quot; DomainName=&quot;Global&quot;&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Environment-03-02-2015 18-21&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;TopologiesInfo&gt;
        &lt;Topology Name=&quot;Environment-03-02-2015 18-21&quot; Alias=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Type&gt;Regular&lt;/Type&gt;
        &lt;State&gt;Pending&lt;/State&gt;
        &lt;/Topology&gt;
        &lt;/TopologiesInfo&gt;
        &lt;PermittedUsers&gt;
        &lt;PermittedUser&gt;admin&lt;/PermittedUser&gt;
        &lt;/PermittedUsers&gt;
        &lt;Resources/&gt;
        &lt;TopologiesReservedResources/&gt;
        &lt;Conflicts/&gt;
        &lt;TopologiesRouteInfo/&gt;
        &lt;TopologiesResourcesAttributeInfo/&gt;
        &lt;TopologiesInstructionsInfo&gt;
        &lt;TopologyInstructions TopologyName=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Instructions/&gt;
        &lt;/TopologyInstructions&gt;
        &lt;/TopologiesInstructionsInfo&gt;
        &lt;ActiveRoutesInfo/&gt;
        &lt;RequestedRoutesInfo/&gt;
        &lt;Connectors/&gt;
        &lt;ReservationLiveStatus ReservationId=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot;/&gt;
        &lt;Services/&gt;
        &lt;/ReservationDescription&gt;
        &lt;Apps&gt;
        &lt;ReservedApp Name="MonitoringApp"&gt;
        &lt;LogicalResource Family="Monitoring" Model="DefaultMonitoring"/&gt;
        &lt;/ReservedApp&gt;
        &lt;/Apps&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="name" src="" />
      <Output Name="description" src="" />
      <Output Name="startTime" src="" />
      <Output Name="endTime" src="" />
      <Output Name="reservationStatus" src="" />
      <Output Name="provisioningStatus" src="" />
      <Output Name="resources" src="" />
      <Output Name="conflicts" src="" />
      <Output Name="topologies" src="" />
      <Output Name="topologyResources" src="" />
      <Output Name="topologyRoutes" src="" />
      <Output Name="topologyRouteSegments" src="" />
      <Output Name="topologyInstructions" src="" />
      <Output Name="connectedRoutes" src="" />
      <Output Name="connectedRoutesSegments" src="" />
      <Output Name="reservationRoutes" src="" />
      <Output Name="reservationRouteSegments" src="" />
      <Output Name="permittedUsers" src="" />
      <Output Name="domainName" src="" />
      <Output Name="topologyResourcesAttributes" src="" />
      <Output Name="connectors" src="" />
      <Output Name="connectorAttributes" src="" />
      <Output Name="liveStatus" src="" />
      <Output Name="services" src="" />
      <Output Name="serviceAttributes" src="" />
      <Output Name="apps" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationDetails&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetReservationDetails&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationDescription Id=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot; Name=&quot;Environment-03-02-2015 18-21&quot; StartTime=&quot;03/02/2015 18:21:00&quot; EndTime=&quot;03/02/2015 20:21:00&quot; RecurrenceType=&quot;None&quot; Owner=&quot;admin&quot; Booked=&quot;true&quot; Status=&quot;Started&quot; ProvisioningStatus=&quot;Not Run&quot; ActualEndTime=&quot;&quot; CreateDate=&quot;03/02/2015 18:21:56&quot; ModificationDate=&quot;03/02/2015 18:21:56&quot; DomainName=&quot;Global&quot;&gt;
        &lt;Topologies&gt;
        &lt;TopologyName&gt;Environment-03-02-2015 18-21&lt;/TopologyName&gt;
        &lt;/Topologies&gt;
        &lt;TopologiesInfo&gt;
        &lt;Topology Name=&quot;Environment-03-02-2015 18-21&quot; Alias=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Type&gt;Regular&lt;/Type&gt;
        &lt;State&gt;Pending&lt;/State&gt;
        &lt;/Topology&gt;
        &lt;/TopologiesInfo&gt;
        &lt;PermittedUsers&gt;
        &lt;PermittedUser&gt;admin&lt;/PermittedUser&gt;
        &lt;/PermittedUsers&gt;
        &lt;Resources/&gt;
        &lt;TopologiesReservedResources/&gt;
        &lt;Conflicts/&gt;
        &lt;TopologiesRouteInfo/&gt;
        &lt;TopologiesResourcesAttributeInfo/&gt;
        &lt;TopologiesInstructionsInfo&gt;
        &lt;TopologyInstructions TopologyName=&quot;Environment-03-02-2015 18-21&quot;&gt;
        &lt;Instructions/&gt;
        &lt;/TopologyInstructions&gt;
        &lt;/TopologiesInstructionsInfo&gt;
        &lt;ActiveRoutesInfo/&gt;
        &lt;RequestedRoutesInfo/&gt;
        &lt;Connectors/&gt;
        &lt;ReservationLiveStatus ReservationId=&quot;caf0324e-680c-4555-8620-bcdab99de690&quot;/&gt;
        &lt;Services/&gt;
        &lt;/ReservationDescription&gt;
        &lt;Apps&gt;
        &lt;ReservedApp Name="MonitoringApp"&gt;
        &lt;LogicalResource Family="Monitoring" Model="DefaultMonitoring"/&gt;
        &lt;/ReservedApp&gt;
        &lt;/Apps&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetReservationInputs" Title="Retrieves all topology inputs for a specified reservation." Lang="all" Category="Reservation operations\Topologies">
    <Description>Retrieves all topology inputs for a specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Global inputs associated with the specified reservation.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Requirements inputs associated with the specified reservation.</Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Additional info inputs associated with the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationInputs reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationInputs(reservationId, out globalInputs, out requirementsInputs, out additionalInfoInputs, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetReservationInputs&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetReservationInputs&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationInputs "af626b88-458b-4e7a-9054-c03d8cffa260" resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        string[,] globalInputs, requirementsInputs, additionalInfoInputs;
        testShellAPI.GetReservationInputs(reservationId, out globalInputs, out requirementsInputs, out additionalInfoInputs, out resultXml);
      </Input>
      <Output Name="globalInputs">{{"Param Name", "Value", "Possible Values"}}</Output>
      <Output Name="requirementsInputs">{{"Resource Name", "Param Name", "Value", "Input Type"}}</Output>
      <Output Name="additionalInfoInputs">{{"Resource Name", "Param Name", "Value", "Possible Values"}}</Output>
      <Output Name="resultXml">&lt;ResponseInfo/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="globalInputs" src="" />
      <Output Name="requirementsInputs" src="" />
      <Output Name="additionalInfoInputs" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationInputs&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetReservationInputs&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetReservationRemainingTime" Title="Retrieve the amount of time until the end of a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Retrieves the number of minutes remaining until the end of a specified reservation. If the reservation is running overtime, the remaining time will be reported as -1 minutes.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="reservationRemainingTimeInMinutes" alias="Remaining Time" Type="double" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The number of minutes remaining until the reservation ends.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationRemainingTime reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationRemainingTime(reservationId,out reservationRemainingTimeInMinutes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetReservationRemainingTime&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetReservationRemainingTime&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationRemainingTime $reservationId resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo RemainingTimeInMinutes="26.4"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        double reminingTime;
        testShellAPI.ExtendReservation(reservationId, out reminingTime, out resultXml);
      </Input>
      <Output Name="reservationRemainingTimeInMinutes">26.4</Output>
      <Output Name="resultXml">&lt;ResponseInfo RemainingTimeInMinutes="26.4"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservationRemainingTimeInMinutes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationRemainingTime&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetReservationRemainingTime&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo RemainingTimeInMinutes="26.4"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetResourceAvailability" Title="Get resource availability." Lang="all" Category="Inventory management\Resources">
    <Description>Get resource availability for the resources.</Description>
    <Parameters>
      <Parameter Name="resourcesNames" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All reservations for the resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="usageSummary" alias="Usage Summary" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specify the number used connected resources, this data will be available only on top level resource</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceAvailability resourcesNames showAllDomains ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceAvailability(resourcesNames,out resources,out reservations,out usageSummary,showAllDomains,out resultXml);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;GetResourceAvailability&gt;
      &lt;resourcesNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesNames&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;/GetResourceAvailability&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceAvailability {"Router 1234" "GenericResource 1234"} 0</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[] resourcesNames = new[] { "Bridge6", "Bridge7" };
        string[,] resources;
        string[,] reservations;
        string[,] usageSummary;
        string xmlResult;
        testShellAPI.GetResourceAvailability(resourcesNames, out resources, out reservations, out usageSummary, YesNoOptions.Yes, out xmlResult);
      </Input>
      <Output Name="resources">
        {{Index, Name, Description, Address, FullName, FullAddress, ResourceFamilyName, ResourceModelName, ReservedStatus, Excluded, Permission, ConnectedTo, FullPath}
        {1, Bridge6, , 5, Bridge6, 5, Bridge, Bridge Generic Model, Shared, False, ReadWrite, ,Bridge6}
        {2, Bridge7, , NA, Bridge7, NA, Bridge, Bridge Generic Model, Shared, False, ReadWrite, ,Bridge7}
        {3, port1, , u, Bridge7/port1, NA/u, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack2, Bridge7/port1}
        {4, port1, , u, Bridge6/port1, 5/u, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack1, Bridge6/port1}
        {5, port2, , NA, Bridge6/port2, 5/NA, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack4, Bridge6/port2}
        {6, port2, , NA, Bridge7/port2, NA/NA, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack5, Bridge7/port2}}
      </Output>
      <Output Name="reservations">
        {{ResourceIndex, ResourceName, ReservationId, ReservationName, Owner, StartTime, EndTime, Shared}
        {1, Bridge6, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, True}
        {2, Bridge7, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, True}
        {3, Bridge7/port1, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {4, Bridge6/port1, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {5, Bridge6/port2, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {6, Bridge7/port2, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}}
      </Output>
      <Output Name="usageSummary">
        {{ResourceIndex, ResourceName, NumOfReserved, NumOfShared, NumOfNotInReservation}
        {1, Bridge6, 2, 0, 0}{2, Bridge7, 2, 0, 0}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Bridge6" Address="5" FullName="Bridge6" FullAddress="5" ResourceFamilyName="Bridge" ResourceModelName="Bridge Generic Model" ReservedStatus="Shared" Excluded="false" Permission="ReadWrite" FullPath="Bridge6" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="true"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;UsageSummary ResourceFullName="Bridge6" NumOfNotInReservation="0" NumOfReserved="2" NumOfShared="0"&gt;&lt;/UsageSummary&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="Bridge7" Address="NA" FullName="Bridge7" FullAddress="NA" ResourceFamilyName="Bridge" ResourceModelName="Bridge Generic Model" ReservedStatus="Shared" Excluded="false" Permission="ReadWrite" FullPath="Bridge7" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="true"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;UsageSummary ResourceFullName="Bridge7" NumOfNotInReservation="0" NumOfReserved="2" NumOfShared="0"&gt;&lt;/UsageSummary&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port1" Address="u" FullName="Bridge7/port1" FullAddress="NA/u" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack2" FullPath="Bridge7/port1" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7/port1" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port1" Address="u" FullName="Bridge6/port1" FullAddress="5/u" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack1" FullPath="Bridge6/port1" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6/port1" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port2" Address="NA" FullName="Bridge6/port2" FullAddress="5/NA" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack4" FullPath="Bridge6/port2" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6/port2" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port2" Address="NA" FullName="Bridge7/port2" FullAddress="NA/NA" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack5" FullPath="Bridge7/port2" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7/port2" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" />
      <Output Name="reservations" src="" />
      <Output Name="usageSummary" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceAvailability&gt;
        &lt;resourcesNames&gt;
        &lt;string&gt;Bridge&lt;/string&gt;
        &lt;/resourcesNames&gt;
        &lt;showAllDomains&gt;1&lt;/showAllDomains&gt;
        &lt;/GetResourceAvailability&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
  </Command>
  <Command Name="GetResourceAvailabilityInTimeRange" Title="Get resource availability during a specific time range." Lang="all" Category="Inventory management\Resources">
    <Description>Get resource availability for the resources in the specified time range.</Description>
    <Parameters>
      <Parameter Name="resourcesNames" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="startTime" alias="Start Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The start time of the reservation.</Description>
      </Parameter>
      <Parameter Name="endTime" alias="End Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The end time of the reservation.</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All reservations for the resources that match the specified query conditions.</Description>
      </Parameter>
      <Parameter Name="usageSummary" alias="Usage Summary" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Specify the number used connected resources, this data will be available only on top level resource</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceAvailabilityInTimeRange resourcesNames startTime endTime showAllDomains ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceAvailabilityInTimeRange(resourcesNames,startTime,endTime,showAllDomains,out resources,out reservations,out usageSummary,out resultXml);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;GetResourceAvailabilityInTimeRange&gt;
      &lt;resourcesNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesNames&gt;
      &lt;startTime&gt;{startTime}&lt;/startTime&gt;
      &lt;endTime&gt;{endTime}&lt;/endTime&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;/GetResourceAvailabilityInTimeRange&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceAvailability {"Router 1234" "GenericResource 1234"} "03/01/2012 00:00" "05/31/2012 23:59" 0</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[] resourcesNames = new[] { "Bridge6", "Bridge7" };
        string[,] resources;
        string[,] reservations;
        string[,] usageSummary;
        string xmlResult;
        testShellAPI.GetResourceAvailabilityInTimeRange(resourcesNames, DateTime.Now, DateTime.Now.AddYears(1), YesNoOptions.Yes, out resources, out reservations, out usageSummary, out xmlResult);
      </Input>
      <Output Name="resources">
        {{Index, Name, Description, Address, FullName, FullAddress, ResourceFamilyName, ResourceModelName, ReservedStatus, Excluded, Permission, ConnectedTo, FullPath}
        {1, Bridge6, , 5, Bridge6, 5, Bridge, Bridge Generic Model, Shared, False, ReadWrite, , Bridge6}
        {2, Bridge7, , NA, Bridge7, NA, Bridge, Bridge Generic Model, Shared, False, ReadWrite, ,Bridge7}
        {3, port1, , u, Bridge7/port1, NA/u, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack2,Bridge7/port1}
        {4, port1, , u, Bridge6/port1, 5/u, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack1,Bridge6/port1}
        {5, port2, , NA, Bridge6/port2, 5/NA, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack4,Bridge6/port2}
        {6, port2, , NA, Bridge7/port2, NA/NA, Bridge Port, Bridge Port Generic Model, Reserved, False, ReadWrite, Patch6\\jack5,Bridge7/port2}}
      </Output>
      <Output Name="reservations">
        {{ResourceIndex, ResourceName, ReservationId, ReservationName, Owner, StartTime, EndTime, Shared}
        {1, Bridge6, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, True}
        {2, Bridge7, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, True}
        {3, Bridge7/port1, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {4, Bridge6/port1, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {5, Bridge6/port2, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}
        {6, Bridge7/port2, 2002cfca-50d0-43c4-8dbb-d09e0434dbe7, Topology4, admin, 14/01/2014 08:28:00, 14/01/2014 10:28:00, False}}
      </Output>
      <Output Name="usageSummary">
        {{ResourceIndex, ResourceName, NumOfReserved, NumOfShared, NumOfNotInReservation}
        {1, Bridge6, 2, 0, 0}{2, Bridge7, 2, 0, 0}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Bridge6" Address="5" FullName="Bridge6" FullAddress="5" ResourceFamilyName="Bridge" ResourceModelName="Bridge Generic Model" ReservedStatus="Shared" Excluded="false" Permission="ReadWrite" FullPath="Bridge6" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="true"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;UsageSummary ResourceFullName="Bridge6" NumOfNotInReservation="0" NumOfReserved="2" NumOfShared="0"&gt;&lt;/UsageSummary&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="Bridge7" Address="NA" FullName="Bridge7" FullAddress="NA" ResourceFamilyName="Bridge" ResourceModelName="Bridge Generic Model" ReservedStatus="Shared" Excluded="false" Permission="ReadWrite" FullPath="Bridge7" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="true"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;UsageSummary ResourceFullName="Bridge7" NumOfNotInReservation="0" NumOfReserved="2" NumOfShared="0"&gt;&lt;/UsageSummary&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port1" Address="u" FullName="Bridge7/port1" FullAddress="NA/u" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack2" FullPath="Bridge7/port1" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7/port1" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port1" Address="u" FullName="Bridge6/port1" FullAddress="5/u" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack1" FullPath="Bridge6/port1" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6/port1" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port2" Address="NA" FullName="Bridge6/port2" FullAddress="5/NA" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack4" FullPath="Bridge6/port2" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge6/port2" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="port2" Address="NA" FullName="Bridge7/port2" FullAddress="NA/NA" ResourceFamilyName="Bridge Port" ResourceModelName="Bridge Port Generic Model" ReservedStatus="Reserved" Excluded="false" Permission="ReadWrite" ConnectedTo="Patch6\jack5" FullPath="Bridge7/port2" &gt;
        &lt;Reservations&gt;
        &lt;Reservation ReservationId="2002cfca-50d0-43c4-8dbb-d09e0434dbe7" ResourceFullName="Bridge7/port2" ReservationName="Topology4" Owner="admin" StartTime="14/01/2014 08:28:00" EndTime="14/01/2014 10:28:00" Shared="false"&gt;&lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" />
      <Output Name="reservations" src="" />
      <Output Name="usageSummary" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceAvailabilityInTimeRange&gt;
        &lt;resourcesNames&gt;
        &lt;string&gt;{string}&lt;/string&gt;
        &lt;/resourcesNames&gt;
        &lt;startTime&gt;{startTime}&lt;/startTime&gt;
        &lt;endTime&gt;{endTime}&lt;/endTime&gt;
        &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
        &lt;/GetResourceAvailabilityInTimeRange&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
  </Command>
  <Command Name="GetResourceCommands" Title="Retrieve resource driver commands." Lang="all" Category="Reservation operations\Commands">
    <Description>Retrieves driver commands and parameters for a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="commands" alias="Commands" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All commands for drivers associated with the specified resource.</Description>
      </Parameter>
      <Parameter Name="parameters" alias="Command Parameters" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Parameters associated with each command.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceCommands resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceCommands(resourceFullPath,out commands,out parameters,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetResourceCommands&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/GetResourceCommands&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceCommands "Router 1234" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] commands, parameters;
        testShellAPI.GetResourceCommands("Router 1234",out commands,out parameters,out resultXml);
      </Input>
      <Output Name="commands">
        {{"Index","Name","Description","DisplayName"},
        {"1","ExampleCommand","","Example Command"},
        {"2","ResetDriver","","Reset Driver"}}
      </Output>
      <Output Name="parameters">
        {{"CommandIndex","Name","Description","Type","Mandatory","DefaultValue","EnumValues"},
        {"1","userParam1","","String","False","Hello",""},
        {"1","userParam2","","Numeric","False","42",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="commands" src="" />
      <Output Name="parameters" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceCommands&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;/GetResourceCommands&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetServiceCommands" Title="Retrieve service driver commands." Lang="all" Category="Reservation operations\Commands">
    <Description>Retrieves driver commands and parameters for a specified service.</Description>
    <Parameters>
      <Parameter Name="serviceName" alias="Service Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the service name. </Description>
      </Parameter>
      <Parameter Name="commands" alias="Commands" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All commands for drivers associated with the specified service.</Description>
      </Parameter>
      <Parameter Name="parameters" alias="Command Parameters" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Parameters associated with each command.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetServiceCommands serviceName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetServiceCommands(serviceName,out commands,out parameters,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetServiceCommands&gt;
      &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
      &lt;/GetServiceCommands&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetServiceCommands "VLAN" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] commands, parameters;
        testShellAPI.GetServiceCommands("VLAN",out commands,out parameters,out resultXml);
      </Input>
      <Output Name="commands">
        {{"Index","Name","Description","DisplayName"},
        {"1","ExampleCommand","","Example Command"},
        {"2","ResetDriver","","Reset Driver"}}
      </Output>
      <Output Name="parameters">
        {{"CommandIndex","Name","Description","Type","Mandatory","DefaultValue","EnumValues"},
        {"1","userParam1","","String","False","Hello",""},
        {"1","userParam2","","Numeric","False","42",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="commands" src="" />
      <Output Name="parameters" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetServiceCommands&gt;
        &lt;serviceName&gt;VLAN&lt;/serviceName&gt;
        &lt;/GetServiceCommands&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand" DisplayName="Example Command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="ResetDriver" DisplayName="Reset Driver"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetResourceConnectedCommands" Title="Retrieve resource driver commands." Lang="all" Category="Reservation operations\Commands">
    <Description>Gets commands which are added to the resource from connected resources such as power or virtualization.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="commands" alias="Commands" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All commands for drivers associated with the specified resource.</Description>
      </Parameter>
      <Parameter Name="parameters" alias="Command Parameters" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Parameters associated with each command.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceConnectedCommands resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceConnectedCommands(resourceFullPath,out commands,out parameters,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetResourceConnectedCommands&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/GetResourceConnectedCommands&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceConnectedCommands "Router 1234" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="SpinUp" Tag="virtualization" DisplayName="Example virtualiztion command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="PowerOn" Tag="power" DisplayName="Example power command" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] commands, parameters;
        testShellAPI.GetResourceConnectedCommands("Router 1234",out commands,out parameters,out resultXml);
      </Input>
      <Output Name="commands">
        {{"Index","Name","Tag","Description","DisplayName"},
        {"1","ExampleCommand", "virtualization", "","Example Command"},
        {"2","PowerOn","power","","Power On"}}
      </Output>
      <Output Name="parameters">
        {{"CommandIndex","Name","Description","Type","Mandatory","DefaultValue","EnumValues"},
        {"1","userParam1","","String","False","Hello",""},
        {"1","userParam2","","Numeric","False","42",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="SpinUp" Tag="virtualization" DisplayName="Example virtualiztion command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="PowerOn" Tag="power" DisplayName="Example power command" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="commands" src="" />
      <Output Name="parameters" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceConnectedCommands&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;/GetResourceConnectedCommands&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="SpinUp" Tag="virtualization" DisplayName="Example virtualiztion command" &gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="PowerOn" Tag="power" DisplayName="Example power command" &gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetResourceDetails" Title="Retrieve the resource parameters and attributes." Lang="all" Category="Inventory management\Resources">
    <Description>Retrieves resource descriptions for the specified resource, and a matrix of all its associated attributes and attribute values.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="showAllDomains" alias="Show All Domains" Type="YesNoOptions" Default="No" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Show all domains associated with the logged in user.</Description>
      </Parameter>
      <Parameter Name="resource" alias="Resource" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Details associated with the specified resource.</Description>
      </Parameter>
      <Parameter Name="attributes" alias="Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Attributes and attribute values for the specified resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceDetails resourceFullPath showAllDomains ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceDetails(resourceFullPath, showAllDomains,out resource,out attributes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetResourceDetails&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;showAllDomains&gt;{showAllDomains}&lt;/showAllDomains&gt;
      &lt;/GetResourceDetails&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceDetails "Lab Routers/Router 1234" 0 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Router 1234" DriverName="Router Driver" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false" Description="a generic router" Permissions="ReadOnly" ResourceLiveStatusName="name1" ResourceLiveStatusDescription="description1" &gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"&gt;&lt;/ResourceAttribute&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;ChildResources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.200/1" RootAddress="192.168.1.200" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="false" Excluded="false" Description="a generic router port" Permissions="ReadOnly"&gt;
        &lt;ResourceAttributes&gt;&lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResourceInfo&gt;
        &lt;/ChildResources&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] resource;
        attributes[,] attributes;
        string resultXml;
        testShellAPI.GetResourceDetails("Lab Routers/Router 1234", false, out resource, out attributes, out resultXml);
      </Input>
      <Output Name="resource">
        {{"Index","ParentIndex","Name","Address","FullAddress","RootAddress","ResourceFamilyName","ResourceModelName","FolderFullPath","Locked","LockInfo_ReservationName","LockInfo_Username","LockInfo_MachineName","LockInfo_Created","Excluded", "Permissions"},
        {"1","-1","Router 1234","192.168.1.200","192.168.1.200","192.168.1.200","Generic Chassis","Generic Chassis Model","Lab Routers","False","","","","","False", "ReadOnly"},
        {"2","1","Router 1234/Port 1","1","192.168.1.200/1","192.168.1.200","Generic Port","Generic Port Model","Lab Routers","False","","","","","False","ReadOnly"}}
      </Output>
      <Output Name="attributes">
        {{"ResourceIndex","ResourceName","Name","Value","Type"},
        {"1","Router 1234","SW_Version","","String"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Router 1234" DriverName="Router Driver" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false" Description="a generic router" Permissions="ReadOnly"  ResourceLiveStatusName="name1" ResourceLiveStatusDescription="description1"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"&gt;&lt;/ResourceAttribute&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;ChildResources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.200/1" RootAddress="192.168.1.200" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="false" Excluded="false" Description="a generic router port" Permissions="ReadOnly"&gt;
        &lt;ResourceAttributes&gt;&lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResourceInfo&gt;
        &lt;/ChildResources&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resource" src="" />
      <Output Name="attributes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceDetails&gt;
        &lt;resourceFullPath&gt;Lab Routers/Router 1234&lt;/resourceFullPath&gt;
        &lt;showAllDomains&gt;1&lt;/showAllDomains&gt;
        &lt;/GetResourceDetails&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="Router 1234" DriverName="Router Driver" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false" Description="a generic router" Permissions="ReadOnly"  ResourceLiveStatusName="name1" ResourceLiveStatusDescription="description1"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"&gt;&lt;/ResourceAttribute&gt;
        &lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;ChildResources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.200/1" RootAddress="192.168.1.200" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Locked="false" Excluded="false" Description="a generic router port", "ReadOnly"&gt;
        &lt;ResourceAttributes&gt;&lt;/ResourceAttributes&gt;
        &lt;Domains&gt;&lt;/Domains&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResourceInfo&gt;
        &lt;/ChildResources&gt;
        &lt;LockInfo&gt;&lt;/LockInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetResourceList" Title="Retrieve a list of resources for a specified path." Lang="all" Category="Inventory management\Resources">
    <Description>Retrieves resources and resource values for the specified folder path.</Description>
    <Parameters>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the full folder name. Include the full path from the root to a specific folder, separated by slashes. For example: ResourceFamilyFolder/ResourceModelFolder.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resources and resource values for the specified path.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceList folderFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceList(folderFullPath,out resources,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetResourceList&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;/GetResourceList&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceList "Lab Routers" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="Router 4321" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] resources;
        string resultXml;
        testShellAPI.GetResourceList("Lab Routers", out resources, out resultXml);
      </Input>
      <Output Name="resources">
        {{"Name","Address","FullAddress","RootAddress","ResourceFamilyName","ResourceModelName","FolderFullPath","Locked","LockInfo_ReservationName","LockInfo_Username","LockInfo_MachineName","LockInfo_Created","Excluded"},
        {Router 1234","192.168.1.200","192.168.1.200","192.168.1.200","Generic Chassis","Generic Chassis Model","Lab Routers","False","","","","","False"},
        {Router 4321","192.168.1.201","192.168.1.201","192.168.1.201","Generic Resource","Generic Resource Model","Lab Routers","False","","","","","False"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="Router 4321" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceList&gt;
        &lt;folderFullPath&gt;Lab Routers&lt;/folderFullPath&gt;
        &lt;/GetResourceList&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Resources&gt;
        &lt;Resource Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.200" FullAddress="192.168.1.200" RootAddress="192.168.1.200" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;Resource Name="Router 4321" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Locked="false" Excluded="false"&gt;
        &lt;LockInfo/&gt;
        &lt;/Resource&gt;
        &lt;/Resources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetResourceLiveStatus" Title="Gets the live status of a resource." Lang="all" Category="Inventory management\Resources">
    <Description>Gets the live status of the resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string"  Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA.</Description>
      </Parameter>
      <Parameter Name="liveStatusName" alias="Live Status Name" Type="string"  Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource live status name</Description>
      </Parameter>
      <Parameter Name="additionalInfo" alias="Additional Info" Type="string"  Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource live status additional info</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceLiveStatus resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceLiveStatus(resourceFullPath,out liveStatusName,out additionalInfo,out resultXml);</Syntax>
    <Syntax Lang="library" src="" >
      <Input Name="resourceFullPath" src="" />
      <Output Name="liveStatusName" src="" />
      <Output Name="additionalInfo" src="" />
      <Output Name="resultXml" src="" />
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;GetResourceLiveStatus&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/GetResourceLiveStatus&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceLiveStatus {"myPath"} ? resultXml ?</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="Online" liveStatusDescription="Resource was responding to pings at 12/12/2013 10:35 AM"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.GetResourceLiveStatus("myResourceName", out liveStatusName , out additionalInfo , out resultXml );
      </Input>
      <Output Name="liveStatusName">
        Online
      </Output>
      <Output Name="additionalInfo">
        Resource was responding to pings at 12/12/2013 10:35 AM
      </Output>
      <Output Name="resultXml">
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceLiveStatus&gt;
        &lt;resourceFullPath&gt;{path}&lt;/resourceFullPath&gt;
        &lt;/GetResourceLiveStatus&gt;
      </Input>
      <Output>
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="Online" liveStatusDescription="Resource was responding to pings at 12/12/2013 10:35 AM"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="GetReservationsLiveStatus" Title="Gets the live status the reservations." Lang="all" Category="Reservation operations\Live Status">
    <Description>Gets the live status of the reservations.</Description>
    <Parameters>
      <Parameter Name="reservationsId" alias="Reservations IDs" Type="string[]"  Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specifies a string array that represents reservation unique identifiers.</Description>
      </Parameter>
      <Parameter Name="statusesArray" alias="Reservations Live Status" Type="string[,]"  Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Returns an array with reservation's live status.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationsLiveStatus reservationsId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationsLiveStatus(reservationsId,out statusesArray);</Syntax>
    <Syntax Lang="library" src="" >
      <Input Name="reservationsId" src="" />
      <Output Name="statusesArray" src="" />
      <Output Name="resultXml" src="" />
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;GetReservationsLiveStatus&gt;
      &lt;reservationsId&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/reservationsId&gt;
      &lt;/GetReservationsLiveStatus&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationsLiveStatus {"a2f1b35e-3deb-42ee-b70d-78189dd10d56"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationLiveStatuses&gt;
        &lt;ReservationLiveStatus ReservationId="a2f1b35e-3deb-42ee-b70d-78189dd10d56" ReservationLiveStatusName="Pass" ReservationLiveStatusDescription="My Description"&gt;&lt;/ReservationLiveStatus&gt;
        &lt;/ReservationLiveStatuses&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.GetReservationsLiveStatus("a2f1b35e-3deb-42ee-b70d-78189dd10d56", out statusesArray , out resultXml );
      </Input>
      <Output Name="statusesArray">
        {{"a2f1b35e-3deb-42ee-b70d-78189dd10d56","Pass","Description"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationLiveStatuses&gt;
        &lt;ReservationLiveStatus ReservationId="a2f1b35e-3deb-42ee-b70d-78189dd10d56" ReservationLiveStatusName="Pass" ReservationLiveStatusDescription&gt;&lt;/ReservationLiveStatus&gt;
        &lt;/ReservationLiveStatuses&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationsLiveStatus&gt;
        &lt;reservationsId&gt;
        &lt;string&gt;a2f1b35e-3deb-42ee-b70d-78189dd10d56&lt;/string&gt;
        &lt;/reservationsId&gt;
        &lt;/GetReservationsLiveStatus&gt;
      </Input>
      <Output>
        &lt;ResponseInfo&gt;
        &lt;ReservationLiveStatuses&gt;
        &lt;ReservationLiveStatus ReservationId="a2f1b35e-3deb-42ee-b70d-78189dd10d56" ReservationLiveStatusName="Pass" ReservationLiveStatusDescription="My Description"&gt;&lt;/ReservationLiveStatus&gt;
        &lt;/ReservationLiveStatuses&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>


  <Command Name="GetResourceMappings" Title="Retrieve current mappings for specified resources." Lang="all" Category="Reservation operations\Resources">
    <Description>Retrieves mappings for a list of one or more resources.</Description>
    <Parameters>
      <Parameter Name="resources" alias="Resource Names" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resources.</Description>
      </Parameter>
      <Parameter Name="mappings" alias="Mappings" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All mappings associated with the listed resources.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetResourceMappings resources ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetResourceMappings(resources,out mappings,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetResourceMappings&gt;
      &lt;resources&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resources&gt;
      &lt;/GetResourceMappings&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetResourceMappings {"L1 Switch 1234/Blade 1/Port 2"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Mapping Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2" RouteType="uni"/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.GetResourceMappings(new string[]{"L1 Switch 1234/Blade 1/Port 2"}, out mappings, out resultXml);
      </Input>
      <Output Name="mappings">
        {{"Source","Target","RouteType"},
        {"L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 2","uni"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Mapping Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2" RouteType="uni"/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="mappings" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetResourceMappings&gt;
        &lt;resources&gt;
        &lt;string&gt;L1 Switch 1234/Blade 1/Port 2&lt;/string&gt;
        &lt;/resources&gt;
        &lt;/GetResourceMappings&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Mapping Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2" RouteType="uni"/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetRouteSegments" Title="Retrieves all the ports on the route." Lang="all" Category="Reservation operations\Routing">
    <Description>Retrieves all the ports on the route from the selected endpoint to the target endpoint.</Description>
    <Parameters>
      <Parameter Name="resource" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="segments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The segments details for the specified route.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetRouteSegments resource ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetRouteSegments(resource,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetRouteSegments&gt;
      &lt;resource&gt;{resource}&lt;/resource&gt;
      &lt;/GetRouteSegments&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetRouteSegments "Router 1234/Port 1" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string[,] segments;
        testShellAPI.GetRouteSegments("Router 1234/Port 1",out segments,out resultXml);
      </Input>
      <Output Name="segments">{{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="segments" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetRouteSegments&gt;
        &lt;resource&gt;Router 1234/Port 1&lt;/resource&gt;
        &lt;/GetRouteSegments&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetScheduledReservations" Title="Retrieve scheduled reservations for a specified time range." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Retrieves all reservations scheduled between the specified start and end times.</Description>
    <Parameters>
      <Parameter Name="fromTime" alias="From Date Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify from which time and date to search.</Description>
      </Parameter>
      <Parameter Name="untilTime" alias="Until Date Time" Type="DateTime" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify until which time and date to search.</Description>
      </Parameter>
      <Parameter Name="reservations" alias="Reservations" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Scheduled reservations for the provided time range. Reservations will be listed for the specified owner, or all current reservations (if no owner is specified).</Description>
      </Parameter>
      <Parameter Name="permittedUsers" alias="Permitted Users" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Lists users with [active | full] access to the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetScheduledReservations fromTime untilTime ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetScheduledReservations(fromTime,untilTime,out reservations,out permittedUsers,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetScheduledReservations&gt;
      &lt;fromTime&gt;{fromTime}&lt;/fromTime&gt;
      &lt;untilTime&gt;{untilTime}&lt;/untilTime&gt;
      &lt;/GetScheduledReservations&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetScheduledReservations "01/01/2015 08:00" "01/01/2015 12:00" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T12:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:45:16" DomainName="Global"&gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] reservations;
        string [,] permittedUsers;
        string resultXml;
        testShellAPI.GetScheduledReservations(new DateTime(2015, 1, 1, 8, 0, 0), new DateTime(2015, 1, 1, 12, 0, 0), out reservations, out resultXml);
      </Input>
      <Output Name="reservations">
        {{"Id","Name","Description","Start","End","Owner","Booked","Status","RecurrenceType","Topologies","ActualEndTime","CreateDate","ModificationDate","Provisioning Status","DomainName","ReservationsLiveStatus","ReservationsLiveStatusDescription"},
        {af626b88-458b-4e7a-9054-c03d8cffa260","test reservation","","1/1/2015 10:00:00 AM","1/1/2015 12:00:00 PM","admin","True","Pending","None","","","6/20/2012 10:40:47 AM","6/20/2012 10:45:16 AM","Pending","Global","Pass","Reservation"}}
      </Output>
      <Output Name="permittedUsers">
        {{ReservationId, UserName}
        {af626b88-458b-4e7a-9054-c03d8cffa260, admin}
        {af626b88-458b-4e7a-9054-c03d8cffa260, user1}
        {af626b88-458b-4e7a-9054-c03d8cffa260, user2}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T12:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:45:16" DomainName="Global"  ReservationLiveStatusName="Pass" ReservationLiveStatusDescription="Reservation" &gt;
        &lt;Topologies/&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="reservations" src="" />
      <Output Name="permittedUsers" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetScheduledReservations&gt;
        &lt;fromTime&gt;01/01/2015 08:00&lt;/fromTime&gt;
        &lt;untilTime&gt;01/01/2015 12:00&lt;/untilTime&gt;
        &lt;/GetScheduledReservations&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Reservations&gt;
        &lt;Reservation Id="af626b88-458b-4e7a-9054-c03d8cffa260" Name="test reservation" StartTime="2015-01-01T10:00:00" EndTime="2015-01-01T12:00:00" RecurrenceType="None" Owner="admin" Booked="true" Status="Pending" ProvisioningStatus="Ready" ActualEndTime="" CreateDate="2012-06-20T10:40:47" ModificationDate="2012-06-20T10:45:16" DomainName="Global"  ReservationLiveStatusName="Pass" ReservationLiveStatusDescription="Reservation" &gt;
        &lt;Topologies/&gt;
        &lt;permittedUsers/&gt;&lt;permittedUser/&gt; name1&lt;permittedUser/&gt;;&lt;permittedUsers/&gt;
        &lt;/Reservation&gt;
        &lt;/Reservations&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>


  <Command Name="GetServerDateAndTime" Title="Retrieve the server's date and time." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Retrieves the server’s UTC date and time.</Description>
    <Parameters>
      <Parameter Name="serverDateTime" alias="Server Date and Time" Type="DateTime" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The server’s UTC date and time.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetServerDateAndTime ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetServerDateAndTime(out serverDateTime,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">&lt;GetServerDateAndTime&gt;&lt;/GetServerDateAndTime&gt;</Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetServerDateAndTime resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo ServerDateTime="2012-06-21T10:52:43.4464527Z" ServerDateTimeString="06/21/2012 10:52"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        DateTime serverDateTime;
        string resultXml;
        testShellAPI.GetServerDateAndTime(out serverDateTime,out resultXml);
      </Input>
      <Output Name="serverDateTime">06/21/2012 10:52:43</Output>
      <Output Name="resultXml">&lt;ResponseInfo ServerDateTime="2012-06-21T10:52:43.4464527Z" ServerDateTimeString="06/21/2012 10:52"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="serverDateTime" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>&lt;GetServerDateAndTime&gt;&lt;/GetServerDateAndTime&gt;</Input>
      <Output Name="resultXml">&lt;ResponseInfo ServerDateTime="2012-06-21T10:52:43.4464527Z" ServerDateTimeString="06/21/2012 10:52"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetTopologyCommands" Title="Retrieve available topology commands in a reservation." Lang="all" Category="Reservation operations\Commands">
    <Description>[Deprecated] Retrieves driver commands and parameters for a specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commands" alias="Commands" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All commands for driver associated with a topology in the specified reservation.</Description>
      </Parameter>
      <Parameter Name="parameters" alias="Command Parameters" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Parameters associated with each command.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetTopologyCommands reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetTopologyCommands(reservationId,out commands,out parameters,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetTopologyCommands&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetTopologyCommands&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetTopologyCommands $reservationId resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] commands, parameters;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.GetTopologyCommands(reservationId,out commands,out parameters,out resultXml);
      </Input>
      <Output Name="commands">
        {{"Index","Name","Description"},
        {"1","ExampleCommand",""},
        {"2","Setup",""}}
      </Output>
      <Output Name="parameters">
        {{"CommandIndex","Name","Description","Type","Mandatory","DefaultValue","EnumValues"},
        {"1","userParam1","","String","False","Hello",""},
        {"1","userParam2","","Numeric","False","42",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="commands" src="" />
      <Output Name="parameters" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetTopologyCommands&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetTopologyCommands&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetEnvironmentCommands" Title="Retrieve available environment commands in a reservation." Lang="all" Category="Reservation operations\Commands">
    <Description>Retrieves driver commands and parameters for a specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="commands" alias="Commands" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All commands for driver associated with a topology in the specified reservation.</Description>
      </Parameter>
      <Parameter Name="parameters" alias="Command Parameters" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Parameters associated with each command.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetEnvironmentCommands reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetEnvironmentCommands(reservationId,out commands,out parameters,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetEnvironmentCommands&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetEnvironmentCommands&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetEnvironmentCommands $reservationId resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] commands, parameters;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.GetEnvironmentCommands(reservationId,out commands,out parameters,out resultXml);
      </Input>
      <Output Name="commands">
        {{"Index","Name","Description"},
        {"1","ExampleCommand",""},
        {"2","Setup",""}}
      </Output>
      <Output Name="parameters">
        {{"CommandIndex","Name","Description","Type","Mandatory","DefaultValue","EnumValues"},
        {"1","userParam1","","String","False","Hello",""},
        {"1","userParam2","","Numeric","False","42",""}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="commands" src="" />
      <Output Name="parameters" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetEnvironmentCommands&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetEnvironmentCommands&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Commands&gt;
        &lt;Command Name="ExampleCommand"&gt;
        &lt;Parameters&gt;
        &lt;Parameter Name="userParam1" Type="String" Mandatory="false" DefaultValue="Hello"/&gt;
        &lt;Parameter Name="userParam2" Type="Numeric" Mandatory="false" DefaultValue="42"/&gt;
        &lt;/Parameters&gt;
        &lt;/Command&gt;
        &lt;Command Name="Setup"&gt;
        &lt;Parameters/&gt;
        &lt;/Command&gt;
        &lt;/Commands&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetTopologyDetails" Title="Retrieve the topology parameters and attributes." Lang="all" Category="Inventory management\Topologies">
    <Description>Retrieves all resources and attributes associated with the specified topology.</Description>
    <Parameters>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="owner" alias="Owner" Type="string" Default="" Lang="cs;lib" MandatoryValue="true" Direction="out">
        <Description>Owner of the topology.</Description>
      </Parameter>
      <Parameter Name="instructions" alias="Instructions" Type="string" Default="" Lang="cs;lib" MandatoryValue="true" Direction="out">
        <Description>Topology instructions.</Description>
      </Parameter>
      <Parameter Name="resources" alias="Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resources and resource values associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="attributes" alias="Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Attributes and attribute values for resources associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="abstractResources" alias="Abstract Resources" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Abstract resources and their associated values for the specified topology.</Description>
      </Parameter>
      <Parameter Name="abstractResourcesAttributes" alias="Abstract Resources Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Attributes and attribute values for all abstract resources associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="abstractResourcesRequiredAttributes" alias="Abstract Resources Required Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Required attributes and attribute values for all abstract resources associated with the specified topology (multiple possible values for a single attribute are displayed in different rows).</Description>
      </Parameter>
      <Parameter Name="routes" alias="Route" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Routes and route endpoints associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="Driver" alias="Driver Name" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The name of the driver associated with this topology.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Global inputs associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="requirementsInputs" alias="Requirements Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Requirements inputs associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="additionalInfoInputs" alias="Additional Info Inputs" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Additional info inputs associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="connectors" alias="Connector" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Connectors associated with the specified topology.</Description>
      </Parameter>
      <Parameter Name="ConnectorAttributes" alias="ConnectorAttributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Visual connectors attributes associated with a specified connector.</Description>
      </Parameter>
      <Parameter Name="type" alias="Topology Type" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The Type of the topology.</Description>
      </Parameter>
      <Parameter Name="state" alias="Topology State" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The State of the topology.</Description>
      </Parameter>
      <Parameter Name="parentTopology" alias="Parent Topology" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The Topology from which this topology was created.</Description>
      </Parameter>
      <Parameter Name="services" alias="Services" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of service instances.</Description>
      </Parameter>
      <Parameter Name="serviceAttributes" alias="ServiceAttributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of attributes of the services.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetTopologyDetails topologyFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetTopologyDetails(topologyFullPath,out owner,out instructions,out resources,out attributes,out abstractResources,out abstractResourcesAttributes,out abstractResourcesRequiredAttributes,out routes,out driver,out globalInputs,out requirementsInputs,out additionalInfoInputs,out connectors,out connectorAttributes,out alias,out type,out state,out parentTopology,out services,out serviceAttributes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetTopologyDetails&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;/GetTopologyDetails&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetTopologyDetails "Temp Automation Resources/TP1" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1" Owner="admin" Type="Build" State="Ready"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Instructions&gt;
        Topology instructions.
        &lt;/Instructions&gt;
        &lt;Driver&gt;
        ExampleTopologyDriver
        &lt;/Driver&gt;
        &lt;GlobalInputs ParamName=&quot;Some global input&quot;&gt;&lt;/GlobalInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Model&quot; ResourceName=&quot;test*&quot; InputType=&quot;Models&quot;&gt;
        &lt;PossibleValues&gt;Test Model&lt;/PossibleValues&gt;
        &lt;/RequirementsInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Speed&quot; ResourceName=&quot;test*&quot; InputType=&quot;Attributes&quot;&gt;
        &lt;PossibleValues&gt;10 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;100 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;1 Gbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;10 Gbps&lt;/PossibleValues&gt;
        &lt;/&lt;RequirementsInputs&gt;
        &lt;AdditionalInfoInputs ParamName=&quot;Test&quot; ResourceName=&quot;test*&quot;&gt;&lt;/AdditionalInfoInputs&gt;
        &lt;ParentTopology Name="Template01"&gt;
        &lt;Type&gt;Build&lt;/Type&gt;
        &lt;State&gt;Pending&lt;/State&gt;
        &lt;/ParentTopology&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetTopologyDetails("Temp Automation Resources/TP1");
      </Input>
      <Output Name="Owner">{{"Owner"}}</Output>
      <Output Name="Instructions">{{"Instructions"}}</Output>
      <Output Name="resources">
        {{"Index","Name","Address","FullAddress","RootAddress","ResourceFamilyName","ResourceModelName","FolderFullPath","Locked","LockInfo_ReservationName","LockInfo_Username","LockInfo_MachineName","LockInfo_Created","Excluded","Alias","WillBeLocked"},
        {"1","Router 1234","192.168.1.201","192.168.1.201","192.168.1.201","Generic Chassis","Generic Chassis Model","Lab Routers","False","","","","","False","Router 1234","False"},
        {"2","GenericResource 1234/ConsolePort 21","21","192.168.1.20/21","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","False","","","","","False","ConsolePort 21","True"},
        {"3","GenericResource 1234/Port 2","2","192.168.1.20/2","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","False","","","","","False","Port 2","True"},
        {"4","GenericResource 1234/PowerPort 12","12","192.168.1.20/12","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","False","","","","","False","PowerPort 12","True"},
        {"5","Router 1234/Port 1","1","192.168.1.201/1","192.168.1.201","Generic Port","Generic Port Model","Lab Routers","False","","","","","False","Port 1","True"},
        {"6","GenericResource 1234/PowerPort 11","11","192.168.1.20/11","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","False","","","","","False","PowerPort 11","True"},
        {"7","GenericResource 1234","192.168.1.20","192.168.1.20","192.168.1.20","Generic Resource","Generic Resource Model","Temp Automation Resources","False","","","","","False","GenericResource 1234","True"},
        {"8","GenericResource 1234/Port 1","1","192.168.1.20/1","192.168.1.20","Generic Port","Generic Port Model","Temp Automation Resources","False","","","","","False","Port 1","True"}}
      </Output>
      <Output Name="attributes">
        {{"ResourceIndex","ResourceName","Name","Value","Type"},
        {"1","Router 1234","SW_Version","","String"}}
      </Output>
      <Output Name="abstractResources">{{"Index","ResourceFamilyName","ResourceModelName","Alias","WillBeLocked","Valid","Quantity"}}</Output>
      <Output Name="abstractResourcesAttributes">{{"AbstractResourceIndex","AbstractResourceAlias","AttributeName","AttributeValue","AttributeType"}}</Output>
      <Output Name="abstractResourcesRequiredAttributes">{{"AbstractResourceIndex","AbstractResourceAlias","AttributeName","AttributeValue","AttributeType"}}</Output>
      <Output Name="routes">
        {{"Index","Source","Target","RouteType","Alias","Shared"},
        {"1","GenericResource 1234/Port 1","Router 1234/Port 1","bi","","true"},
        {"2","Router 1234/Port 1","GenericResource 1234/Port 2","uni","","true"}}
      </Output>
      <Output Name="Driver">{{"ExampleTopologyDriver"}}</Output>
      <Output Name="globalInputs">
        {{"Param Name", "Default Value", "Possible Values", "Description"},
        {"Some global input", "", "", ""}}
      </Output>
      <Output Name="requirementsInputs">
        {{"Resource Name", "Param Name", "Default Value", "Possible Values", "Input Type", "Description"},
        {"test*", "Model", "", "", "Models", ""},
        {"test*", "Speed", "", "10 Mbps
        100 Mbps
        1 Gbps
        10 Gbps", "Attributes", ""}}
      </Output>
      <Output Name="additionalInfoInputs">
        {{"Resource Name", "Param Name", "Default Value", "Possible Values", "Description"},
        {"test*", "Test", "", ""}}
      </Output>
      <Output Name="connectors">
        {{"index","Source","Target","ResourceMappingType","Alias"},
        {"1","b6/p7","b7/p5","bi","vc1"}}
      </Output>
      <Output Name="connectorAttributes">
        {{"ConnectorIndex","Name","Value"},
        {"1","Duplex", "Half"}}
      </Output>
      <Output Name="Type">
        "Build"
      </Output>
      <Output Name="State">
        "Ready"
      </Output>
      <Output Name="ParentTopology">
        {{"Index","Name","Type","State"},
        {"0","Topo1234","Build","Pending"}}
      </Output>
      <Output Name="services">
        {{"Index","ServiceName","Alias"},
        {"1","Sql1","Sql64"}}
      </Output>
      <Output Name="serviceAttributes">
        {{"ServiceInstanceIndex","Name","Value"},
        {"1","Duplex","Half"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Instructions&gt;
        Topology instructions.
        &lt;/Instructions&gt;
        &lt;Driver&gt;
        ExampleTopologyDriver
        &lt;/Driver&gt;
        &lt;GlobalInputs ParamName=&quot;Some global input&quot;&gt;&lt;/GlobalInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Model&quot; ResourceName=&quot;test*&quot; InputType=&quot;Models&quot;&gt;
        &lt;PossibleValues&gt;Test Model&lt;/PossibleValues&gt;
        &lt;/RequirementsInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Speed&quot; ResourceName=&quot;test*&quot; InputType=&quot;Attributes&quot;&gt;
        &lt;PossibleValues&gt;10 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;100 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;1 Gbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;10 Gbps&lt;/PossibleValues&gt;
        &lt;/&lt;RequirementsInputs&gt;
        &lt;AdditionalInfoInputs ParamName=&quot;Test&quot; ResourceName=&quot;test*&quot;&gt;&lt;/AdditionalInfoInputs&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias=&quot;connector1&quot; Type=&quot;Default&quot; ResourceMappingType=&quot;bi&quot; Source=&quot;b6/p7&quot; Target=&quot;b7/p5&quot;&gt;
        &lt;Attributes&gt;
        &lt;Attribute Name=&quot;Numeric&quot; Value=&quot;2&quot;&gt;
        &lt;/Attributes&gt;
        &lt;/Connector&gt;
        &lt;Connector Alias=&quot;vc444&quot; Type=&quot;Default&quot; ResourceMappingType=&quot;bi&quot; Source=&quot;b6/p6&quot; Target=&quot;b7/p4&quot;&gt;
        &lt;Attributes&gt;
        &lt;Attribute Name=&quot;Protocol&quot; Value=&quot;Transparent&quot;&gt;
        &lt;/Attributes&gt;
        &lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;ParentTopology Name="Template01"&gt;
        &lt;Type&gt;Build&lt;/Type&gt;
        &lt;State&gt;Ready&lt;/State&gt;
        &lt;/ParentTopology&gt;
        &lt;Services&gt;
        &lt;Service ServiceName=&quot;service1 Instance&quot; Alias=&quot;Sql Server&quot;&gt;
        &lt;Attributes&gt;
        &lt;Attribute Name=&quot;Numeric&quot; Value=&quot;2&quot;&gt;
        &lt;/Attributes&gt;
        &lt;/Service&gt;
        &lt;/Services&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resources" src="" />
      <Output Name="attributes" src="" />
      <Output Name="abstractResources" src="" />
      <Output Name="abstractResourcesAttributes" src="" />
      <Output Name="abstractResourcesRequiredAttributes" src="" />
      <Output Name="routes" src="" />
      <Output Name="connectors" src="" />
      <Output Name="connectorAttributes" src="" />
      <Output Name="services" src="" />
      <Output Name="serviceAttributes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetTopologyDetails&gt;
        &lt;topologyFullPath&gt;Temp Automation Resources/TP1&lt;/topologyFullPath&gt;
        &lt;/GetTopologyDetails&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1" Owner="admin" Type="Build" State="Ready"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;Instructions&gt;
        Topology instructions.
        &lt;/Instructions&gt;
        &lt;Driver&gt;
        ExampleTopologyDriver
        &lt;/Driver&gt;
        &lt;GlobalInputs ParamName=&quot;Some global input&quot;&gt;&lt;/GlobalInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Model&quot; ResourceName=&quot;test*&quot; InputType=&quot;Models&quot;&gt;
        &lt;PossibleValues&gt;Test Model&lt;/PossibleValues&gt;
        &lt;/RequirementsInputs&gt;
        &lt;RequirementsInputs ParamName=&quot;Speed&quot; ResourceName=&quot;test*&quot; InputType=&quot;Attributes&quot;&gt;
        &lt;PossibleValues&gt;10 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;100 Mbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;1 Gbps&lt;/PossibleValues&gt;
        &lt;PossibleValues&gt;10 Gbps&lt;/PossibleValues&gt;
        &lt;/&lt;RequirementsInputs&gt;
        &lt;AdditionalInfoInputs ParamName=&quot;Test&quot; ResourceName=&quot;test*&quot;&gt;&lt;/AdditionalInfoInputs&gt;
        &lt;ParentTopology Name="Template01"&gt;
        &lt;Type&gt;Build&lt;/Type&gt;
        &lt;State&gt;Pending&lt;/State&gt;
        &lt;/ParentTopology&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetTopologiesByCategory" Title="Retrieves the full path of all topologies." Lang="all" Category="Inventory management\Topologies">
    <Description>Retrives full topology path for each topology that contains given category name (and value if entered).</Description>>
    <Parameters>
      <Parameter Name="categoryName" alias="Category Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the category's name</Description>
      </Parameter>
      <Parameter Name="categoryValue" alias="Category Value" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the category's value/sub category</Description>
      </Parameter>
      <Parameter Name="topologiesFullPath" alias="Topologies Full Path" Type="string" Default="" Lang="cs;lib" MandatoryValue="true" Direction="out">
        <Description>Specify full topology path for each topology that contains given category</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetTopologiesByCategory categoryName categoryValue ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetTopologiesByCategory(categoryName, categoryValue, out categoriesFullPath, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetTopologiesByCategory&gt;
      &lt;categoryName&gt;{categoryName}&lt;/categoryName&gt;
      &lt;categoryValue&gt;{categoryValue}&lt;/categoryValue&gt;
      &lt;/GetTopologiesByCategory&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        ::TestShellAPI::GetTopologiesByCategory lookUpCategory bonjour resultXml
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Topologies&gt;
        &lt;FullPath&gt;
        Root\otherTopology
        &lt;/FullPath&gt;
        &lt;FullPath&gt;
        dir1/myTopology
        &lt;/FullPath&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetTopologiesByCategory("lookUpCategory","bonjour");
      </Input>
      <Output Name="topologiesFullPath">{{"dir1/myTopology","Root\otherTopology"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Topologies&gt;
        &lt;FullPath&gt;
        Root\otherTopology
        &lt;/FullPath&gt;
        &lt;FullPath&gt;
        dir1/myTopology
        &lt;/FullPath&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetTopologiesByCategory&gt;
        &lt;categoryName&gt;lookUpCategory&lt;/categoryName&gt;
        &lt;categoryValue&gt;bonjour&lt;/categoryValue&gt;
        &lt;/GetTopologiesByCategory&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="TopologiesByCategoryInfo"&gt;
        &lt;Topologies&gt;
        &lt;FullPath&gt;
        dir1/myTopology
        &lt;/FullPath&gt;
        &lt;FullPath&gt;
        Root\otherTopology
        &lt;/FullPath&gt;
        &lt;/Topologies&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="GetTopologyCategories" Title="Retrieves all topology categories." Lang="all" Category="Inventory management\Topologies">
    <Description>Retrieves all root categories from 'Environment' catalog.</Description>
    <Parameters>
      <Parameter Name="categories" alias="Categories" Type="string[]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>List of categories.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetTopologyCategories ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetTopologyCategories(out categories, out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetTopologyCategories&gt;
      &lt;/GetTopologyCategories&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetTopologyCategories resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="CategoryListInfo"&gt;
        &lt;Categories&gt;
        &lt;Name&gt;
        category1
        &lt;/Name&gt;
        &lt;Name&gt;
        otherCategory
        &lt;/Name&gt;
        &lt;Name&gt;
        lookUpCategory
        &lt;/Name&gt;
        &lt;/Categories&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetTopologyCategories();
      </Input>
      <Output Name="categories">{{"category1","otherCategory","lookUpCategory"}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Categories&gt;
        &lt;Name&gt;
        category1
        &lt;/Name&gt;
        &lt;Name&gt;
        otherCategory
        &lt;/Name&gt;
        &lt;Name&gt;
        lookUpCategory
        &lt;/Name&gt;
        &lt;/Name&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetTopologyCategories&gt;
        &lt;/GetTopologyCategories&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="CategoryListInfo"&gt;
        &lt;Categories&gt;
        &lt;Name&gt;
        category1
        &lt;/Name&gt;
        &lt;Name&gt;
        otherCategory
        &lt;/Name&gt;
        &lt;Name&gt;
        lookUpCategory
        &lt;/Name&gt;
        &lt;/Categories&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="GetUserDetails" Title="Retrieve a user's settings." Lang="all" Category="User management\Users">
    <Description>Retrieves the specified user's configuration settings and associated domains.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the user.</Description>
      </Parameter>
      <Parameter Name="userDetails" alias="Users Details" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>User settings for the specified user.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetUserDetails username ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetUserDetails(username,out userDetails,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetUserDetails&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;/GetUserDetails&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetUserDetails User1234 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.GetUserDetails("User1234");
      </Input>
      <Output Name="userDetails">{{"Name","Email","IsAdmin","IsActive","IsDomainAdmin","DomainName},{"User1234","user1234@work.com","True","True","False",""}}</Output>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="userDetails" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetUserDetails&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;/GetUserDetails&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="User1234" IsAdmin="false" IsActive="true" IsDomainAdmin="false" Email="user1234@work.com"&gt;
        &lt;Groups&gt;
        &lt;Group Name="Everyone"&gt;
        &lt;TestShellDomains/&gt;
        &lt;/Group&gt;
        &lt;/Groups&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp">
      <Exception>UserValidation</Exception>
      <Exception>General</Exception>
    </Exceptions>
    <Exceptions Lang="library">
      <Exception>UserValidation</Exception>
      <Exception>General</Exception>
    </Exceptions>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetAbstractTemplateList" Title="Retrieve a list of abstract templates." Lang="all" Category="Inventory management\Resources">
    <Description>Retrieve a list of abstract templates.</Description>
    <Parameters>
      <Parameter Name="abstractTemplates" alias="Abstract Templates" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Abstract templates details.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetAbstractTemplateList ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetAbstractTemplateList(out abstractTemplates,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetAbstractTemplateList&gt;&lt;/GetAbstractTemplateList&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetAbstractTemplateList resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;AbstractTemplates&gt;
        &lt;AbstractTemplate ResourceFamilyName="VM Instance" ResourceModelName="VM" Name="abs" Description="" Owner="admin" DomainName="Global" CreateDate="5/18/2014 6:09:07 AM" Valid="true"&gt;&lt;/AbstractTemplate&gt;
        &lt;AbstractTemplate ResourceFamilyName="VM Instance" ResourceModelName="VM" Name="abs2" Description="" Owner="admin" DomainName="Global" CreateDate="5/18/2014 6:09:07 AM" Valid="true"&gt;&lt;/AbstractTemplate&gt;
        &lt;/AbstractTemplates&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] abstractTemplates;
        string resultXml;
        testShellAPI.GetAbstractTemplateList(out abstractTemplates, out resultXml);
      </Input>
      <Output Name="abstractTemplates">
      </Output>
      <Output Name="resultXml">
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="abstractTemplates" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetAbstractTemplateList&gt;&lt;/GetAbstractTemplateList&gt;
      </Input>
      <Output Name="resultXml">
        &lt;?xml version="1.0" encoding="utf-8"?&gt;
        &lt;Response CommandName="GetAbstractTemplateList" Success="true" xmlns="http://schemas.qualisystems.com/ResourceManagement/ApiCommandResult.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
        &lt;ErrorCode&gt;0&lt;/ErrorCode&gt;
        &lt;ResponseInfo xsi:type="AbstractTemplateShortInfoList"&gt;
        &lt;AbstractTemplates&gt;
        &lt;AbstractTemplate ResourceFamilyName="VM Instance" ResourceModelName="VM" Name="abs1" Description="" Owner="admin" DomainName="Global" CreateDate="18/05/2014 06:09:07" Valid="true"/&gt;
        &lt;AbstractTemplate ResourceFamilyName="VM Instance" ResourceModelName="VM" Name="abs2" Description="" Owner="admin" DomainName="Global" CreateDate="18/05/2014 06:09:07" Valid="true"/&gt;
        &lt;/AbstractTemplates&gt;
        &lt;/ResponseInfo&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetServices" Title="Retrieve a list of services and their attributes." Lang="all" Category="Inventory management\Services">
    <Description>Retrieve a list of services and their attributes.</Description>
    <Parameters>
      <Parameter Name="categoryName" alias="Category Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>The name of the category of the services you want to receive.</Description>
      </Parameter>
      <Parameter Name="serviceName" alias="Service Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>The name of the service you want to receive.</Description>
      </Parameter>
      <Parameter Name="services" alias="Services" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of services.</Description>
      </Parameter>
      <Parameter Name="serviceAttributes" alias="Service Attributes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Matrix of attributes of the services.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetServices categoryName serviceName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetServices(categoryName,serviceName,out services,out serviceAttributes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetServices&gt;
      &lt;categoryName&gt;{categoryName}&lt;/categoryName&gt;
      &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
      &lt;/GetServices&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetServices resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Services&gt;
        &lt;Service Name="ServiceModel1" Description=""&gt;
        &lt;Attributes&gt;
        &lt;Attribute Name="Alarm State" Type="String" IsRequired="false" DefaultValue="On" PossibleValues="On,Off"&gt; &lt;/Attribute&gt;
        &lt;Attribute Name="Part Number" Type="String" IsRequired="false" DefaultValue="1" PossibleValues=""&gt; &lt;/Attribute&gt;
        &lt;/Attributes&gt;
        &lt;/Service&gt;
        &lt;/Services&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] services;
        string[,] serviceAttributes;
        string resultXml;
        testShellAPI.GetServices("CategoryName", "ServiceName", out services, out serviceAttributes, out resultXml);
      </Input>
      <Output Name="services">
      </Output>
      <Output Name="resultXml">
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="services" src="" />
      <Output Name="serviceAttributes" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetServices&gt;
        &lt;categoryName&gt;{categoryName}&lt;/categoryName&gt;
        &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
        &lt;/GetServices&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Services&gt;
        &lt;Service Name="ServiceModel1" Description=""&gt;
        &lt;Attributes&gt;
        &lt;Attribute Name="Alarm State" Type="String" IsRequired="false" DefaultValue="On" PossibleValues="On,Off"&gt; &lt;/Attribute&gt;
        &lt;Attribute Name="Part Number" Type="String" IsRequired="false" DefaultValue="1" PossibleValues=""&gt; &lt;/Attribute&gt;
        &lt;/Attributes&gt;
        &lt;/Service&gt;
        &lt;/Services&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetReservationServicesPositions" Title="Get service positions in a reservation." Lang="all" Category="Reservation operations\Layout">
    <Description>Retrieves the x/y coordinates for all services in the reservation's diagram.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="layout" alias="Diagram Layout" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>All the services and their positions in the diagram.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::GetReservationServicesPositions reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">GetReservationServicesPositions(reservationId,out layout,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;GetReservationServicesPositions&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/GetReservationServicesPositions&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetReservationServicesPositions $reservationId resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] layout;
        string resultXml;
        testShellAPI.GetReservationServicesPositions(reservationId, out layout, out resultXml);
      </Input>
      <Output Name="layout" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="layout" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetReservationServicesPositions&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/GetReservationServicesPositions&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;layout/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetVlanAutoSelectFirstNumericFromRange" Title="" Lang="tcl;py" Category="Reservation operations\VLanPool">
    <Description>Request to get the first available numeric vlan from given range</Description>
    <Parameters>
      <Parameter Name="poolId" alias="Pool Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the vlan pool id.</Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="ownerId" alias="Owner Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the owner id.</Description>
      </Parameter>
      <Parameter Name="isolation" alias="Isolation" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested isolation level for the requested vlan.</Description>
      </Parameter>
      <Parameter Name="start" alias="Start" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested vlan range start.</Description>
      </Parameter>
      <Parameter Name="end" alias="End" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested vlan range end.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;GetVlanAutoSelectFirstNumericFromRange&gt;
      &lt;poolId&gt;{poolId}&lt;/poolId&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;ownerId&gt;{ownerId}&lt;/ownerId&gt;
      &lt;isolation&gt;{isolation}&lt;/isolation&gt;
      &lt;start&gt;{start}&lt;/start&gt;
      &lt;end&gt;{end}&lt;/end&gt;
      &lt;/GetVlanAutoSelectFirstNumericFromRange&gt;
    </Syntax>
    <Syntax Lang="tcl">::TestShellAPI::GetVlanAutoSelectFirstNumericFromRange poolId reservationId ownerId isolation start end ?resultXml?</Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetVlanAutoSelectFirstNumericFromRange&gt;
        &lt;poolId&gt;Global&lt;/poolId&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;ownerId&gt;VlanService&lt;/ownerId&gt;
        &lt;isolation&gt;Shared&lt;/isolation&gt;
        &lt;start&gt;10&lt;/start&gt;
        &lt;end&gt;100&lt;/end&gt;
        &lt;/GetVlanAutoSelectFirstNumericFromRange&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="VlanPoolSingleNumericInfo"&gt;
        &lt;VlanId&gt;10&lt;/VlanId&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetVlanAutoSelectFirstNumericFromRange "pool" $reservationId "owner" "Shared" 10 20 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo VlanId="10"&gt;&lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetVlanSpecificNumericRange" Title="" Lang="tcl;py" Category="Reservation operations\VLanPool">
    <Description>Request to get the specific numeric vlan range</Description>
    <Parameters>
      <Parameter Name="poolId" alias="Pool Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the vlan pool id.</Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="ownerId" alias="Owner Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the owner id.</Description>
      </Parameter>
      <Parameter Name="isolation" alias="Isolation" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested isolation level for the requested vlan.</Description>
      </Parameter>
      <Parameter Name="start" alias="Start" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested vlan range start.</Description>
      </Parameter>
      <Parameter Name="end" alias="End" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested vlan range end.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;GetVlanSpecificNumericRange&gt;
      &lt;poolId&gt;{poolId}&lt;/poolId&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;ownerId&gt;{ownerId}&lt;/ownerId&gt;
      &lt;isolation&gt;{isolation}&lt;/isolation&gt;
      &lt;start&gt;{start}&lt;/start&gt;
      &lt;end&gt;{end}&lt;/end&gt;
      &lt;/GetVlanSpecificNumericRange&gt;
    </Syntax>
    <Syntax Lang="tcl">::TestShellAPI::GetVlanSpecificNumericRange poolId reservationId ownerId isolation start end ?resultXml?</Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetVlanSpecificNumericRange&gt;
        &lt;poolId&gt;Global&lt;/poolId&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;ownerId&gt;VlanService&lt;/ownerId&gt;
        &lt;isolation&gt;Shared&lt;/isolation&gt;
        &lt;start&gt;10&lt;/start&gt;
        &lt;end&gt;100&lt;/end&gt;
        &lt;/GetVlanSpecificNumericRange&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="VlanPoolRangeNumericInfo"&gt;
        &lt;VlanRange&gt;
        &lt;Start&gt;&lt;/Start&gt;
        &lt;End&gt;&lt;/End&gt;
        &lt;/VlanRange&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetVlanSpecificNumericRange "pool" $reservationId "owner" "Shared" 10 20 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Output="success" xsi:type="VlanPoolRangeNumericInfo"&gt;
        &lt;VlanRange Start=10 End=20 /&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="GetVlanSpecificNumeric" Title="" Lang="tcl;py" Category="Reservation operations\VLanPool">
    <Description>Request to get a specific numeric vlan</Description>
    <Parameters>
      <Parameter Name="poolId" alias="Pool Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the vlan pool id.</Description>
      </Parameter>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="ownerId" alias="Owner Id" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the owner id.</Description>
      </Parameter>
      <Parameter Name="isolation" alias="Isolation" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested isolation level for the requested vlan.</Description>
      </Parameter>
      <Parameter Name="specificValue" alias="Specific Value" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the requested vlan.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="xmlrpc">
      &lt;GetVlanSpecificNumeric&gt;
      &lt;poolId&gt;{poolId}&lt;/poolId&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;ownerId&gt;{ownerId}&lt;/ownerId&gt;
      &lt;isolation&gt;{isolation}&lt;/isolation&gt;
      &lt;specificValue&gt;{specificValue}&lt;/specificValue&gt;
      &lt;/GetVlanSpecificNumeric&gt;
    </Syntax>
    <Syntax Lang="tcl">::TestShellAPI::GetVlanSpecificNumeric poolId reservationId ownerId isolation specificValue ?resultXml?</Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;GetVlanSpecificNumeric&gt;
        &lt;poolId&gt;Global&lt;/poolId&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;ownerId&gt;VlanService&lt;/ownerId&gt;
        &lt;isolation&gt;Shared&lt;/isolation&gt;
        &lt;specificValue&gt;10&lt;/specificValue&gt;
        &lt;/GetVlanSpecificNumeric&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="VlanPoolSingleNumericInfo"&gt;
        &lt;VlanId&gt;10&lt;/VlanId&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::GetVlanSpecificNumeric "pool" $reservationId "owner" "Shared" 10 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo VlanId="10"&gt;&lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="IncludeResource" Title="Include a resource." Lang="all" Category="Inventory operations\Including &amp; excluding">
    <Description>Includes a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::IncludeResource resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">IncludeResource(resourceFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;IncludeResource&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/IncludeResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::IncludeResource "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.IncludeResource("L1 Switch 1234");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;IncludeResource&gt;
        &lt;resourceFullPath&gt;L1 Switch 1234&lt;/resourceFullPath&gt;
        &lt;/IncludeResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="IncludeResources" Title="Includes the specified resources." Lang="all" Category="Inventory operations\Including &amp; excluding">
    <Description>Includes the specified resources.</Description>
    <Parameters>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::IncludeResources resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">IncludeResources(resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;IncludeResources&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/IncludeResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::IncludeResources "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.IncludeResources(new[] {"L1 Switch 1234"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;IncludeResources&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;L1 Switch 1234&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/IncludeResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="LockResource" Title="Lock a resource." Lang="all" Category="Inventory operations\Locking &amp; unlocking">
    <Description>Locks a specified resource.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::LockResource reservationId resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">LockResource(reservationId,resourceFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;LockResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/LockResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::LockResource $reservationId "GenericResource 1234/Port 1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.LockResource(reservationId, "GenericResource 1234/Port 1");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;LockResource&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234/Port 1&lt;/resourceFullPath&gt;
        &lt;/LockResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="LockResources" Title="Lock multiple resources." Lang="all" Category="Inventory operations\Locking &amp; unlocking">
    <Description>Locks multiple resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::LockResources reservationId resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">LockResources(reservationId,resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;LockResources&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/LockResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::LockResources $reservationId {"GenericResource 1234/Port 1" "GenericResource 1234/Port 2"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.LockResources(reservationId,new string[]{"GenericResource 1234/Port 1" "GenericResource 1234/Port 2"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;LockResources&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 2&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/LockResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="Logoff" Title="Logoff from resource manager service." Lang="all" Category="User management\Login">
    <Description>Logs out the current user.</Description>
    <Parameters>
      <Parameter Name="token" alias="Token" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="in">
        <Description>Specify the token to be revoked (optional).</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::Logoff token ?resultXml?</Syntax>
    <Syntax Lang="cSharp">Logoff();</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;Logoff&gt;
      &lt;token&gt;{token}&lt;/token&gt;
      &lt;/Logoff&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::Logoff YCrgRMAu/kOntENgVTqNlg== resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.Logoff();
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;Logoff&gt;
        &lt;token&gt;YCrgRMAu/kOntENgVTqNlg==&lt;/token&gt;
        &lt;/Logoff&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="Logon" Title="Log in to the TestShell service." Lang="all" Category="User management\Login">
    <Description>Logs in a user. If no user is specified, this method logs in the current user. If no domain is specified, this method logs the user in to the global (default) domain.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Username to logon with.</Description>
      </Parameter>
      <Parameter Name="password" alias="Password" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the user’s login password.</Description>
      </Parameter>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="Global" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the name of the domain. If no domain is specified, it logs the user in to the global (default) domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::Logon username password domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">Logon(username,password,domainName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;Logon&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;password&gt;{password}&lt;/password&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/Logon&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::Logon admin admin Global resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="LogonResponseInfo"&gt;
        &lt;Domain Name="Global" Description="A domain that includes all available resources" DomainId="dbaf480c-09f7-46d3-a2e2-e35d3e374a16" /&gt;
        &lt;User Name="admin" IsAdmin="false" IsActive="false" IsDomainAdmin="false" /&gt;
        &lt;Token Token="Yzhumq0qVkyIwyMkxzk7wQ==" /&gt;
        &lt;/ResponseInfo>
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.Logon("admin","admin","Global");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;Logon&gt;
        &lt;username&gt;admin&lt;/username&gt;
        &lt;password&gt;admin&lt;/password&gt;
        &lt;domainName&gt;Global&lt;/domainName&gt;
        &lt;/Logon&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="LogonResponseInfo"&gt;
        &lt;Domain Name="Global" Description="A domain that includes all available resources" DomainId="dbaf480c-09f7-46d3-a2e2-e35d3e374a16" /&gt;
        &lt;User Name="admin" IsAdmin="false" IsActive="false" IsDomainAdmin="false" /&gt;
        &lt;Token Token="Yzhumq0qVkyIwyMkxzk7wQ==" /&gt;
        &lt;/ResponseInfo>
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="LogoutTNSession" Title="Logout from a console port TN session." Lang="all" Category="Inventory operations\Console Management">
    <Description>Logs the user out from a console port TN session.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="consolePortsFullPath" alias="Console Ports" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of console ports according to their location in the Resource Explorer. Include the full path from the root to each console port, separated by slashes. For example: Console/Ports/PortName.</Description>
      </Parameter>
      <Parameter Name="baudRate" alias="Baud Rate" Type="BaudRate" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the baud rate to apply to the ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::LogoutTNSession reservationId resourceFullPath consolePortsFullPath baudRate ?resultXml?</Syntax>
    <Syntax Lang="cSharp">LogoutTNSession(reservationId,resourceFullPath,consolePortsFullPath,baudRate,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;LogoutTNSession&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;consolePortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/consolePortsFullPath&gt;
      &lt;baudRate&gt;{baudRate}&lt;/baudRate&gt;
      &lt;/LogoutTNSession&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::LogoutTNSession $reservationId "GenericResource 1234" {"GenericResource 1234/ConsolePort 21"} 9600 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.LogoutTNSession(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/ConsolePort 21"},BaudRate.Baud9600,out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;LogoutTNSession&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;consolePortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/ConsolePort 21&lt;/string&gt;
        &lt;/consolePortsFullPath&gt;
        &lt;baudRate&gt;9600&lt;/baudRate&gt;
        &lt;/LogoutTNSession&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="MapPorts" Title="Map ports on a L1 switch." Lang="all" Category="Inventory management\Mapping">
    <Description>Maps a pair of ports on a physical (L1) switch.</Description>
    <Parameters>
      <Parameter Name="sourcePort" alias="Source Port" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the source port.</Description>
      </Parameter>
      <Parameter Name="destinationPort" alias="Destination Port" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the destination port.</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for Bidirectional mapping or 'uni' for Unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::MapPorts sourcePort destinationPort mappingType ?resultXml?</Syntax>
    <Syntax Lang="cSharp">MapPorts(sourcePort,destinationPort,mappingType);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;MapPorts&gt;
      &lt;sourcePort&gt;{sourcePort}&lt;/sourcePort&gt;
      &lt;destinationPort&gt;{destinationPort}&lt;/destinationPort&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;/MapPorts&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::MapPorts "L1 Switch 1234/Blade 1/Port 1" "L1 Switch 1234/Blade 1/Port 3" bi resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.MapPorts("L1 Switch 1234/Blade 1/Port 1","L1 Switch 1234/Blade 1/Port 3",MappingType.Bidirectional);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;MapPorts&gt;
        &lt;sourcePort&gt;L1 Switch 1234/Blade 1/Port 1&lt;/sourcePort&gt;
        &lt;destinationPort&gt;L1 Switch 1234/Blade 1/Port 3&lt;/destinationPort&gt;
        &lt;mappingType&gt;bi&lt;/mappingType&gt;
        &lt;/MapPorts&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="PowerCycleResource" Title="Cycle power for resource power ports." Lang="all" Category="Inventory operations\Power Management">
    <Description>Cycles the power options for resource power ports.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the reservation’s unique identifier. Admin users may leave this parameter blank to perform power operations on excluded resources.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="powerPortsFullPath" alias="Power Ports" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of power ports to use in this operation. Include the full path from the root resource to each power port, separated by slashes. For example: Switch20/Blade5/PowerPort1. Leave blank to perform the power operation on all of the specified resource’s power ports.</Description>
      </Parameter>
      <Parameter Name="delay" alias="Delay" Type="double" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the number of seconds to delay between each power cycle.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The power cycle results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::PowerCycleResource reservationId resourceFullPath powerPortsFullPath delay ?resultXml?</Syntax>
    <Syntax Lang="cSharp">PowerCycleResource(reservationId,resourceFullPath,powerPortsFullPath,delay,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;PowerCycleResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;powerPortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/powerPortsFullPath&gt;
      &lt;delay&gt;{delay}&lt;/delay&gt;
      &lt;/PowerCycleResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::PowerCycleResource $reservationId "GenericResource 1234" {"GenericResource 1234/PowerPort 11"} 2 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.PowerCycleResource(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/PowerPort 11"},2,out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;PowerCycleResource&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;powerPortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/PowerPort 11&lt;/string&gt;
        &lt;/powerPortsFullPath&gt;
        &lt;delay&gt;2&lt;/delay&gt;
        &lt;/PowerCycleResource&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="PowerOffResource" Title="Power off resource power ports." Lang="all" Category="Inventory operations\Power Management">
    <Description>Powers off specified power ports.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the reservation’s unique identifier. Admin users may leave this parameter blank to perform power operations on excluded resources.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="powerPortsFullPath" alias="Power Ports" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of power ports to use in this operation. Include the full path from the root resource to each power port, separated by slashes. For example: Switch20/Blade5/PowerPort1. Leave blank to perform the power operation on all of the specified resource’s power ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The power off results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::PowerOffResource reservationId resourceFullPath powerPortsFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">PowerOffResource(reservationId,resourceFullPath,powerPortsFullPath,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;PowerOffResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;powerPortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/powerPortsFullPath&gt;
      &lt;/PowerOffResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::PowerOffResource $reservationId "GenericResource 1234" {"GenericResource 1234/PowerPort 11"} resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.PowerOffResource(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/PowerPort 11"},out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;PowerOffResource&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;powerPortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/PowerPort 11&lt;/string&gt;
        &lt;/powerPortsFullPath&gt;
        &lt;/PowerOffResource&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="PowerOnResource" Title="Power on resource power ports." Lang="all" Category="Inventory operations\Power Management">
    <Description>Powers on resource power ports.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the reservation’s unique identifier. Admin users may leave this parameter blank to perform power operations on excluded resources.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="powerPortsFullPath" alias="Power Ports" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the list of power ports to use in this operation. Include the full path from the root resource to each power port, separated by slashes. For example: Switch20/Blade5/PowerPort1. Leave blank to perform the power operation on all of the specified resource’s power ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The power on results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::PowerOnResource reservationId resourceFullPath powerPortsFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">PowerOnResource(reservationId,resourceFullPath,powerPortsFullPath,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;PowerOnResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;powerPortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/powerPortsFullPath&gt;
      &lt;/PowerOnResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::PowerOnResource $reservationId "GenericResource 1234" {"GenericResource 1234/PowerPort 11"} resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.PowerOnResource(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/PowerPort 11"},out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;PowerOnResource&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;powerPortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/PowerPort 11&lt;/string&gt;
        &lt;/powerPortsFullPath&gt;
        &lt;/PowerOnResource&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveAttributeRestrictedValues" Title="remove attribute restrictions" Lang="tcl;py;xmlrpc" Category="Configuration">
    <Description>remove attribute restrictions from family/model</Description>
    <Parameters>
      <Parameter Name="removeAttributeRestrictionRequests" alias="attribute restrictions to remove" Type="string[,]" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>Attribute restrictions to remove".</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveAttributeRestrictedValues removeAttributeRestrictionRequests ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;RemoveAttributeRestrictedValues&gt;
      &lt;removeAttributeRestrictionRequests&gt;
      &lt;RemoveRestrictionRequest&gt;
      &lt;FamilyName&gt;{FamilyName}&lt;/FamilyName&gt;
      &lt;ModelName&gt;{ModelName}&lt;/ModelName&gt;
      &lt;Attributes&gt;
      &lt;Attribute&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;RestrictedValue&gt;{RestrictedValue}&lt;/RestrictedValue&gt;
      &lt;/Attribute&gt;
      &lt;/Attributes&gt;
      &lt;/RemoveRestrictionRequest&gt;
      &lt;/removeAttributeRestrictionRequests&gt;
      &lt;/RemoveAttributeRestrictedValues&gt;
    </Syntax>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveAttributeRestrictedValues&gt;
        &lt;removeAttributeRestrictionRequests&gt;
        &lt;RemoveRestrictionRequest&gt;
        &lt;FamilyName&gt;Bridge&lt;/FamilyName&gt;
        &lt;ModelName&gt;Bridge Model&lt;/ModelName&gt;
        &lt;Attributes&gt;
        &lt;Attribute&gt;
        &lt;Name&gt;Cluster&lt;/Name&gt;
        &lt;RestrictedValue&gt;Org-2&lt;/RestrictedValue&gt;
        &lt;RestrictedValue&gt;Org-2&lt;/RestrictedValue&gt;
        &lt;/Attribute&gt;
        &lt;/Attributes&gt;
        &lt;/RemoveRestrictionRequest&gt;
        &lt;/removeAttributeRestrictionRequests&gt;
        &lt;/RemoveAttributeRestrictedValues&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ReplaceServiceWithResource" Title="replace a service with resource" Lang="xmlrpc" Category="Reservation operations\Services">
    <Description>Replace a service in reservation with resource</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation id" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The id of the reservation.</Description>
      </Parameter>
      <Parameter Name="serviceName" alias="Service name" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The name of the service in reservation.</Description>
      </Parameter>
      <Parameter Name="domainName" alias="Domain name" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The name of the domain new resources will be added to. (leave empty for Global domain)</Description>
      </Parameter>
      <Parameter Name="resourceDriverName" alias="Resource driver name" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>The driver name that would be set on the new resources that will be created.</Description>
      </Parameter>
      <Parameter Name="resourceCreationRequests" alias="Resource creation request" Type="string[,]" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>Requests for creating new resources.</Description>
      </Parameter>
      <Parameter Name="resourceAttributesToUpdate" alias="Resource attributes to update" Type="string[,]" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="true" Direction="in">
        <Description>Attributes to update on new resources.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl;py;xmlrpc" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ReplaceServiceWithResource reservationId serviceName domainName resourceDriverName resourceCreationRequests resourceAttributesToUpdate ?resultXml?</Syntax>
    <Syntax Lang="xmlrpc">
      &lt;ReplaceServiceWithResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;resourceDriverName&gt;{resourceDriverName}&lt;/resourceDriverName&gt;
      &lt;resourceCreationRequests&gt;
      &lt;ResourceInfoDto&gt;
      &lt;Family&gt;{Family}&lt;/Family&gt;
      &lt;Model&gt;{Model}&lt;/Model&gt;
      &lt;FullName&gt;{FullName}&lt;/FullName&gt;
      &lt;Address&gt;{Address}&lt;/Address&gt;
      &lt;FolderFullpath&gt;{FolderFullpath}&lt;/FolderFullpath&gt;
      &lt;Description&gt;{Description}&lt;/Description&gt;
      &lt;ParentFullName&gt;{ParentFullName}&lt;/ParentFullName&gt;
      &lt;/ResourceInfoDto&gt;
      &lt;/resourceCreationRequests&gt;
      &lt;resourceAttributesToUpdate&gt;
      &lt;ResourceAttributesUpdateRequest&gt;
      &lt;ResourceFullName&gt;{ResourceFullName}&lt;/ResourceFullName&gt;
      &lt;AttributeNamesValues&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/AttributeNamesValues&gt;
      &lt;/ResourceAttributesUpdateRequest&gt;
      &lt;/resourceAttributesToUpdate&gt;
      &lt;/ReplaceServiceWithResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ReplaceServiceWithResource "2683E6F5-C27D-4468-975C-59D7A4503BD9" "myServiceName" "MyDomain" "" myResourceCreationRequests myResourceAttributesToUpdate resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;RootResources&gt;
        MyNewResource
        &lt;/RootResources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ReplaceServiceWithResource&gt;
        &lt;reservationId&gt;EAE1752D-461F-4049-BEC7-58F37AFB4557&lt;/reservationId&gt;
        &lt;serviceName&gt;myService&lt;/serviceName&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;resourceDriverName&gt;myResourceDriver&lt;/resourceDriverName&gt;
        &lt;resourceCreationRequests&gt;
        &lt;ResourceInfoDto&gt;
        &lt;Family&gt;ResourceFamily&lt;/Family&gt;
        &lt;Model&gt;ResourceModel&lt;/Model&gt;
        &lt;FullName&gt;MyNewResource&lt;/FullName&gt;
        &lt;Address&gt;1.1.1.1&lt;/Address&gt;
        &lt;FolderFullpath&gt;MyNewResourcesFolder&lt;/FolderFullpath&gt;
        &lt;Description&gt;My New Resource&lt;/Description&gt;
        &lt;ParentFullName&gt;MyNewResource&lt;/ParentFullName&gt;
        &lt;/ResourceInfoDto&gt;
        &lt;/resourceCreationRequests&gt;
        &lt;resourceAttributesToUpdate&gt;
        &lt;ResourceAttributesUpdateRequest&gt;
        &lt;ResourceFullName&gt;MyNewResource&lt;/ResourceFullName&gt;
        &lt;AttributeNamesValues&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;NewResourceAttribute1&lt;/Name&gt;
        &lt;Value&gt;Hello&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/AttributeNamesValues&gt;
        &lt;/ResourceAttributesUpdateRequest&gt;
        &lt;/resourceAttributesToUpdate&gt;
        &lt;/ReplaceServiceWithResource&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;RootResources&gt;
        MyNewResource
        &lt;/RootResources&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RecheckConflicts" Title="View which resources are available for a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Updates the list of available resources for a reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RecheckConflicts reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RecheckConflicts(reservationId);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RecheckConflicts&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/RecheckConflicts&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RecheckConflicts $reservationId resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.RecheckConflicts(reservationId);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RecheckConflicts&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/RecheckConflicts&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ReleaseResourcesFromReservation" Title="Release occupied testing resources." Lang="all" Category="Reservation operations\Resources">
    <Description>Releases occupied testing resources that would not otherwise be available until the end of the current reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ReleaseResourcesFromReservation reservationId resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ReleaseResourcesFromReservation(reservationId,resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ReleaseResourcesFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/ReleaseResourcesFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ReleaseResourcesFromReservation $reservationId {"GenericResource 1234" "Router 1234/Port 1"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.ReleaseResourcesFromReservation(reservationId, new string[]{"GenericResource 1234","Router 1234/Port 1"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ReleaseResourcesFromReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234&lt;/string&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/ReleaseResourcesFromReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ReleaseTopologyResources" Title="Release resources used in topology." Lang="all" Category="Inventory management\Topologies">
    <Description>Releases resources used in topology. A reservation will not end until all used resources are released.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ReleaseTopologyResources reservationId topologyFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ReleaseTopologyResources(reservationId, topologyFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ReleaseTopologyResources&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;/ReleaseTopologyResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ReleaseTopologyResources $reservationId "Temp Automation Resources/TP1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.ReleaseTopologyResources(reservationId, "Temp Automation Resources/TP1");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ReleaseTopologyResources&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;topologyFullPath&gt;Temp Automation Resources/TP1&lt;/topologyFullPath&gt;
        &lt;/ReleaseTopologyResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ReloadTopology" Title="Reload a topology." Lang="all" Category="Reservation operations\Topologies">
    <Description>Removes and adds the specified topology back to the reservation, after re-evaluating it and all its resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the full topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="conflicts" alias="Resource Conflicts" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Resource conflicts and their associated values for the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ReloadTopology reservationId topologyFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ReloadTopology(reservationId,topologyFullPath,out conflicts,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ReloadTopology&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;/ReloadTopology&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ReloadTopology $reservationId "Temp Automation Resources/TP1" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] conflicts;
        testShellAPI.ReloadTopology(reservationId,"Temp Automation Resources/TP1",out conflicts,out resultXml);
      </Input>
      <Output Name="conflicts" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="conflicts" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ReloadTopology&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;topologyFullPath&gt;Temp Automation Resources/TP1&lt;/topologyFullPath&gt;
        &lt;/ReloadTopology&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveGroupsFromDomain" Title="Remove groups from a domain." Lang="all" Category="User management\Domains">
    <Description>Remove groups from a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="groupNames" alias="Groups Names" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of one or more groups.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveGroupsFromDomain domainName groupNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveGroupsFromDomain(domainName,groupNames);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveGroupsFromDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;groupNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/groupNames&gt;
      &lt;/RemoveGroupsFromDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveGroupsFromDomain Global {QA_Users} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemoveGroupsFromDomain("Global", new string[] {"QA_Users"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveGroupsFromDomain&gt;
        &lt;domainName&gt;Global&lt;/domainName&gt;
        &lt;groupNames&gt;
        &lt;string&gt;QA_Users&lt;/string&gt;
        &lt;/groupNames&gt;
        &lt;/RemoveGroupsFromDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemovePermittedUsersFromReservation" Title="Remove permitted users from a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Remove one or more permitted users from the specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="usernames" alias="User Names" Type="string[]" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>List of permitted users to remove from the reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemovePermittedUsersFromReservation reservationId usernames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemovePermittedUsersFromReservation(reservationId,usernames);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemovePermittedUsersFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;usernames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/usernames&gt;
      &lt;/RemovePermittedUsersFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemovePermittedUsersFromReservation "2d2f7cde-20g3-4bac-80d2-e8cfhecef45b" {"name1"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemovePermittedUsersFromReservation("2d2f7cde-20g3-4bac-80d2-e8cfhecef45b",new string[]{"name1","name2"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemovePermittedUsersFromReservation&gt;
        &lt;reservationId&gt;2d2f7cde-20g3-4bac-80d2-e8cfhecef45b&lt;/reservationId&gt;
        &lt;usernames&gt;
        &lt;string&gt;
        {name1}
        &lt;/string&gt;
        &lt;/usernames&gt;
        &lt;/RemovePermittedUsersFromReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveResourcesFromDomain" Title="Remove resources from a domain." Lang="all" Category="User management\Domains">
    <Description>Remove resources from a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="resourcesNames" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveResourcesFromDomain domainName resourcesNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveResourcesFromDomain(domainName,resourcesNames);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;RemoveResourcesFromDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;resourcesNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesNames&gt;
      &lt;/RemoveResourcesFromDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveResourcesFromDomain Domain1 {"Router 1234" "GenericResource 1234"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemoveResourcesFromDomain("Domain1", new string[]{"Router 1234","GenericResource 1234"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveResourcesFromDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;resourcesNames&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;string&gt;GenericResource 1234&lt;/string&gt;
        &lt;/resourcesNames&gt;
        &lt;/RemoveResourcesFromDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveResourcesFromReservation" Title="Remove resources from a reservation." Lang="all" Category="Reservation operations\Resources">
    <Description>Unlocks and removes resources from a reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveResourcesFromReservation reservationId resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveResourcesFromReservation(reservationId,resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveResourcesFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/RemoveResourcesFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveResourcesFromReservation $reservationId {"Router 1234" "GenericResource 1234"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        testShellAPI.RemoveResourcesFromReservation(reservationId, new string[]{"Router 1234","GenericResource 1234"});
      </Input>
      <Output Name="conflicts" />
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="conflicts" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveResourcesFromReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;string&gt;GenericResource 1234&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/RemoveResourcesFromReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Conflicts/&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveConnectorsFromReservation" Title="Remove connectors from a reservation." Lang="all" Category="Reservation operations\Routing">
    <Description>Removes the mapped connector between given end points.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="endpoints" alias="Endpoints" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The list of removed endpoints.</Description>
      </Parameter>
      <Parameter Name="connectors" alias="Removed Connectors" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The list of removed connectors.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveConnectorsFromReservation reservationId endpoints ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveConnectorsFromReservation(reservationId,endpoints,out connectors,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveConnectorsFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;endpoints&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/endpoints&gt;
      &lt;/RemoveConnectorsFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveConnectorsFromReservation $reservationId {"Router 1234/Port 1" "GenericResource 1234/Port 1" "Router 1234/Port 1" "GenericResource 1234/Port 2"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias="a connector" Type="Default" ResourceMappingType="bi" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1"&gt;
        &lt;/Connector&gt;
        &lt;Connector Alias="uni connector" Type="Default" ResourceMappingType="uni" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"&gt;
        &lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] connectors;
        testShellAPI.RemoveConnectorsFromReservation(reservationId,new string[]{"Router 1234/Port 1","Router 1234/Port 1"},new string[]{"GenericResource 1234/Port 1","GenericResource 1234/Port 2"},out connectors,out resultXml);
      </Input>
      <Output Name="connectors">
        {{"Index","Source","Target","Direction","Alias"},
        {"1","Router 1234/Port 1","GenericResource 1234/Port 1","bi","a connector"},
        {"2","Router 1234/Port 1","GenericResource 1234/Port 2","uni","uni connector"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias="a connector" Type="Default" ResourceMappingType="bi" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1"&gt;
        &lt;/Connector&gt;
        &lt;Connector Alias="uni connector" Type="Default" ResourceMappingType="uni" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"&gt;
        &lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="connectors" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveConnectorsFromReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;endpoints&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 2&lt;/string&gt;
        &lt;/endpoints&gt;
        &lt;/RemoveConnectorsFromReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias="a connector" Type="Default" ResourceMappingType="bi" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1"&gt;
        &lt;/Connector&gt;
        &lt;Connector Alias="uni connector" Type="Default" ResourceMappingType="uni" Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"&gt;
        &lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveRoutesFromReservation" Title="Remove routes from a reservation." Lang="all" Category="Reservation operations\Routing">
    <Description>Disconnects a list of endpoints and removes the mapped route between them. Will only disconnect endpoints using resources reserved to the logged-in user .</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="endpoints" alias="Endpoints" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The list of removed endpoints.</Description>
      </Parameter>
      <Parameter Name="mappingType" alias="Mapping Type" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the mapping type.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional mapping or 'uni' for unidirectional mapping.</MoreDescription>
      </Parameter>
      <Parameter Name="routes" alias="Removed Routes" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The list of removed routes.</Description>
      </Parameter>
      <Parameter Name="segments" alias="Segments" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The list of removed segments.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveRoutesFromReservation reservationId endpoints mappingType ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveRoutesFromReservation(reservationId,endpoints,mappingType,out routes,out segments,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveRoutesFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;endpoints&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/endpoints&gt;
      &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
      &lt;/RemoveRoutesFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveRoutesFromReservation $reservationId {"Router 1234/Port 1" "GenericResource 1234/Port 1" "Router 1234/Port 1" "GenericResource 1234/Port 2"} bi resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" Alias="a route" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" Alias="uni route" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes,segments;
        testShellAPI.RemoveRoutesFromReservation(reservationId,new string[]{"Router 1234/Port 1","Router 1234/Port 1"},new string[]{"GenericResource 1234/Port 1","GenericResource 1234/Port 2"},MappingType.Bidirectional,out routes,out segments,out resultXml);
      </Input>
      <Output Name="routes">
        {{"Index","Source","Target","RouteType","Alias","Shared"},
        {"1","Router 1234/Port 1","GenericResource 1234/Port 1","bi","a route","true"},
        {"2","Router 1234/Port 1","GenericResource 1234/Port 2","uni","uni route","true"}}
      </Output>
      <Output Name="segments">
        {{"RouteIndex","Source","Target"},
        {"1","Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3"},
        {"1","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 1"},
        {"1","L1 Switch 1234/Blade 1/Port 1","GenericResource 1234/Port 1"},
        {"2","Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3"},
        {"2","L1 Switch 1234/Blade 1/Port 3","L1 Switch 1234/Blade 1/Port 2"},
        {"2","L1 Switch 1234/Blade 1/Port 2","GenericResource 1234/Port 2"}}
      </Output>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" Alias="a route" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" Alias="uni route" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="routes" src="" />
      <Output Name="segments" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveRoutesFromReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;endpoints&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;string&gt;Router 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 2&lt;/string&gt;
        &lt;/endpoints&gt;
        &lt;mappingType&gt;{mappingType}&lt;/mappingType&gt;
        &lt;/RemoveRoutesFromReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 1" Alias="a route" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 1" Target="GenericResource 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" Alias="uni route" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveTopologiesFromDomain" Title="Removes a list of one or more topologies from a domain." Lang="all" Category="User management\Domains">
    <Description>Removes a list of one or more topologies from a domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="topologyNames" alias="Topologies Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of topology names. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveTopologiesFromDomain domainName topologyNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveTopologiesFromDomain(domainName,topologyNames);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;RemoveTopologiesFromDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;topologyNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/topologyNames&gt;
      &lt;/RemoveTopologiesFromDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveTopologiesFromDomain Domain1 {"Topology1"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemoveTopologiesFromDomain("Domain1", new string[] { "Topology1" });
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveTopologiesFromDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;topologyNames&gt;
        &lt;string&gt;Topology1&lt;/string&gt;
        &lt;/topologyNames&gt;
        &lt;/RemoveTopologiesFromDomain&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveUsersFromGroup" Title="Remove users from a group." Lang="all" Category="User management\Groups">
    <Description>Removes a list of one or more users from the specified group.</Description>
    <Parameters>
      <Parameter Name="usernames" alias="Usernames" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of one or more users.</Description>
      </Parameter>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveUsersFromGroup usernames groupName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveUsersFromGroup(usernames,groupName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveUsersFromGroup&gt;
      &lt;usernames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/usernames&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;/RemoveUsersFromGroup&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveUsersFromGroup {User1234 User2345} QA_Users resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemoveUsersFromGroup(new string[] { "User1234", "User2345" }, "QA_Users");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveUsersFromGroup&gt;
        &lt;usernames&gt;
        &lt;string&gt;User1234&lt;/string&gt;
        &lt;string&gt;User2345&lt;/string&gt;
        &lt;/usernames&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;/RemoveUsersFromGroup&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveTopologyCategory"  Title="Removes a category from given topology." Lang="all" Category="Inventory management\Topologies">
    <Description>Removes a category from given topology.</Description>>
    <Parameters>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology we want to remove the given category from.</Description>
      </Parameter>
      <Parameter Name="categoryName" alias="Category Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the category's name which we want to remove.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveTopologyCategory topologyFullPath categoryName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveTopologyCategory(topologyFullPath, categoryName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveTopologyCategory&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;categoryName&gt;{categoryName}&lt;/categoryName&gt;
      &lt;/RemoveTopologyCategory&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        ::TestShellAPI::RemoveTopologyCategory "myDir/myTopology" lookUpCategory resultXml
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RemoveTopologyCategory("myDir/myTopology","lookUpCategory");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveTopologyCategory&gt;
        &lt;topologyFullPath&gt;myDir/myTopology&lt;/topologyFullPath&gt;
        &lt;categoryName&gt;lookUpCategory&lt;/categoryName&gt;
        &lt;/RemoveTopologyCategory&gt;
      </Input>
      <Output Name="resultXml" src="" />
    </ExampleCode>
  </Command>
  <Command Name="RenameResource" Title="Rename a resource." Lang="all" Category="Inventory management\Resources">
    <Description>Renames the specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resourceName" alias="Resource Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a new resource name.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RenameResource resourceFullPath resourceName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RenameResource(resourceFullPath,resourceName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RenameResource&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;resourceName&gt;{resourceName}&lt;/resourceName&gt;
      &lt;/RenameResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RenameResource "Router 1234" "Router 4321" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.RenameResource("Router 1234","Router 4321");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RenameResource&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;resourceName&gt;Router 4321&lt;/resourceName&gt;
        &lt;/RenameResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="ResetResourceDriver" Title="Reset a resource driver and cancel its commands." Lang="all" Category="Reservation operations\Commands">
    <Description>Cancel the currently executing command, remove all pending command executions and reset the driver to its initial state.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::ResetResourceDriver reservationId resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">ResetResourceDriver(reservationId,resourceFullPath,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;ResetResourceDriver&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/ResetResourceDriver&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::ResetResourceDriver $reservationId "Router 1234" resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="Reset completed"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.ResetResourceDriver(reservationId, "Router 1234", out output, out resultXml);
      </Input>
      <Output Name="output">Reset completed</Output>
      <Output Name="resultXml">&lt;ResponseInfo Output="Reset completed"/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;ResetResourceDriver&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;/ResetResourceDriver&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output="Reset completed"/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveAppFromReservation" Title="Remove app resource from existing reservation." Lang="all" Category="Reservation operations\Apps">
    <Description>Remove app resource to existing reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="appName" alias="App Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the app name.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveAppFromReservation reservationId appName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveAppFromReservation(reservationId,appName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveAppFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;appName&gt;{appName}&lt;/appName&gt;
      &lt;/RemoveAppFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveAppFromReservation 077e6b4f-5e70-46b5-aa4b-43e6f039acc3 "App in reservation" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId;
        string appName;
        testShellAPI.RemoveAppFromReservation(reservationId, appName);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveAppFromReservation&gt;
        &lt;reservationId&gt;077e6b4f-5e70-46b5-aa4b-43e6f039acc3&lt;/reservationId&gt;
        &lt;appName&gt;App in reservation&lt;/appName&gt;
        &lt;/RemoveAppFromReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="RemoveServicesFromReservation" Title="Remove services and apps from existing reservation." Lang="all" Category="Reservation operations\Services">
    <Description>Remove services and apps from existing reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="services" alias="List of aliases" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>List of aliases. This list should contain the aliases for both the services and apps that should be removed.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::RemoveServicesFromReservation reservationId services ?resultXml?</Syntax>
    <Syntax Lang="cSharp">RemoveServicesFromReservation(reservationId,services);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;RemoveServicesFromReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;services&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/services&gt;
      &lt;/RemoveServicesFromReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::RemoveServicesFromReservation "b8ed1fb9-7903-40de-b5b4-f6cba31f6fa0" {"alias1" "alias2"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string[,] services;
        testShellAPI.RemoveServicesFromReservation("b8ed1fb9-7903-40de-b5b4-f6cba31f6fa0", services);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;RemoveServicesFromReservation&gt;
        &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
        &lt;services&gt;
        &lt;string&gt;{string}&lt;/string&gt;
        &lt;/services&gt;
        &lt;/RemoveServicesFromReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SaveReservationAsTopology" Title="Create a topology from an existing active reservation." Lang="all" Category="Reservation operations\Topologies">
    <Description>Creates a topology from an existing reservation. Leave the folder path blank to save the topology directly under the root.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="folderFullPath" alias="Folder Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Full container folder path where the new topology will be saved. leaving the folder path empty will try saving the topology under the root.  For example: FolderName/FolderNameA.</Description>
      </Parameter>
      <Parameter Name="topologyName" alias="Topology Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the new name for the new topology.</Description>
      </Parameter>
      <Parameter Name="includeInactiveRoutes" alias="Include Inactive Routes" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Include disconnected routes in the created topology</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SaveReservationAsTopology reservationId folderFullPath topologyName includeInactiveRoutes ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SaveReservationAsTopology(reservationId,folderFullPath,topologyName,includeInactiveRoutes,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SaveReservationAsTopology&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;folderFullPath&gt;{folderFullPath}&lt;/folderFullPath&gt;
      &lt;topologyName&gt;{topologyName}&lt;/topologyName&gt;
      &lt;includeInactiveRoutes&gt;{includeInactiveRoutes}&lt;/includeInactiveRoutes&gt;
      &lt;/SaveReservationAsTopology&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SaveReservationAsTopology $reservationId "Temp Automation Resources" TP1 1 resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.SaveReservationAsTopology(reservationId,"Temp Automation Resources","TP1",YesNoOptions.Yes,out resultXml);
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SaveReservationAsTopology&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;folderFullPath&gt;Temp Automation Resources&lt;/folderFullPath&gt;
        &lt;topologyName&gt;TP1&lt;/topologyName&gt;
        &lt;includeInactiveRoutes&gt;1&lt;/includeInactiveRoutes&gt;
        &lt;/SaveReservationAsTopology&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo Name="TP1"&gt;
        &lt;Resources&gt;
        &lt;ResourceInfo Name="Router 1234/Port 1" FolderFullPath="Lab Routers" Address="1" FullAddress="192.168.1.201/1" RootAddress="192.168.1.201" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 1" FolderFullPath="Temp Automation Resources" Address="1" FullAddress="192.168.1.20/1" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 1" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Studio" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/Port 2" FolderFullPath="Temp Automation Resources" Address="2" FullAddress="192.168.1.20/2" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="Port 2" Locked="true" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo ReservationName="Immediate reservation" MachineName="PRODUCT-W7 - Tcl" Username="admin" Created="2012-06-20T17:20:37"/&gt;
        &lt;Connections FullPath="Temp Automation Resources/L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 11" FolderFullPath="Temp Automation Resources" Address="11" FullAddress="192.168.1.20/11" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 11" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/PowerPort 12" FolderFullPath="Temp Automation Resources" Address="12" FullAddress="192.168.1.20/12" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="PowerPort 12" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/SmartPower2L 1234/PowerPort 2"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234/ConsolePort 21" FolderFullPath="Temp Automation Resources" Address="21" FullAddress="192.168.1.20/21" RootAddress="192.168.1.20" ResourceFamilyName="Generic Port" ResourceModelName="Generic Port Model" Alias="ConsolePort 21" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;Connections FullPath="Temp Automation Resources/ConsoleServer 1234/ConsolePort 1"/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="GenericResource 1234" FolderFullPath="Temp Automation Resources" Address="192.168.1.20" FullAddress="192.168.1.20" RootAddress="192.168.1.20" ResourceFamilyName="Generic Resource" ResourceModelName="Generic Resource Model" Alias="GenericResource 1234" Locked="false" Excluded="false" WillBeLocked="true"&gt;
        &lt;ResourceAttributes/&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;ResourceInfo Name="Router 1234" FolderFullPath="Lab Routers" Address="192.168.1.201" FullAddress="192.168.1.201" RootAddress="192.168.1.201" ResourceFamilyName="Generic Chassis" ResourceModelName="Generic Chassis Model" Alias="Router 1234" Locked="false" Excluded="false" WillBeLocked="false"&gt;
        &lt;ResourceAttributes&gt;
        &lt;ResourceAttribute Name="SW_Version" Value="" Type="String"/&gt;
        &lt;/ResourceAttributes&gt;
        &lt;LockInfo/&gt;
        &lt;/ResourceInfo&gt;
        &lt;/Resources&gt;
        &lt;AbstractResources/&gt;
        &lt;Routes&gt;
        &lt;Route Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1" RouteType="bi" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="GenericResource 1234/Port 1" Target="Router 1234/Port 1"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SecureLogon" Title="Log in to the TestShell service using the AuthToken." Lang="all" Category="User management\Login">
    <Description>Logs in a user with a token. If no domain is specified, this method logs the user in to the global (default) domain.</Description>
    <Parameters>
      <Parameter Name="token" alias="Token" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in"><Description>Token to logon with.</Description></Parameter>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="Global" Lang="all" MandatoryValue="false" Direction="in"><Description>Specify the name of the domain. If no domain is specified, it logs the user in to the global (default) domain.</Description></Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out"><Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description></Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SecureLogon token domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SecureLogon(token,domainName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SecureLogon&gt;
      &lt;token&gt;{token}&lt;/token&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/SecureLogon&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SecureLogon xoV3libZzEG/ii7ZQqAuqw== Global resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="LogonResponseInfo"&gt;
        &lt;Domain Name="Global" Description="A domain that includes all available resources" DomainId="dbaf480c-09f7-46d3-a2e2-e35d3e374a16" /&gt;
        &lt;User Name="admin" IsAdmin="false" IsActive="false" IsDomainAdmin="false" /&gt;
        &lt;Token Token="Yzhumq0qVkyIwyMkxzk7wQ==" /&gt;
        &lt;/ResponseInfo>
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SecureLogon("xoV3libZzEG/ii7ZQqAuqw==","Global");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SecureLogon&gt;
        &lt;token&gt;xoV3libZzEG/ii7ZQqAuqw==&lt;/token&gt;
        &lt;domainName&gt;Global&lt;/domainName&gt;
        &lt;/SecureLogon&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo xsi:type="LogonResponseInfo"&gt;
        &lt;Domain Name="Global" Description="A domain that includes all available resources" DomainId="dbaf480c-09f7-46d3-a2e2-e35d3e374a16" /&gt;
        &lt;User Name="admin" IsAdmin="false" IsActive="false" IsDomainAdmin="false" /&gt;
        &lt;Token Token="Yzhumq0qVkyIwyMkxzk7wQ==" /&gt;
        &lt;/ResponseInfo>
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetAttributeValue" Title="Set an attribute value." Lang="all" Category="Inventory operations\Attributes">
    <Description>Sets the value of the specified attribute.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="attributeName" alias="Attribute Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the attribute name.</Description>
      </Parameter>
      <Parameter Name="attributeValue" alias="Attribute Value" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the attribute’s value.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetAttributeValue resourceFullPath attributeName attributeValue ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetAttributeValue(resourceFullPath,attributeName,attributeValue);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetAttributeValue&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;attributeName&gt;{attributeName}&lt;/attributeName&gt;
      &lt;attributeValue&gt;{attributeValue}&lt;/attributeValue&gt;
      &lt;/SetAttributeValue&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetAttributeValue "Router 1234" "SW_Version" "1.3" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        testShellAPI.SetAttributeValue("Router 1234", "SW_Version", "1.3");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetAttributeValue&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;attributeName&gt;SW_Version&lt;/attributeName&gt;
        &lt;attributeValue&gt;1.3&lt;/attributeValue&gt;
        &lt;/SetAttributeValue&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetAttributesValues" Title="Sets new attribute values for the specified resources." Lang="all" Category="Inventory operations\Attributes">
    <Description>Sets new attribute values for the specified resources.</Description>
    <Parameters>
      <Parameter Name="resourcesAttributesUpdateRequests" alias="Resources, Attributes, and Values" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of resources, attribute names, and new attribute values (up to 10000 rows). For example: {['ResourceFullName', 'AttributeName','AttributeValue';'ResourceFullName2', 'AttributeName2','AttributeValue2']}.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetAttributesValues resourcesAttributesUpdateRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetAttributesValues(resourcesAttributesUpdateRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetAttributesValues&gt;
      &lt;resourcesAttributesUpdateRequests&gt;
      &lt;ResourceAttributesUpdateRequest&gt;
      &lt;ResourceFullName&gt;{ResourceFullName}&lt;/ResourceFullName&gt;
      &lt;AttributeNamesValues&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/AttributeNamesValues&gt;
      &lt;/ResourceAttributesUpdateRequest&gt;
      &lt;/resourcesAttributesUpdateRequests&gt;
      &lt;/SetAttributesValues&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetAttributesValues {{resource01 {attribute01 value01 attribute02 value02}} {resource02 {attribute01 value01 attribute02 value02}}} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        testShellAPI.SetAttributesValues(new string[,] {{"resource","attribute","value"}});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetAttributesValues&gt;
        &lt;resourcesAttributesUpdateRequests&gt;
        &lt;ResourceAttributesUpdateRequest&gt;
        &lt;ResourceFullName&gt;L1 Switch 1234&lt;/ResourceFullName&gt;
        &lt;AttributeNamesValues&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;Protocol&lt;/Name&gt;
        &lt;Value&gt;Ethernet&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/AttributeNamesValues&gt;
        &lt;/ResourceAttributesUpdateRequest&gt;
        &lt;/resourcesAttributesUpdateRequests&gt;
        &lt;/SetAttributesValues&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetBaudRate" Title="Set console port baud rate." Lang="all" Category="Inventory operations\Console Management">
    <Description>Sets the baud rate for one or more console ports.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="consolePortsFullPath" alias="Console Ports" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of console ports according to their location in the Resource Explorer. Include the full path from the root to each console port, separated by slashes. For example: Console/Ports/PortName.</Description>
      </Parameter>
      <Parameter Name="baudRate" alias="Baud Rate" Type="BaudRate" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the baud rate to apply to the ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetBaudRate reservationId resourceFullPath consolePortsFullPath baudRate ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetBaudRate(reservationId,resourceFullPath,consolePortsFullPath,baudRate,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetBaudRate&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;consolePortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/consolePortsFullPath&gt;
      &lt;baudRate&gt;{baudRate}&lt;/baudRate&gt;
      &lt;/SetBaudRate&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetBaudRate $reservationId "GenericResource 1234" {"GenericResource 1234/ConsolePort 21"} 9600 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.SetBaudRate(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/ConsolePort 21"},BaudRate.Baud9600,out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetBaudRate&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;consolePortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/ConsolePort 21&lt;/string&gt;
        &lt;/consolePortsFullPath&gt;
        &lt;baudRate&gt;9600&lt;/baudRate&gt;
        &lt;/SetBaudRate&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetConsoleForXModem" Title="Set a console for Xmodem." Lang="all" Category="Inventory operations\Console Management">
    <Description>Sets one or more consoles for Xmodem.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="consolePortsFullPath" alias="Console Ports" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of console ports according to their location in the Resource Explorer. Include the full path from the root to each console port, separated by slashes. For example: Console/Ports/PortName.</Description>
      </Parameter>
      <Parameter Name="baudRate" alias="Baud Rate" Type="BaudRate" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the baud rate to apply to the ports.</Description>
      </Parameter>
      <Parameter Name="output" alias="Command Output" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>The command results.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetConsoleForXModem reservationId resourceFullPath consolePortsFullPath baudRate ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetConsoleForXModem(reservationId,resourceFullPath,consolePortsFullPath,baudRate,out output,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetConsoleForXModem&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;consolePortsFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/consolePortsFullPath&gt;
      &lt;baudRate&gt;{baudRate}&lt;/baudRate&gt;
      &lt;/SetConsoleForXModem&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetConsoleForXModem $reservationId "GenericResource 1234" {"GenericResource 1234/ConsolePort 21"} 9600 resultXml</Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI testShellAPI = new TestShellAPI();
        string output;
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.SetConsoleForXModem(reservationId,"GenericResource 1234",new string[]{"GenericResource 1234/ConsolePort 21"},BaudRate.Baud9600,out output,out resultXml);
      </Input>
      <Output Name="output" />
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="output" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetConsoleForXModem&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234&lt;/resourceFullPath&gt;
        &lt;consolePortsFullPath&gt;
        &lt;string&gt;GenericResource 1234/ConsolePort 21&lt;/string&gt;
        &lt;/consolePortsFullPath&gt;
        &lt;baudRate&gt;9600&lt;/baudRate&gt;
        &lt;/SetConsoleForXModem&gt;
      </Input>
      <Output Name="resultXml">&lt;ResponseInfo Output=""/&gt;</Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetResourceLiveStatus" Title="Sets the live status of a resource." Lang="all" Category="Inventory management\Resources">
    <Description>Sets the live status of the resource</Description>
    <Parameters>
      <Parameter Name="resourceFullName" alias="Resource Full Path " Type="string"  Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA.</Description>
      </Parameter>
      <Parameter Name="liveStatusName" alias="Live Status Name" Type="string"  Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Resource live status name</Description>
      </Parameter>
      <Parameter Name="additionalInfo" alias="Additional Info" Type="string"  Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Resource live status additional info</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string"  Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Resource live status additional info</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetResourceLiveStatus resourceFullName liveStatusName additionalInfo ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetResourceLiveStatus(resourceFullPath,liveStatusName,additionalInfo,out resultXml);</Syntax>
    <Syntax Lang="library" src="" >
      <Input Name="resourceFullName" src="" />
      <Input Name="liveStatusName" src="" />
      <Input Name="additionalInfo" src="" />
      <Output Name="resultXml" src="" />
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;SetResourceLiveStatus&gt;
      &lt;resourceFullName&gt;{resourceFullName}&lt;/resourceFullName&gt;
      &lt;liveStatusName&gt;{liveStatusName}&lt;/liveStatusName&gt;
      &lt;additionalInfo&gt;{additionalInfo}&lt;/additionalInfo&gt;
      &lt;/SetResourceLiveStatus&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetResourceLiveStatus {"myPath"} {"Online"} {"Resource was responding to pings at 12/12/2013 10:35 AM"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="Online" liveStatusDescription="Resource was responding to pings at 12/12/2013 10:35 AM"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.SetResourceLiveStatus("myResourceName", "Online" , "Resource was responding to pings at 12/12/2013 10:35 AM" , out resultXml );
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="name1" liveStatusDescription="description1"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input Name="resourceFullName" src="" >path</Input>
      <Input Name="liveStatusName" src="" >status name</Input>
      <Input Name="additionalInfo" src="" >some info</Input>
      <Output Name="resultXml" src="" >
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="name1" liveStatusDescription="description1"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetResourceLiveStatus&gt;
        &lt;resourceFullName&gt;myResourceName&lt;/resourceFullName&gt;
        &lt;liveStatusName&gt;Online&lt;/liveStatusName&gt;
        &lt;additionalInfo&gt;Resource was responding to pings at 12/12/2013 10:35 AM&lt;/additionalInfo&gt;
        &lt;/SetResourceLiveStatus&gt;
      </Input>
      <Output>
        &lt;ResponseInfo type="ResourceLiveStatusInfo" liveStatusName="Online" liveStatusDescription="description1"/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="SetReservationLiveStatus" Title="Sets the live status of the reservation." Lang="all" Category="Reservation">
    <Description>Sets the live status of the reservation</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation id " Type="string"  Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="liveStatusName" alias="Live Status Name" Type="string"  Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Reservation live status name</Description>
      </Parameter>
      <Parameter Name="additionalInfo" alias="Additional Info" Type="string"  Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Reservation live status additional info</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string"  Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Reservations live status additional info.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetReservationLiveStatus reservationId liveStatusName additionalInfo ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetReservationLiveStatus(reservationId, liveStatusName, additionalInfo);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;SetReservationLiveStatus&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;liveStatusName&gt;{liveStatusName}&lt;/liveStatusName&gt;
      &lt;additionalInfo&gt;{additionalInfo}&lt;/additionalInfo&gt;
      &lt;/SetReservationLiveStatus&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetReservationLiveStatus {DCFF5355-58F9-41F8-ABD0-2E666AC9B0FB} {"Pass"} {"REservation was responding to pings at 12/12/2013 10:35 AM"} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;ReservationLiveStatuses&gt;
        &lt;ReservationLiveStatus reservationId="344c2d21-578c-4653-a826-54c2035ff998" ReservationLiveStatusName="Pass"&gt;&lt;/ReservationLiveStatus&gt;
        &lt;/ReservationLiveStatuses&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SetReservationLiveStatus("344c2d21-578c-4653-a826-54c2035ff998", "Pass" , "Reservation was responding to pings at 12/12/2013 10:35 AM");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetReservationLiveStatus&gt;
        &lt;reservationId&gt;344c2d21-578c-4653-a826-54c2035ff998&lt;/reservationId&gt;
        &lt;liveStatusName&gt;Pass&lt;/liveStatusName&gt;
        &lt;additionalInfo&gt;Resource was responding to pings at 12/12/2013 10:35 AM&lt;/additionalInfo&gt;
        &lt;/SetReservationLiveStatus&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
  </Command>
  <Command Name="SetResourceSharedState" Title="Set the resource sharing state." Lang="all" Category="Reservation operations\Resources">
    <Description>Sets the resource sharing state.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullName" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="isShared" alias="Is Shared" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify whether to allow sharing of the resource.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetResourceSharedState reservationId resourcesFullName isShared ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetResourceSharedState(reservationId,resourcesFullName,isShared);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetResourceSharedState&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullName&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullName&gt;
      &lt;isShared&gt;{isShared}&lt;/isShared&gt;
      &lt;/SetResourceSharedState&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetResourceSharedState $reservationId {"Router 1234"} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        testShellAPI.SetResourceSharedState(reservationId,new string[]{"Router 1234"},YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetResourceSharedState&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourcesFullName&gt;
        &lt;string&gt;Router 1234&lt;/string&gt;
        &lt;/resourcesFullName&gt;
        &lt;isShared&gt;1&lt;/isShared&gt;
        &lt;/SetResourceSharedState&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetRouteAttributes" Title="Set a route's attributes." Lang="all" Category="Reservation operations\Routing">
    <Description>Sets attributes and associated values for a specified route.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourceFullPath" alias="Source Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="targetResourceFullPath" alias="Target Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="applyChangesTo" alias="Apply Changes To" Type="RouteAttributesChangeTarget" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify on which resources to apply the attribute changes: Source/Target/All.Source refers to the resource connected to the source endpoint of the route. Target refers to the resource connected to the target endpoint of the route. All encompasses all route resources.</Description>
        <MoreDescription Lang="tcl">Use 0 for Source, 1 for Target and 2 for All.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Source, 1 for Target and 2 for All.</MoreDescription>
      </Parameter>
      <Parameter Name="attributeRequests" alias="Attribute Requests" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetRouteAttributes reservationId sourceResourceFullPath targetResourceFullPath applyChangesTo attributeRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetRouteAttributes(reservationId,sourceResourceFullPath,targetResourceFullPath,applyChangesTo,attributeRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetRouteAttributes&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourceFullPath&gt;{sourceResourceFullPath}&lt;/sourceResourceFullPath&gt;
      &lt;targetResourceFullPath&gt;{targetResourceFullPath}&lt;/targetResourceFullPath&gt;
      &lt;applyChangesTo&gt;{applyChangesTo}&lt;/applyChangesTo&gt;
      &lt;attributeRequests&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/attributeRequests&gt;
      &lt;/SetRouteAttributes&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetRouteAttributes $reservationId "Router 1234/Port 1" "GenericResource 1234/Port 1" 2 {"SW_Version" "1.3"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.SetRouteAttributes(reservationId,"Router 1234/Port 1","GenericResource 1234/Port 1",RouteAttributesChangeTarget.All,new string["SW_Version","1.3"]);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetRouteAttributes&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;sourceResourceFullPath&gt;Router 1234/Port 1&lt;/sourceResourceFullPath&gt;
        &lt;targetResourceFullPath&gt;GenericResource 1234/Port 1&lt;/targetResourceFullPath&gt;
        &lt;applyChangesTo&gt;2&lt;/applyChangesTo&gt;
        &lt;attributeRequests&gt;
        &lt;string&gt;SW_Version&lt;/string&gt;
        &lt;string&gt;1.3&lt;/string&gt;
        &lt;/attributeRequests&gt;
        &lt;/SetRouteAttributes&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetRouteAttributesViaAlias" Title="Set a route's attributes." Lang="all" Category="Reservation operations\Routing">
    <Description>Sets attributes and associated values for a route specified via its alias.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="routeAlias" alias="Route Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the route’s alias.</Description>
      </Parameter>
      <Parameter Name="applyChangesTo" alias="Apply Changes To" Type="RouteAttributesChangeTarget" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify on which resources to apply the attribute changes: Source/Target/All.Source refers to the resource connected to the source endpoint of the route. Target refers to the resource connected to the target endpoint of the route. All encompasses all route resources.</Description>
        <MoreDescription Lang="tcl">Use 0 for Source, 1 for Target and 2 for All.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 0 for Source, 1 for Target and 2 for All.</MoreDescription>
      </Parameter>
      <Parameter Name="attributeRequests" alias="Attribute Requests" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify an array of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetRouteAttributesViaAlias reservationId routeAlias applyChangesTo attributeRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetRouteAttributesViaAlias(reservationId,routeAlias,applyChangesTo,attributeRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetRouteAttributesViaAlias&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;routeAlias&gt;{routeAlias}&lt;/routeAlias&gt;
      &lt;applyChangesTo&gt;{applyChangesTo}&lt;/applyChangesTo&gt;
      &lt;attributeRequests&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/attributeRequests&gt;
      &lt;/SetRouteAttributesViaAlias&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetRouteAttributesViaAlias $reservationId "route1" 2 {"SW_Version" "1.3"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        testShellAPI.SetRouteAttributesViaAlias(reservationId,"route1",RouteAttributesChangeTarget.All,new string["SW_Version","1.3"]);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetRouteAttributesViaAlias&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;routeAlias&gt;route1&lt;/routeAlias&gt;
        &lt;applyChangesTo&gt;2&lt;/applyChangesTo&gt;
        &lt;attributeRequests&gt;
        &lt;string&gt;SW_Version&lt;/string&gt;
        &lt;string&gt;1.3&lt;/string&gt;
        &lt;/attributeRequests&gt;
        &lt;/SetRouteAttributesViaAlias&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetConnectorAttributes" Title="Set a connector's attributes." Lang="all" Category="Reservation operations\Routing">
    <Description>Sets attributes and associated values for a specified connector.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourceFullName" alias="Source Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="targetResourceFullName" alias="Target Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="attributeRequests" alias="Attribute Requests" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetConnectorAttributes reservationId sourceResourceFullName targetResourceFullName attributeRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetConnectorAttributes(reservationId,sourceResourceFullPath,targetResourceFullPath,attributeRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetConnectorAttributes&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourceFullName&gt;{sourceResourceFullName}&lt;/sourceResourceFullName&gt;
      &lt;targetResourceFullName&gt;{targetResourceFullName}&lt;/targetResourceFullName&gt;
      &lt;attributeRequests&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributeRequests&gt;
      &lt;/SetConnectorAttributes&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetConnectorAttributes "2623d08d-9d19-4b95-a8dc-d7cca5ea05fb" "Router 1234/Port 1" "GenericResource 1234/Port 1" {{"SW_Version" "1.3"}} ?resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.SetConnectorAttributes(reservationId,"Router 1234/Port 1","GenericResource 1234/Port 1", new string[,]{{"SW_Version","1.3"}});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetConnectorAttributes&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;sourceResourceFullName&gt;Router 1234/Port 1&lt;/sourceResourceFullName&gt;
        &lt;targetResourceFullName&gt;GenericResource 1234/Port 1&lt;/targetResourceFullName&gt;
        &lt;attributeRequests&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;Part Number&lt;/Name&gt;
        &lt;Value&gt;123&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributeRequests&gt;
        &lt;/SetConnectorAttributes&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetConnectorAttributesViaAlias" Title="Set a connector's attributes." Lang="all" Category="Reservation operations\Routing">
    <Description>Sets attributes and associated values for a connector specified via its alias.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="connectorAlias" alias="Connector Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the connector’s alias.</Description>
      </Parameter>
      <Parameter Name="attributeRequests" alias="Attribute Requests" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetConnectorAttributesViaAlias reservationId connectorAlias attributeRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetConnectorAttributesViaAlias(reservationId,connectorAlias,attributeRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetConnectorAttributesViaAlias&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;connectorAlias&gt;{connectorAlias}&lt;/connectorAlias&gt;
      &lt;attributeRequests&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributeRequests&gt;
      &lt;/SetConnectorAttributesViaAlias&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetConnectorAttributesViaAlias "2623d08d-9d19-4b95-a8dc-d7cca5ea05fb" "connector1" {{"SW_Version" "1.3"}} ?resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resultXml;
        testShellAPI.SetConnectorAttributesViaAlias(reservationId,"connector1", new string[,]{{"SW_Version","1.3"}});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetConnectorAttributesViaAlias&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;connectorAlias&gt;connector1&lt;/connectorAlias&gt;
        &lt;attributeRequests&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;Part Number&lt;/Name&gt;
        &lt;Value&gt;123&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributeRequests&gt;
        &lt;/SetConnectorAttributesViaAlias&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetGroupDomainPermissions" Title="Set the permission level of a group in domain." Lang="all" Category="User management\Domains">
    <Description>Set the permission level of a group in domain.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="groupName" alias="Groups Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the group name.</Description>
      </Parameter>
      <Parameter Name="viewOnly" alias="View Only" Type="YesNoOptions" Default="false" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify if the group should be have view only permissions.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetGroupDomainPermissions domainName groupName viewOnly ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetGroupDomainPermission(domainName,groupName,viewOnly);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetGroupDomainPermissions&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;viewOnly&gt;{viewOnly}&lt;/viewOnly&gt;
      &lt;/SetGroupDomainPermissions&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetGroupDomainPermissions Global RND_Users 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SetGroupDomainPermissions("Global", "RND_Users", YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetGroupDomainPermissions&gt;
        &lt;domainName&gt;Global&lt;/domainName&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;viewOnly&gt;true&lt;/viewOnly&gt;
        &lt;/SetGroupDomainPermissions&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetConnectorsInReservation" Title="Reserve specified connectors." Lang="all" Category="Reservation operations\Routing">
    <Description>Adds connectors between source and target or update existing ones.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="connectors" alias="Connectors" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>List of connectors to set in the reservation. For example: {['SourceResourceFullPath', 'TargetResourceFullPath', 'Direction', 'Alias';]}.</Description>
      </Parameter>
      <Parameter Name="setConnectors" alias="Connectors" Type="string[,]" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Visual connectors associated with the specified reservation.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetConnectorsInReservation reservationId connectors ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetConnectorsInReservation(reservationId, connectors, out setConnectors);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetConnectorsInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;connectors&gt;
      &lt;SetConnectorRequest&gt;
      &lt;SourceResourceFullName&gt;{SourceResourceFullName}&lt;/SourceResourceFullName&gt;
      &lt;TargetResourceFullName&gt;{TargetResourceFullName}&lt;/TargetResourceFullName&gt;
      &lt;Direction&gt;{Direction}&lt;/Direction&gt;
      &lt;Alias&gt;{Alias}&lt;/Alias&gt;
      &lt;/SetConnectorRequest&gt;
      &lt;/connectors&gt;
      &lt;/SetConnectorsInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetConnectorsInReservation "28cb2a71-c8fc-4f41-a22b-e65685ebed14" {{"bridge1/port1" "bridge2/port1" "bi" "some alias"}} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias="some alias" Type="Default" ResourceMappingType="bi" Source="bridge1/port1" Target="bridge2/port1"&gt;&lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] connectors = {{"bridge1/port1", "bridge2/port1", "bi", "some alias"}};
        string[,] setConnectors;
        testShellAPI.SetConnectorsInReservation(reservationId, connectors, out setConnectors);
      </Input>
      <Output Name="connectors">{{"bridge1/port1", "bridge2/port1", "bi", "some alias"}}</Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="setConnectors" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetConnectorsInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;connectors&gt;
        &lt;SetConnectorRequest&gt;
        &lt;SourceResourceFullName&gt;bridge1/port1&lt;/SourceResourceFullName&gt;
        &lt;TargetResourceFullName&gt;bridge2/port1&lt;/TargetResourceFullName&gt;
        &lt;Direction&gt;bi&lt;/Direction&gt;
        &lt;Alias&gt;some alias&lt;/Alias&gt;
        &lt;/SetConnectorRequest&gt;
        &lt;/connectors&gt;
        &lt;/SetConnectorsInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Connectors&gt;
        &lt;Connector Alias="some alias" Type="Default" ResourceMappingType="bi" Source="bridge1/port1" Target="bridge2/port1"&gt;&lt;/Connector&gt;
        &lt;/Connectors&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetTopologyCategory"  Title="Sets a category to a topology." Lang="all" Category="Inventory management\Topologies">
    <Description>Set a category to given topology</Description>>
    <Parameters>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology we want to set the given category to</Description>
      </Parameter>
      <Parameter Name="categoryName" alias="Category Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the category's name which we want to set</Description>
      </Parameter>
      <Parameter Name="categoryValue" alias="Category Value" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the category's value</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetTopologyCategory topologyFullPath categoryName categoryValue ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetTopologyCategory(topologyFullPath, categoryName, categoryValue);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetTopologyCategory&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;categoryName&gt;{categoryName}&lt;/categoryName&gt;
      &lt;categoryValue&gt;{categoryValue}&lt;/categoryValue&gt;
      &lt;/SetTopologyCategory&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>
        ::TestShellAPI::SetTopologyCategory "dir1/myTopology" lookUpCategory bonjour resultXml
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SetTopologyCategory("dir1/myTopology","lookUpCategory","bonjour");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetTopologyCategory&gt;
        &lt;topologyFullPath&gt;dir1/myTopology&lt;/topologyFullPath&gt;
        &lt;categoryName&gt;lookUpCategory&lt;/categoryName&gt;
        &lt;categoryValue&gt;bonjour&lt;/categoryValue&gt;
        &lt;/SetTopologyCategory&gt;
      </Input>
      <Output Name="resultXml" src="" />
    </ExampleCode>
  </Command>
  <Command Name="SyncResourceFromDevice" Title="Update a resource with current device settings and mappings." Lang="all" Category="Inventory management\Resources">
    <Description>Synchronizes the specified resource with current device settings and mappings.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="errorMessage" alias="Error Message" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Returns any error messages from the resource synchronization.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SyncResourceFromDevice resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SyncResourceFromDevice(resourceFullPath,out errorMessage,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SyncResourceFromDevice&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/SyncResourceFromDevice&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SyncResourceFromDevice "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml, errorMessage;
        testShellAPI.SyncResourceFromDevice("L1 Switch 1234",out errorMessage,out resultXml);
      </Input>
      <Output Name="errorMessage" />
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="errorMessage" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SyncResourceFromDevice&gt;
        &lt;resourceFullPath&gt;L1 Switch 1234&lt;/resourceFullPath&gt;
        &lt;/SyncResourceFromDevice&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SyncResourceToDevice" Title="Update device settings and mappings from the resource." Lang="all" Category="Inventory management\Resources">
    <Description>Updates device settings and mappings from the specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="errorMessage" alias="Error Message" Type="string" Default="" Lang="cs;lib" MandatoryValue="false" Direction="out">
        <Description>Returns any error messages from the resource synchronization.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SyncResourceToDevice resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SyncResourceToDevice(resourceFullPath,out errorMessage,out resultXml);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SyncResourceToDevice&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/SyncResourceToDevice&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SyncResourceToDevice "L1 Switch 1234" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml, errorMessage;
        testShellAPI.SyncResourceToDevice("L1 Switch 1234",out errorMessage,out resultXml);
      </Input>
      <Output Name="errorMessage" />
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="errorMessage" src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SyncResourceToDevice&gt;
        &lt;resourceFullPath&gt;L1 Switch 1234&lt;/resourceFullPath&gt;
        &lt;/SyncResourceToDevice&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetReservationResourcePosition" Title="Set resource position in a reservation." Lang="all" Category="Reservation operations\Layout">
    <Description>Sets the location of a specified resource in the reservation diagram.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullName" alias="Resource Full Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName.</Description>
      </Parameter>
      <Parameter Name="x" alias="x" Type="double" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the x coordinate of the resource's top left corner.</Description>
      </Parameter>
      <Parameter Name="y" alias="y" Type="double" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the y coordinate of the resource's top left corner.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetReservationResourcePosition reservationId resourceFullName x y ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetReservationResourcePosition(reservationId,resourceFullPath,x,y);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetReservationResourcePosition&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullName&gt;{resourceFullName}&lt;/resourceFullName&gt;
      &lt;x&gt;{x}&lt;/x&gt;
      &lt;y&gt;{y}&lt;/y&gt;
      &lt;/SetReservationResourcePosition&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetReservationResourcePosition $reservationId $resourceFullName $x $y resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string resourceFullName = "bridge";
        double x = 100, y = 100;
        string resultXml;
        testShellAPI.SetReservationResourcePosition(reservationId, resourceFullName, x, y, out resultXml);
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetReservationResourcePosition&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;resourceFullName&gt;bridge&lt;/resourceFullName&gt;
        &lt;x&gt;100&lt;/x&gt;
        &lt;y&gt;100&lt;/y&gt;
        &lt;/SetReservationResourcePosition&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetServiceDriver" Title="Sets a service model driver." Lang="all" Category="Inventory management\Services">
    <Description>Sets the driver for a specified service model, if empty, removes its driver.</Description>
    <Parameters>
      <Parameter Name="serviceName" alias="Service Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the service model.</Description>
      </Parameter>
      <Parameter Name="driverName" alias="Driver Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the name of the driver.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetServiceDriver serviceName driverName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetServiceDriver(serviceName,driverName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetServiceDriver&gt;
      &lt;serviceName&gt;{serviceName}&lt;/serviceName&gt;
      &lt;driverName&gt;{driverName}&lt;/driverName&gt;
      &lt;/SetServiceDriver&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetServiceDriver "Example_service_model" "NewDriver" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SetServiceDriver("Example_service_model","NewDriver");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetServiceDriver&gt;
        &lt;serviceName&gt;Example_service_model&lt;/serviceName&gt;
        &lt;driverName&gt;NewDriver&lt;/driverName&gt;
        &lt;/SetServiceDriver&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetServiceLiveStatus" Title="Sets the live status of a service." Lang="all" Category="Reservation operations\Services">
    <Description>Sets the live status of a service</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation's unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceAlias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the service's alias.</Description>
      </Parameter>
      <Parameter Name="liveStatusName" alias="Live Status Name" Type="string"  Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Resource live status name</Description>
      </Parameter>
      <Parameter Name="additionalInfo" alias="Additional Info" Type="string"  Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Resource live status additional info</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string"  Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Resource live status additional info</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetServiceLiveStatus reservationId serviceAlias liveStatusName additionalInfo ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetServiceLiveStatus(reservationId, serviceAlias, liveStatusName, additionalInfo);</Syntax>
    <Syntax Lang="library" src="" >
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;SetServiceLiveStatus&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceAlias&gt;{serviceAlias}&lt;/serviceAlias&gt;
      &lt;liveStatusName&gt;{liveStatusName}&lt;/liveStatusName&gt;
      &lt;additionalInfo&gt;{additionalInfo}&lt;/additionalInfo&gt;
      &lt;/SetServiceLiveStatus&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetServiceLiveStatus "0e937c16-2865-4ad1-b843-aa7608282e56" "My Service" "Online" "Resource was responding to pings at 12/12/2013 10:35 AM" resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.SetServiceLiveStatus("0e937c16-2865-4ad1-b843-aa7608282e56", "My Service", "Online" , "Resource was responding to pings at 12/12/2013 10:35 AM");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input Name="reservationId" src="" >reservationId</Input>
      <Input Name="serviceAlias" src="" >serviceAlias</Input>
      <Input Name="liveStatusName" src="" >status name</Input>
      <Input Name="additionalInfo" src="" >some info</Input>
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetServiceLiveStatus&gt;
        &lt;reservationId&gt;reservationId&lt;/reservationId&gt;
        &lt;serviceAlias&gt;serviceAlias&lt;/serviceAlias&gt;
        &lt;liveStatusName&gt;Online&lt;/liveStatusName&gt;
        &lt;additionalInfo&gt;Resource was responding to pings at 12/12/2013 10:35 AM&lt;/additionalInfo&gt;
        &lt;/SetServiceLiveStatus&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo/&gt;
        &lt;/Response&gt;
      </Output>
    </ExampleCode>
  </Command>
  <Command Name="SetReservationServicePosition" Title="Set service position in a reservation." Lang="all" Category="Reservation operations\Layout">
    <Description>Sets the location of a specified service in the reservation diagram.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceAlias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the alias of the service.</Description>
      </Parameter>
      <Parameter Name="x" alias="x" Type="double" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the x coordinate of the resource's top left corner.</Description>
      </Parameter>
      <Parameter Name="y" alias="y" Type="double" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the y coordinate of the resource's top left corner.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetReservationServicePosition reservationId serviceAlias x y ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetReservationServicePosition(reservationId,serviceAlias,x,y);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetReservationServicePosition&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceAlias&gt;{serviceAlias}&lt;/serviceAlias&gt;
      &lt;x&gt;{x}&lt;/x&gt;
      &lt;y&gt;{y}&lt;/y&gt;
      &lt;/SetReservationServicePosition&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetReservationServicePosition $reservationId $serviceAlias $x $y</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string serviceAlias = "service";
        double x = 100, y = 100;
        testShellAPI.SetReservationServicePosition(reservationId, serviceAlias, x, y);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetReservationServicePosition&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;serviceAlias&gt;bridge&lt;/serviceAlias&gt;
        &lt;x&gt;100&lt;/x&gt;
        &lt;y&gt;100&lt;/y&gt;
        &lt;/SetReservationServicePosition&gt;
      </Input>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="SetServiceAttributesValues" Title="Set a resource's attributes." Lang="all" Category="Reservation operations\Services">
    <Description>Sets attributes and associated values for a specified resource.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="serviceAlias" alias="Service Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the service name.</Description>
      </Parameter>
      <Parameter Name="attributeRequests" alias="Attribute Requests" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of attributes and associated attribute values.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::SetServiceAttributesValues reservationId serviceAlias attributeRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">SetServiceAttributesValues(reservationId,serviceAlias,attributeRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;SetServiceAttributesValues&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;serviceAlias&gt;{serviceAlias}&lt;/serviceAlias&gt;
      &lt;attributeRequests&gt;
      &lt;AttributeNameValue&gt;
      &lt;Name&gt;{Name}&lt;/Name&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/AttributeNameValue&gt;
      &lt;/attributeRequests&gt;
      &lt;/SetServiceAttributesValues&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::SetServiceAttributesValues "2623d08d-9d19-4b95-a8dc-d7cca5ea05fb" "Service1" {{"SW_Version" "1.3"}}</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.SetServiceAttributesValues(reservationId,"Service1", new string[,]{{"SW_Version","1.3"}});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;SetServiceAttributesValues&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;serviceAlias&gt;service1&lt;/serviceAlias&gt;
        &lt;attributeRequests&gt;
        &lt;AttributeNameValue&gt;
        &lt;Name&gt;Part Number&lt;/Name&gt;
        &lt;Value&gt;123&lt;/Value&gt;
        &lt;/AttributeNameValue&gt;
        &lt;/attributeRequests&gt;
        &lt;/SetServiceAttributesValues&gt;
      </Input>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="TerminateReservation" Title="Terminate a reservation." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Terminates the specified reservation if the reservation is in a state of teardown.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::TerminateReservation reservationId ?resultXml?</Syntax>
    <Syntax Lang="cSharp">TerminateReservation(reservationId);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;TerminateReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;/TerminateReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::TerminateReservation $reservationId resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.TerminateReservation(reservationId);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;TerminateReservation&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;/TerminateReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UnlockResource" Title="Unlock a resource." Lang="all" Category="Inventory operations\Locking &amp; unlocking">
    <Description>Unlocks the specified resource.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UnlockResource reservationId resourceFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UnlockResource(reservationId,resourceFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UnlockResource&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;/UnlockResource&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UnlockResource $reservationId "GenericResource 1234/Port 1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.UnlockResource(reservationId,"GenericResource 1234/Port 1");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UnlockResource&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourceFullPath&gt;GenericResource 1234/Port 1&lt;/resourceFullPath&gt;
        &lt;/UnlockResource&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UnlockResources" Title="Unlock multiple resources." Lang="all" Category="Inventory operations\Locking &amp; unlocking">
    <Description>Unlocks multiple resources.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="resourcesFullPath" alias="Resources Full Path" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a list of resource names. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/ResourceName</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UnlockResources reservationId resourcesFullPath ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UnlockResources(reservationId,resourcesFullPath);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UnlockResources&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;resourcesFullPath&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/resourcesFullPath&gt;
      &lt;/UnlockResources&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UnlockResources $reservationId {"GenericResource 1234/Port 1" "GenericResource 1234/Port 2"} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        testShellAPI.UnlockResources(new string[]{"GenericResource 1234/Port 1" "GenericResource 1234/Port 2"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UnlockResources&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;resourcesFullPath&gt;
        &lt;string&gt;GenericResource 1234/Port 1&lt;/string&gt;
        &lt;string&gt;GenericResource 1234/Port 2&lt;/string&gt;
        &lt;/resourcesFullPath&gt;
        &lt;/UnlockResources&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UnMapPorts" Title="Remove mapping for a pair of mapped ports." Lang="all" Category="Inventory management\Mapping">
    <Description>Removes existing mapping between a pair of physical (L1) switch ports.</Description>
    <Parameters>
      <Parameter Name="portA" alias="Port A" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the source port. (i.e. Folder1/Chassis1/Blade1/Port1).</Description>
      </Parameter>
      <Parameter Name="portB" alias="Port B" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the destination port. (i.e. Folder1/Chassis1/Blade1/Port1).</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UnMapPorts portA portB ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UnMapPorts(portA,portB);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UnMapPorts&gt;
      &lt;portA&gt;{portA}&lt;/portA&gt;
      &lt;portB&gt;{portB}&lt;/portB&gt;
      &lt;/UnMapPorts&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UnMapPorts "L1 Switch 1234/Blade 1/Port 1" "L1 Switch 1234/Blade 1/Port 3" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UnMapPorts("L1 Switch 1234/Blade 1/Port 1","L1 Switch 1234/Blade 1/Port 3");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UnMapPorts&gt;
        &lt;portA&gt;L1 Switch 1234/Blade 1/Port 1&lt;/portA&gt;
        &lt;portB&gt;L1 Switch 1234/Blade 1/Port 3&lt;/portB&gt;
        &lt;/UnMapPorts&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateConnectorAliasInReservation" Title="Update connector alias in reservation." Lang="all" Category="Reservation operations\Routing">
    <Description>Sets alias for a specified connector.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="sourceResourceFullName" alias="Source Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="targetResourceFullName" alias="Target Resource" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="direction" alias="Direction" Type="MappingType" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify bidirectional or unidirectional as the connector direction.</Description>
        <MoreDescription Lang="tcl">Use 'bi' for bidirectional or 'uni' for unidirectional connector.</MoreDescription>
        <MoreDescription Lang="xmlrpc">Use 'bi' for bidirectional or 'uni' for unidirectional connector.</MoreDescription>
      </Parameter>
      <Parameter Name="alias" alias="Connector Alias" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the connector’s alias.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateConnectorAliasInReservation reservationId sourceResourceFullName targetResourceFullName direction alias ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateConnectorAliasInReservation(reservationId,sourceResourceFullName,targetResourceFullName,direction,alias);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateConnectorAliasInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;sourceResourceFullName&gt;{sourceResourceFullName}&lt;/sourceResourceFullName&gt;
      &lt;targetResourceFullName&gt;{targetResourceFullName}&lt;/targetResourceFullName&gt;
      &lt;direction&gt;{direction}&lt;/direction&gt;
      &lt;alias&gt;{alias}&lt;/alias&gt;
      &lt;/UpdateConnectorAliasInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateConnectorAliasInReservation "2623d08d-9d19-4b95-a8dc-d7cca5ea05fb" "Router 1234/Port 1" "GenericResource 1234/Port 1" "bi" "some alias" ?resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateConnectorAliasInReservation("2623d08d-9d19-4b95-a8dc-d7cca5ea05fb","Router 1234/Port 1","GenericResource 1234/Port 1", MappingType.Bidirectional, "some alias");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateConnectorAliasInReservation&gt;
        &lt;reservationId&gt;2623d08d-9d19-4b95-a8dc-d7cca5ea05fb&lt;/reservationId&gt;
        &lt;sourceResourceFullName&gt;Router 1234/Port 1&lt;/sourceResourceFullName&gt;
        &lt;targetResourceFullName&gt;GenericResource 1234/Port 1&lt;/targetResourceFullName&gt;
        &lt;direction&gt;bi&lt;/direction&gt;
        &lt;alias&gt;some alias&lt;/alias&gt;
        &lt;/UpdateConnectorAliasInReservation&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateConnectionWeight" Title="Update the connection weight between two resources." Lang="all" Category="Inventory management\Connections">
    <Description>Sets a weight score on a physical connection between two resources. Weights are used to optimize route resolution in physical switch scenarios.</Description>
    <Parameters>
      <Parameter Name="resourceAFullPath" alias="Resource A Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resourceBFullPath" alias="Resource B Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="weight" alias="Physical Connection Weight" Type="int" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a number to represent the connection weight between the specified resources.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateConnectionWeight resourceAFullPath resourceBFullPath weight ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateConnectionWeight(resourceAFullPath,resourceBFullPath,weight);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateConnectionWeight&gt;
      &lt;resourceAFullPath&gt;{resourceAFullPath}&lt;/resourceAFullPath&gt;
      &lt;resourceBFullPath&gt;{resourceBFullPath}&lt;/resourceBFullPath&gt;
      &lt;weight&gt;{weight}&lt;/weight&gt;
      &lt;/UpdateConnectionWeight&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateConnectionWeight "Router 1234/Port 1" "L1 Switch 1234/Blade 1/Port 3" 5 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateConnectionWeight("Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3", 5);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateConnectionWeight&gt;
        &lt;resourceAFullPath&gt;Router 1234/Port 1&lt;/resourceAFullPath&gt;
        &lt;resourceBFullPath&gt;L1 Switch 1234/Blade 1/Port 3&lt;/resourceBFullPath&gt;
        &lt;weight&gt;5&lt;/weight&gt;
        &lt;/UpdateConnectionWeight&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateDomainTopologiesFolder" Title="Update the domain’s topologies folder." Lang="all" Category="User management\Domains">
    <Description>Update the domain’s topologies folder.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="topologiesFolder" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateDomainTopologiesFolder domainName topologiesFolder ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateDomainTopologiesFolder(domainName,topologiesFolder);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateDomainTopologiesFolder&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;topologiesFolder&gt;{topologiesFolder}&lt;/topologiesFolder&gt;
      &lt;/UpdateDomainTopologiesFolder&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateDomainTopologiesFolder "Domain1" "Domain Topologies" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateDomainTopologiesFolder("Domain1","Domain Topologies");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateDomainTopologiesFolder&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;topologiesFolder&gt;Domain Topologies&lt;/topologiesFolder&gt;
        &lt;/UpdateDomainTopologiesFolder&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UnarchiveDomain" Title="Un archive the domain " Lang="all" Category="User management\Domains">
    <Description>Unarchive a domain. New reservation can be created.</Description>
    <Parameters>
      <Parameter Name="domainName" alias="Domain Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the domain.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UnarchiveDomain domainName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UnarchiveDomain(domainName,out resultXml);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UnarchiveDomain&gt;
      &lt;domainName&gt;{domainName}&lt;/domainName&gt;
      &lt;/UnarchiveDomain&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UnarchiveDomain "Domain1" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        testShellAPI.UnarchiveDomain("Domain1", out resultXml);
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UnarchiveDomain&gt;
        &lt;domainName&gt;Domain1&lt;/domainName&gt;
        &lt;/UnarchiveDomain&gt;
      </Input>
      <Output Name="resultXml" src="" />
    </ExampleCode>
  </Command>
  <Command Name="UpdateGroup" Title="" Lang="all" Category="User management\Groups">
    <Description>Modifies the group name and description.</Description>
    <Parameters>
      <Parameter Name="groupName" alias="Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the group.</Description>
      </Parameter>
      <Parameter Name="newName" alias="New Group Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the new group name.</Description>
      </Parameter>
      <Parameter Name="description" alias="Description" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Provide a short description of the group.</Description>
      </Parameter>
      <Parameter Name="groupRole" alias="Group Role" Type="UpdateRoleOptions" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the role of the group, possible values: External, Regular, DomainAdmin or Ignore (to keep the current role).</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateGroup groupName newName description groupRole ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateGroup(groupName,newName,description,groupRole);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateGroup&gt;
      &lt;groupName&gt;{groupName}&lt;/groupName&gt;
      &lt;newName&gt;{newName}&lt;/newName&gt;
      &lt;description&gt;{description}&lt;/description&gt;
      &lt;groupRole&gt;{groupRole}&lt;/groupRole&gt;
      &lt;/UpdateGroup&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateGroup QA_Users QAUsers "QA users group" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateGroup("QA_Users","QAUsers","QA users group",GroupRole.Regular);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateGroup&gt;
        &lt;groupName&gt;QA_Users&lt;/groupName&gt;
        &lt;newName&gt;QAUsers&lt;/newName&gt;
        &lt;description&gt;QA users group&lt;/description&gt;
        &lt;groupRole&gt;Regular&lt;/groupRole&gt;
        &lt;/UpdateGroup&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdatePhysicalConnection" Title="Define the physical connection between two resources." Lang="all" Category="Inventory management\Connections">
    <Description>Define a physical connection (cable link) between two resources.</Description>
    <Parameters>
      <Parameter Name="resourceAFullPath" alias="Resource A Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resourceBFullPath" alias="Resource B Full Path" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1. You may leave this parameter blank if you wish to disconnect the existing source resource connection.</Description>
      </Parameter>
      <Parameter Name="overrideExistingConnections" alias="Override existing" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Overriding existing connections will automatically remove existing physical connection if they conflict with the requested new connections. If set to 'No', an error message will be displayed if any port is already connected and the operation will be cancelled.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdatePhysicalConnection resourceAFullPath resourceBFullPath overrideExistingConnections ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdatePhysicalConnection(resourceAFullPath,resourceBFullPath,overrideExistingConnections);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdatePhysicalConnection&gt;
      &lt;resourceAFullPath&gt;{resourceAFullPath}&lt;/resourceAFullPath&gt;
      &lt;resourceBFullPath&gt;{resourceBFullPath}&lt;/resourceBFullPath&gt;
      &lt;overrideExistingConnections&gt;{overrideExistingConnections}&lt;/overrideExistingConnections&gt;
      &lt;/UpdatePhysicalConnection&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdatePhysicalConnection "Router 1234/Port 1" "L1 Switch 1234/Blade 1/Port 3" 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdatePhysicalConnection("Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3",YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdatePhysicalConnection&gt;
        &lt;resourceAFullPath&gt;Router 1234/Port 1&lt;/resourceAFullPath&gt;
        &lt;resourceBFullPath&gt;L1 Switch 1234/Blade 1/Port 3&lt;/resourceBFullPath&gt;
        &lt;overrideExistingConnections&gt;1&lt;/overrideExistingConnections&gt;
        &lt;/UpdatePhysicalConnection&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdatePhysicalConnections" Title="Define physical connections between resources." Lang="all" Category="Inventory management\Connections">
    <Description>Define physical connections (cable links) between resources.</Description>
    <Parameters>
      <Parameter Name="physicalConnectionUpdateRequest" alias="Physical Connections" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of physical connections to update. For example: {['ResourceA','ResourceB';'ResourceC',ResourceD']}</Description>
      </Parameter>
      <Parameter Name="overrideExistingConnections" alias="Override existing" Type="YesNoOptions" Default="Yes" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Overriding existing connections will automatically remove existing physical connection if they conflict with the requested new connections. If set to 'No', an error message will be displayed if any port is already connected and the operation will be cancelled.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdatePhysicalConnections physicalConnectionUpdateRequest overrideExistingConnections ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdatePhysicalConnections(physicalConnectionsUpdateRequests,overrideExistingConnections);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdatePhysicalConnections&gt;
      &lt;physicalConnectionUpdateRequest&gt;
      &lt;PhysicalConnectionUpdateRequest&gt;
      &lt;ResourceAFullName&gt;{ResourceAFullName}&lt;/ResourceAFullName&gt;
      &lt;ResourceBFullName&gt;{ResourceBFullName}&lt;/ResourceBFullName&gt;
      &lt;ConnectionWeight&gt;{ConnectionWeight}&lt;/ConnectionWeight&gt;
      &lt;/PhysicalConnectionUpdateRequest&gt;
      &lt;/physicalConnectionUpdateRequest&gt;
      &lt;overrideExistingConnections&gt;{overrideExistingConnections}&lt;/overrideExistingConnections&gt;
      &lt;/UpdatePhysicalConnections&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdatePhysicalConnections {{resource001 resource002 100} {"Router 1234/Port 1" "L1 Switch 1234/Blade 1/Port 3"}} 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdatePhysicalConnections(new[,] {{"Router 1234/Port 1","L1 Switch 1234/Blade 1/Port 3"}},YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdatePhysicalConnections&gt;
        &lt;physicalConnectionUpdateRequest&gt;
        &lt;PhysicalConnectionUpdateRequest&gt;
        &lt;ResourceAFullName&gt;ResourceA&lt;/ResourceAFullName&gt;
        &lt;ResourceBFullName&gt;ResourceB&lt;/ResourceBFullName&gt;
        &lt;ConnectionWeight&gt;ConnectionWeight&lt;/ConnectionWeight&gt;
        &lt;/PhysicalConnectionUpdateRequest&gt;
        &lt;/physicalConnectionUpdateRequest&gt;
        &lt;overrideExistingConnections&gt;1&lt;/overrideExistingConnections&gt;
        &lt;/UpdatePhysicalConnections&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateReservationDescription" Title="Change a reservation description." Lang="all" Category="Reservation operations\Scheduling">
    <Description>Modifies the description for a specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the reservation ID.</Description>
      </Parameter>
      <Parameter Name="description" alias="Description" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Provide an updated description of the reservation. This text will replace the current description.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateReservationDescription reservationId description ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateReservationDescription(reservationId,description);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateReservationDescription&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;description&gt;{description}&lt;/description&gt;
      &lt;/UpdateReservationDescription&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateReservationDescription $reservationId "New Description" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        testShellAPI.UpdateReservationDescription(reservationId,"New Description");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateReservationDescription&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;description&gt;New Description&lt;/description&gt;
        &lt;/UpdateReservationDescription&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateReservationGlobalInputs" Title="Updates the unlinked global inputs in a specified reservation." Lang="all" Category="Reservation operations\Topologies">
    <Description>Updates the unlinked global inputs in a specified reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the reservation ID.</Description>
      </Parameter>
      <Parameter Name="globalInputs" alias="Global Inputs" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Global inputs associated with the specified topology. For example: {['Input Name', 'Value';]}.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateReservationGlobalInputs reservationId globalInputs ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateReservationGlobalInputs(reservationId, globalInputs,out resultXml);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateReservationGlobalInputs&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;globalInputs&gt;
      &lt;UpdateTopologyGlobalInputsRequest&gt;
      &lt;ParamName&gt;{ParamName}&lt;/ParamName&gt;
      &lt;Value&gt;{Value}&lt;/Value&gt;
      &lt;/UpdateTopologyGlobalInputsRequest&gt;
      &lt;/globalInputs&gt;
      &lt;/UpdateReservationGlobalInputs&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateReservationGlobalInputs "af626b88-458b-4e7a-9054-c03d8cffa260" {{"attribute" "new value"}} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string[,] globalInputs = {{"input1", "new value"}};
        testShellAPI.UpdateReservationGlobalInputs(reservationId, globalInputs);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateReservationGlobalInputs&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;globalInputs&gt;
        &lt;UpdateTopologyGlobalInputsRequest&gt;
        &lt;ParamName&gt;attribute&lt;/ParamName&gt;
        &lt;Value&gt;new value&lt;/Value&gt;
        &lt;/UpdateTopologyGlobalInputsRequest&gt;
        &lt;/globalInputs&gt;
        &lt;/UpdateReservationGlobalInputs&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateResourceAddress" Title="Update a resource address." Lang="all" Category="Inventory management\Resources">
    <Description>Modifies the address for a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resourceAddress" alias="Resource Address" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource’s new address.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateResourceAddress resourceFullPath resourceAddress ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateResourceAddress(resourceFullPath,resourceAddress);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateResourceAddress&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;resourceAddress&gt;{resourceAddress}&lt;/resourceAddress&gt;
      &lt;/UpdateResourceAddress&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateResourceAddress "Router 1234" "192.168.1.201" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateResourceAddress("Router 1234","192.168.1.201");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateResourceAddress&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;resourceAddress&gt;192.168.1.201&lt;/resourceAddress&gt;
        &lt;/UpdateResourceAddress&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateResourceDescription" Title="Change a resource description." Lang="all" Category="Inventory management\Resources">
    <Description>Modifies the description for a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="resourceDescription" alias="Resource description" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Provide an updated description of the resource. This text will replace the current description.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateResourceDescription resourceFullPath resourceDescription ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateResourceDescription(resourceFullPath,resourceDescription);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateResourceDescription&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;resourceDescription&gt;{resourceDescription}&lt;/resourceDescription&gt;
      &lt;/UpdateResourceDescription&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateResourceDescription "Router 1234" "a new description for the resource" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateResourceDescription("Router 1234","a new description for the resource");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateResourceDescription&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;resourceDescription&gt;a new description for the resource&lt;/resourceDescription&gt;
        &lt;/UpdateResourceDescription&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateResourceDriver" Title="Update a resource driver." Lang="all" Category="Inventory management\Resources">
    <Description>Updates the driver for a specified resource.</Description>
    <Parameters>
      <Parameter Name="resourceFullPath" alias="Resource Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the resource name. You can also include the full path from the root to the resource before the resource name, separated by slashes. For example: FolderName/RouterA/Port1.</Description>
      </Parameter>
      <Parameter Name="driverName" alias="Driver Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the driver.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateResourceDriver resourceFullPath driverName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateResourceDriver(resourceFullPath,driverName);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateResourceDriver&gt;
      &lt;resourceFullPath&gt;{resourceFullPath}&lt;/resourceFullPath&gt;
      &lt;driverName&gt;{driverName}&lt;/driverName&gt;
      &lt;/UpdateResourceDriver&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateResourceDriver "Router 1234" "NewDriver" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateResourceDriver("Router 1234","NewDriver");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateResourceDriver&gt;
        &lt;resourceFullPath&gt;Router 1234&lt;/resourceFullPath&gt;
        &lt;driverName&gt;NewDriver&lt;/driverName&gt;
        &lt;/UpdateResourceDriver&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateTopologyOwner" Title="Update the topology owner." Lang="all" Category="Inventory management\Topologies">
    <Description>Update the topology owner.</Description>
    <Parameters>
      <Parameter Name="topologyName" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="ownerName" alias="Topology Owner" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology owner.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateTopologyOwner topologyName ownerName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateTopologyOwner(topologyName,ownerName);</Syntax>
    <Syntax Lang="library" src="">
    </Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateTopologyOwner&gt;
      &lt;topologyName&gt;{topologyName}&lt;/topologyName&gt;
      &lt;ownerName&gt;{ownerName}&lt;/ownerName&gt;
      &lt;/UpdateTopologyOwner&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateTopologyOwner "Temp Automation Resources/TP1" "admin" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateTopologyOwner("Temp Automation Resources/TP1","admin");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateTopologyOwner&gt;
        &lt;topologyName&gt;Temp Automation Resources/TP1&lt;/topologyName&gt;
        &lt;ownerName&gt;admin&lt;/ownerName&gt;
        &lt;/UpdateTopologyOwner&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateTopologyDriver" Title="Update the topology driver." Lang="all" Category="Inventory management\Topologies">
    <Description>Update the topology driver.</Description>
    <Parameters>
      <Parameter Name="topologyFullPath" alias="Topology Full Path" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the topology name. Include the full path from the root to the topology, separated by slashes. For example: FolderName/Topologies/TopologyName.</Description>
      </Parameter>
      <Parameter Name="driverName" alias="Driver Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the driver. Leave empty to remove associated driver.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateTopologyDriver topologyFullPath driverName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateTopologyDriver(topologyFullPath,driverName);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateTopologyDriver&gt;
      &lt;topologyFullPath&gt;{topologyFullPath}&lt;/topologyFullPath&gt;
      &lt;driverName&gt;{driverName}&lt;/driverName&gt;
      &lt;/UpdateTopologyDriver&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateTopologyDriver "Topologies/Topology1" "Topology Driver" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateTopologyDriver("Topologies/Topology1", "Topology Driver");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateTopologyDriver&gt;
        &lt;topologyFullPath&gt;Topologies/Topology1&lt;/topologyFullPath&gt;
        &lt;driverName&gt;Topology Driver&lt;/driverName&gt;
        &lt;/UpdateTopologyDriver&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateUser" Title="" Lang="all" Category="User management\Users">
    <Description>Configures a user's email and activity settings.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>The username of the user you want to update.</Description>
      </Parameter>
      <Parameter Name="email" alias="Email" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>The new email address to update to.</Description>
      </Parameter>
      <Parameter Name="isActive" alias="Is Active" Type="YesNoOptions" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Grant or deny active access to the application.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateUser username email isActive ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateUser(username,email,isActive);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateUser&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;email&gt;{email}&lt;/email&gt;
      &lt;isActive&gt;{isActive}&lt;/isActive&gt;
      &lt;/UpdateUser&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateUser User1234 "user1234@work.com" 1 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateUser("User1234","user1234@work.com",YesNoOptions.Yes);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateUser&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;email&gt;user1234@work.com&lt;/email&gt;
        &lt;isActive&gt;1&lt;/isActive&gt;
        &lt;/UpdateUser&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateUsersLimitations" Title="" Lang="all" Category="User management\Users">
    <Description>Update MaxConcurrentReservations and MaxReservationDuration.</Description>
    <Parameters>
      <Parameter Name="userUpdateRequests" alias="UserUpdateRequests" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>List of Username, MaxConcurrentReservations and MaxReservationDuration of the users you wish to update.  For example: {['Username1','1','1';'Username2','12','10']}</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateUsersLimitations userUpdateRequests ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateUsersLimitations(userUpdateRequests);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateUsersLimitations&gt;
      &lt;userUpdateRequests&gt;
      &lt;UserUpdateRequest&gt;
      &lt;Username&gt;{Username}&lt;/Username&gt;
      &lt;MaxConcurrentReservations&gt;{MaxConcurrentReservations}&lt;/MaxConcurrentReservations&gt;
      &lt;MaxReservationDuration&gt;{MaxReservationDuration}&lt;/MaxReservationDuration&gt;
      &lt;/UserUpdateRequest&gt;
      &lt;/userUpdateRequests&gt;
      &lt;/UpdateUsersLimitations&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateUsersLimitations {{"username1" "1" ""} {"username2" "100" "50"}} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateUsersLimitations(new string[,] {{"username1", "1", ""},{"username2", "100", "50"}});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateUsersLimitations&gt;
        &lt;userUpdateRequests&gt;
        &lt;UserUpdateRequest&gt;
        &lt;Username&gt;User1234&lt;/Username&gt;
        &lt;MaxConcurrentReservations&gt;100&lt;/MaxConcurrentReservations&gt;
        &lt;MaxReservationDuration&gt;&lt;/MaxReservationDuration&gt;
        &lt;/UserUpdateRequest&gt;
        &lt;UserUpdateRequest&gt;
        &lt;Username&gt;User5678&lt;/Username&gt;
        &lt;MaxConcurrentReservations&gt;100&lt;/MaxConcurrentReservations&gt;
        &lt;MaxReservationDuration&gt;100&lt;/MaxReservationDuration&gt;
        &lt;/UserUpdateRequest&gt;
        &lt;/userUpdateRequests&gt;
        &lt;/UpdateUsersLimitations&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateUserGroups" Title="Modify a user's group memberships." Lang="all" Category="User management\Users">
    <Description>Update an existing user's groups (replaces existing user's groups).</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the user.</Description>
      </Parameter>
      <Parameter Name="groupsNames" alias="Groups Names" Type="string[]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Use this method to update a user's group memberships. Activating this method will replace the user's memberships with the specified list of groups.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateUserGroups username groupsNames ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateUserGroups(username,groupsNames);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateUserGroups&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;groupsNames&gt;
      &lt;string&gt;{string}&lt;/string&gt;
      &lt;/groupsNames&gt;
      &lt;/UpdateUserGroups&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateUserGroups User1234 {QA_Users Testers_Users} resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateUserGroups("User1234", new string[] {"QA_Users", "Testers_Users"});
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateUserGroups&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;groupsNames&gt;
        &lt;string&gt;QA_Users&lt;/string&gt;
        &lt;string&gt;Testers_Users&lt;/string&gt;
        &lt;/groupsNames&gt;
        &lt;/UpdateUserGroups&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateUserPassword" Title="Modify a user's password." Lang="all" Category="User management\Users">
    <Description>Changes a user's password.</Description>
    <Parameters>
      <Parameter Name="username" alias="Username" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the name of the user.</Description>
      </Parameter>
      <Parameter Name="password" alias="Password" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the user's new login password.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateUserPassword username password ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateUserPassword(username,newPassword);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateUserPassword&gt;
      &lt;username&gt;{username}&lt;/username&gt;
      &lt;password&gt;{password}&lt;/password&gt;
      &lt;/UpdateUserPassword&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateUserPassword User1234 Pass1234 resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateUserPassword("User1234","Pass1234");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateUserPassword&gt;
        &lt;username&gt;User1234&lt;/username&gt;
        &lt;password&gt;Pass1234&lt;/password&gt;
        &lt;/UpdateUserPassword&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateRouteAliasesInReservation" Title="Update route aliases in a reservation" Lang="all" Category="Reservation operations\Routing">
    <Description>Update route aliases in a reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specifies the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="routeAliases" alias="Source Target Alias" Type="string[,]" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify a matrix of route source, route target and alias. For example: {['SourceResourceFullName', 'TargetFullName','Alias';'SourceResourceFullName2', 'TargetFullName2','Alias2']}.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateRouteAliasesInReservation reservationId routeAliases ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateRouteAliasesInReservation(reservationId,routeAliases,out resultXml);</Syntax>
    <Syntax Lang="library" src=""></Syntax>
    <Syntax Lang="xmlrpc">
      &lt;UpdateRouteAliasesInReservation&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;routeAliases&gt;
      &lt;UpdateRouteAliasRequest&gt;
      &lt;SourceResourceName&gt;{SourceResourceName}&lt;/SourceResourceName&gt;
      &lt;TargetResourceName&gt;{TargetResourceName}&lt;/TargetResourceName&gt;
      &lt;Alias&gt;{Alias}&lt;/Alias&gt;
      &lt;/UpdateRouteAliasRequest&gt;
      &lt;/routeAliases&gt;
      &lt;/UpdateRouteAliasesInReservation&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateRouteAliasesInReservation $reservationId {{"Router 1234/Port 1" "GenericResource 1234/Port 2" "uni route"}} resultXml</Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string resultXml;
        string reservationId = "28cb2a71-c8fc-4f41-a22b-e65685ebed14";
        string[,] routes;
        testShellAPI.UpdateRouteAliasesInReservation(reservationId,new string[,]{"Router 1234/Port 1","GenericResource 1234/Port 2","a route"},out resultXml);
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
      <Output Name="resultXml" src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateRouteAliasesInReservation&gt;
        &lt;reservationId&gt;28cb2a71-c8fc-4f41-a22b-e65685ebed14&lt;/reservationId&gt;
        &lt;routeAliases&gt;
        &lt;UpdateRouteAliasRequest&gt;
        &lt;SourceResourceName&gt;SourceResourceName&lt;/SourceResourceName&gt;
        &lt;TargetResourceName&gt;TargetResourceName&lt;/TargetResourceName&gt;
        &lt;Alias&gt;Alias&lt;/Alias&gt;
        &lt;/UpdateRouteAliasRequest&gt;
        &lt;/routeAliases&gt;
        &lt;/UpdateRouteAliasesInReservation&gt;
      </Input>
      <Output Name="resultXml">
        &lt;ResponseInfo&gt;
        &lt;Routes&gt;
        &lt;Route Source="Router 1234/Port 1" Target="GenericResource 1234/Port 2" RouteType="uni" Shared="true"&gt;
        &lt;Segments&gt;
        &lt;Segment Source="Router 1234/Port 1" Target="L1 Switch 1234/Blade 1/Port 3"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 3" Target="L1 Switch 1234/Blade 1/Port 2"/&gt;
        &lt;Segment Source="L1 Switch 1234/Blade 1/Port 2" Target="GenericResource 1234/Port 2"/&gt;
        &lt;/Segments&gt;
        &lt;/Route&gt;
        &lt;/Routes&gt;
        &lt;/ResponseInfo&gt;
      </Output>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateDriver" Title="Update Driver" Lang="all" Category="Drivers">
    <Description>Uploads a new version of an existing driver</Description>
    <Parameters>
      <Parameter Name="driverName" alias="Driver Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the driver name.</Description>
      </Parameter>
      <Parameter Name="driverFile" alias="Drive File Data" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the driver file data (base64 file representation).</Description>
      </Parameter>
      <Parameter Name="driverFileName" alias="Driver File Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the driver file name(optional).</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateDriver driverName driverFile driverFileName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateDriver(driverName, pathToDriver);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateDriver&gt;
      &lt;driverName&gt;{driverName}&lt;/driverName&gt;
      &lt;driverFile&gt;{driverFile}&lt;/driverFile&gt;
      &lt;driverFileName&gt;{driverFileName}&lt;/driverFileName&gt;
      &lt;/UpdateDriver&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateDriver "TestDriver" "23423234....==" "TestDriver_Update.zip" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateDriver("TestDriver", "c:\file.zip");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateDriver&gt;
        &lt;driverName&gt;TestDriver&lt;/driverName&gt;
        &lt;driverFile&gt;234234234234..==&lt;/driverFile&gt;
        &lt;driverFileName&gt;Test_Driver_Update.zip&lt;/driverFileName&gt;
        &lt;/UpdateDriver&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="UpdateScript" Title="Update Script" Lang="all" Category="Drivers">
    <Description>Uploads a new version of an existing script</Description>
    <Parameters>
      <Parameter Name="scriptName" alias="Script Name" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the script name.</Description>
      </Parameter>
      <Parameter Name="scriptFile" alias="Script File Data" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the script file data (base64 file representation).</Description>
      </Parameter>
      <Parameter Name="scriptFileName" alias="Script File Name" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="in">
        <Description>Specify the script file name(optional).</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="tcl" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output. If a variable is not provided, the results will be sent to stdout.</Description>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::UpdateScript scriptName scriptFile scriptFileName ?resultXml?</Syntax>
    <Syntax Lang="cSharp">UpdateScript(scriptName, pathToScript);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;UpdateScript&gt;
      &lt;scriptName&gt;{scriptName}&lt;/scriptName&gt;
      &lt;scriptFile&gt;{scriptFile}&lt;/scriptFile&gt;
      &lt;scriptFileName&gt;{scriptFileName}&lt;/scriptFileName&gt;
      &lt;/UpdateScript&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::UpdateScript "TestScript" "23423234....==" "TestScript_Update.zip" resultXml</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        testShellAPI.UpdateScript("TestScript", "c:\TestScript_Update.zip");
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;UpdateScript&gt;
        &lt;scriptName&gt;TestScript&lt;/scriptName&gt;
        &lt;scriptFile&gt;234234234234..==&lt;/scriptFile&gt;
        &lt;scriptFileName&gt;Test_Script_Update.zip&lt;/scriptFileName&gt;
        &lt;/UpdateScript&gt;
      </Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
  <Command Name="WriteMessageToReservationOutput" Title="Allows sending output to the command output window in a reservation." Lang="all" Category="Reservation operations\Commands">
    <Description>Allows sending output to the command output window in a reservation.</Description>
    <Parameters>
      <Parameter Name="reservationId" alias="Reservation ID" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Specify the string that represents the reservation’s unique identifier.</Description>
      </Parameter>
      <Parameter Name="message" alias="Output message" Type="string" Default="" Lang="all" MandatoryValue="true" Direction="in">
        <Description>Output message to the command output window.</Description>
      </Parameter>
      <Parameter Name="resultXml" alias="Result XML" Type="string" Default="" Lang="all" MandatoryValue="false" Direction="out">
        <Description>Specify the variable for the XML output.</Description>
        <MoreDescription Lang="tcl">If a variable is not provided, the results will be sent to stdout.</MoreDescription>
      </Parameter>
    </Parameters>
    <Syntax Lang="tcl">::TestShellAPI::WriteMessageToReservationOutput reservationId message ?resultXml?</Syntax>
    <Syntax Lang="cSharp">WriteMessageToReservationOutput(reservationId, message);</Syntax>
    <Syntax Lang="library" src="" />
    <Syntax Lang="xmlrpc">
      &lt;WriteMessageToReservationOutput&gt;
      &lt;reservationId&gt;{reservationId}&lt;/reservationId&gt;
      &lt;message&gt;{message}&lt;/message&gt;
      &lt;/WriteMessageToReservationOutput&gt;
    </Syntax>
    <ExampleCode Lang="tcl">
      <Input>::TestShellAPI::WriteMessageToReservationOutput "2623d08d-9d19-4b95-a8dc-d7cca5ea05fb" "this is an output from API"</Input>
      <Output Name="resultXml" />
    </ExampleCode>
    <ExampleCode Lang="cSharp">
      <Input>
        TestShellAPI.TestShellAPI testShellAPI = new TestShellAPI.TestShellAPI();
        string reservationId = "af626b88-458b-4e7a-9054-c03d8cffa260";
        string message = "this is an output from API";
        testShellAPI.WriteMessageToReservationOutput(reservationId, message);
      </Input>
    </ExampleCode>
    <ExampleCode Lang="library">
      <Input src="" />
    </ExampleCode>
    <ExampleCode Lang="xmlrpc">
      <Input>
        &lt;WriteMessageToReservationOutput&gt;
        &lt;reservationId&gt;af626b88-458b-4e7a-9054-c03d8cffa260&lt;/reservationId&gt;
        &lt;message&gt;this is an output from API&lt;/message&gt;
        &lt;/WriteMessageToReservationOutput&gt;
      </Input>
    </ExampleCode>
    <Exceptions Lang="cSharp" />
    <Exceptions Lang="library" />
    <Exceptions Lang="xmlrpc" />
  </Command>
</Commands>